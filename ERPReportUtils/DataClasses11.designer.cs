#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ERPReportUtils
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="APReport")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertDimDates(DimDates instance);
    partial void UpdateDimDates(DimDates instance);
    partial void DeleteDimDates(DimDates instance);
    partial void InsertDimGroups(DimGroups instance);
    partial void UpdateDimGroups(DimGroups instance);
    partial void DeleteDimGroups(DimGroups instance);
    partial void InsertDimWarehouses(DimWarehouses instance);
    partial void UpdateDimWarehouses(DimWarehouses instance);
    partial void DeleteDimWarehouses(DimWarehouses instance);
    partial void InsertDimMovementTypes(DimMovementTypes instance);
    partial void UpdateDimMovementTypes(DimMovementTypes instance);
    partial void DeleteDimMovementTypes(DimMovementTypes instance);
    partial void InsertDimGoods(DimGoods instance);
    partial void UpdateDimGoods(DimGoods instance);
    partial void DeleteDimGoods(DimGoods instance);
    partial void InsertDimGoodTypes(DimGoodTypes instance);
    partial void UpdateDimGoodTypes(DimGoodTypes instance);
    partial void DeleteDimGoodTypes(DimGoodTypes instance);
    partial void InsertDimUnits(DimUnits instance);
    partial void UpdateDimUnits(DimUnits instance);
    partial void DeleteDimUnits(DimUnits instance);
    partial void InsertDimPriceTypes(DimPriceTypes instance);
    partial void UpdateDimPriceTypes(DimPriceTypes instance);
    partial void DeleteDimPriceTypes(DimPriceTypes instance);
    partial void InsertDimCurrencies(DimCurrencies instance);
    partial void UpdateDimCurrencies(DimCurrencies instance);
    partial void DeleteDimCurrencies(DimCurrencies instance);
    partial void InsertDimDepartments(DimDepartments instance);
    partial void UpdateDimDepartments(DimDepartments instance);
    partial void DeleteDimDepartments(DimDepartments instance);
    partial void InsertDimPOSRegisters(DimPOSRegisters instance);
    partial void UpdateDimPOSRegisters(DimPOSRegisters instance);
    partial void DeleteDimPOSRegisters(DimPOSRegisters instance);
    partial void InsertDimPeople(DimPeople instance);
    partial void UpdateDimPeople(DimPeople instance);
    partial void DeleteDimPeople(DimPeople instance);
    partial void InsertFactPOS(FactPOS instance);
    partial void UpdateFactPOS(FactPOS instance);
    partial void DeleteFactPOS(FactPOS instance);
    partial void InsertFactPrices(FactPrices instance);
    partial void UpdateFactPrices(FactPrices instance);
    partial void DeleteFactPrices(FactPrices instance);
    partial void InsertFactPricesHistory(FactPricesHistory instance);
    partial void UpdateFactPricesHistory(FactPricesHistory instance);
    partial void DeleteFactPricesHistory(FactPricesHistory instance);
    partial void InsertDimGoodAnalyticalKeys(DimGoodAnalyticalKeys instance);
    partial void UpdateDimGoodAnalyticalKeys(DimGoodAnalyticalKeys instance);
    partial void DeleteDimGoodAnalyticalKeys(DimGoodAnalyticalKeys instance);
    partial void InsertDimSpecifications(DimSpecifications instance);
    partial void UpdateDimSpecifications(DimSpecifications instance);
    partial void DeleteDimSpecifications(DimSpecifications instance);
    partial void InsertFactPOSLines(FactPOSLines instance);
    partial void UpdateFactPOSLines(FactPOSLines instance);
    partial void DeleteFactPOSLines(FactPOSLines instance);
    partial void InsertDimUnitConversion(DimUnitConversion instance);
    partial void UpdateDimUnitConversion(DimUnitConversion instance);
    partial void DeleteDimUnitConversion(DimUnitConversion instance);
    partial void InsertFactRemains(FactRemains instance);
    partial void UpdateFactRemains(FactRemains instance);
    partial void DeleteFactRemains(FactRemains instance);
    partial void InsertFactConsignmentMoves(FactConsignmentMoves instance);
    partial void UpdateFactConsignmentMoves(FactConsignmentMoves instance);
    partial void DeleteFactConsignmentMoves(FactConsignmentMoves instance);
    partial void InsertFactConsignmentRemains(FactConsignmentRemains instance);
    partial void UpdateFactConsignmentRemains(FactConsignmentRemains instance);
    partial void DeleteFactConsignmentRemains(FactConsignmentRemains instance);
    partial void InsertDocProductionCosts(DocProductionCosts instance);
    partial void UpdateDocProductionCosts(DocProductionCosts instance);
    partial void DeleteDocProductionCosts(DocProductionCosts instance);
    partial void InsertDocProductionCostIn(DocProductionCostIn instance);
    partial void UpdateDocProductionCostIn(DocProductionCostIn instance);
    partial void DeleteDocProductionCostIn(DocProductionCostIn instance);
    partial void InsertDocProductionCostOut(DocProductionCostOut instance);
    partial void UpdateDocProductionCostOut(DocProductionCostOut instance);
    partial void DeleteDocProductionCostOut(DocProductionCostOut instance);
    partial void InsertDocProductionCostMaterials(DocProductionCostMaterials instance);
    partial void UpdateDocProductionCostMaterials(DocProductionCostMaterials instance);
    partial void DeleteDocProductionCostMaterials(DocProductionCostMaterials instance);
    partial void InsertDocProductionLines(DocProductionLines instance);
    partial void UpdateDocProductionLines(DocProductionLines instance);
    partial void DeleteDocProductionLines(DocProductionLines instance);
    partial void InsertFactProductionTree(FactProductionTree instance);
    partial void UpdateFactProductionTree(FactProductionTree instance);
    partial void DeleteFactProductionTree(FactProductionTree instance);
    partial void InsertDimTechOperation(DimTechOperation instance);
    partial void UpdateDimTechOperation(DimTechOperation instance);
    partial void DeleteDimTechOperation(DimTechOperation instance);
    partial void InsertDocProduction(DocProduction instance);
    partial void UpdateDocProduction(DocProduction instance);
    partial void DeleteDocProduction(DocProduction instance);
    partial void InsertDimPartner(DimPartner instance);
    partial void UpdateDimPartner(DimPartner instance);
    partial void DeleteDimPartner(DimPartner instance);
    partial void InsertDocSale(DocSale instance);
    partial void UpdateDocSale(DocSale instance);
    partial void DeleteDocSale(DocSale instance);
    partial void InsertDocSalesLine(DocSalesLine instance);
    partial void UpdateDocSalesLine(DocSalesLine instance);
    partial void DeleteDocSalesLine(DocSalesLine instance);
    partial void InsertFactCurrencyRate(FactCurrencyRate instance);
    partial void UpdateFactCurrencyRate(FactCurrencyRate instance);
    partial void DeleteFactCurrencyRate(FactCurrencyRate instance);
    partial void InsertDocTransferProduction(DocTransferProduction instance);
    partial void UpdateDocTransferProduction(DocTransferProduction instance);
    partial void DeleteDocTransferProduction(DocTransferProduction instance);
    partial void InsertDocTransferProductionLine(DocTransferProductionLine instance);
    partial void UpdateDocTransferProductionLine(DocTransferProductionLine instance);
    partial void DeleteDocTransferProductionLine(DocTransferProductionLine instance);
    partial void InsertFactMaterialsInProduction(FactMaterialsInProduction instance);
    partial void UpdateFactMaterialsInProduction(FactMaterialsInProduction instance);
    partial void DeleteFactMaterialsInProduction(FactMaterialsInProduction instance);
    partial void InsertFactProduction(FactProduction instance);
    partial void UpdateFactProduction(FactProduction instance);
    partial void DeleteFactProduction(FactProduction instance);
    partial void InsertFactProductionRemain(FactProductionRemain instance);
    partial void UpdateFactProductionRemain(FactProductionRemain instance);
    partial void DeleteFactProductionRemain(FactProductionRemain instance);
    partial void InsertFactMovement(FactMovement instance);
    partial void UpdateFactMovement(FactMovement instance);
    partial void DeleteFactMovement(FactMovement instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::ERPReportUtils.Properties.Settings.Default.ERPReportDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DimDates> DimDates
		{
			get
			{
				return this.GetTable<DimDates>();
			}
		}
		
		public System.Data.Linq.Table<DimGroups> DimGroups
		{
			get
			{
				return this.GetTable<DimGroups>();
			}
		}
		
		public System.Data.Linq.Table<DimWarehouses> DimWarehouses
		{
			get
			{
				return this.GetTable<DimWarehouses>();
			}
		}
		
		public System.Data.Linq.Table<DimMovementTypes> DimMovementTypes
		{
			get
			{
				return this.GetTable<DimMovementTypes>();
			}
		}
		
		public System.Data.Linq.Table<DimGoods> DimGoods
		{
			get
			{
				return this.GetTable<DimGoods>();
			}
		}
		
		public System.Data.Linq.Table<DimGoodTypes> DimGoodTypes
		{
			get
			{
				return this.GetTable<DimGoodTypes>();
			}
		}
		
		public System.Data.Linq.Table<DimUnits> DimUnits
		{
			get
			{
				return this.GetTable<DimUnits>();
			}
		}
		
		public System.Data.Linq.Table<DimPriceTypes> DimPriceTypes
		{
			get
			{
				return this.GetTable<DimPriceTypes>();
			}
		}
		
		public System.Data.Linq.Table<DimCurrencies> DimCurrencies
		{
			get
			{
				return this.GetTable<DimCurrencies>();
			}
		}
		
		public System.Data.Linq.Table<DimDepartments> DimDepartments
		{
			get
			{
				return this.GetTable<DimDepartments>();
			}
		}
		
		public System.Data.Linq.Table<DimPOSRegisters> DimPOSRegisters
		{
			get
			{
				return this.GetTable<DimPOSRegisters>();
			}
		}
		
		public System.Data.Linq.Table<DimPeople> DimPeople
		{
			get
			{
				return this.GetTable<DimPeople>();
			}
		}
		
		public System.Data.Linq.Table<FactPOS> FactPOS
		{
			get
			{
				return this.GetTable<FactPOS>();
			}
		}
		
		public System.Data.Linq.Table<FactPrices> FactPrices
		{
			get
			{
				return this.GetTable<FactPrices>();
			}
		}
		
		public System.Data.Linq.Table<FactPricesHistory> FactPricesHistory
		{
			get
			{
				return this.GetTable<FactPricesHistory>();
			}
		}
		
		public System.Data.Linq.Table<DimGoodAnalyticalKeys> DimGoodAnalyticalKeys
		{
			get
			{
				return this.GetTable<DimGoodAnalyticalKeys>();
			}
		}
		
		public System.Data.Linq.Table<DimSpecifications> DimSpecifications
		{
			get
			{
				return this.GetTable<DimSpecifications>();
			}
		}
		
		public System.Data.Linq.Table<FactPOSLines> FactPOSLines
		{
			get
			{
				return this.GetTable<FactPOSLines>();
			}
		}
		
		public System.Data.Linq.Table<DimUnitConversion> DimUnitConversion
		{
			get
			{
				return this.GetTable<DimUnitConversion>();
			}
		}
		
		public System.Data.Linq.Table<FactRemains> FactRemains
		{
			get
			{
				return this.GetTable<FactRemains>();
			}
		}
		
		public System.Data.Linq.Table<FactConsignmentMoves> FactConsignmentMoves
		{
			get
			{
				return this.GetTable<FactConsignmentMoves>();
			}
		}
		
		public System.Data.Linq.Table<FactConsignmentRemains> FactConsignmentRemains
		{
			get
			{
				return this.GetTable<FactConsignmentRemains>();
			}
		}
		
		public System.Data.Linq.Table<DocProductionCosts> DocProductionCosts
		{
			get
			{
				return this.GetTable<DocProductionCosts>();
			}
		}
		
		public System.Data.Linq.Table<DocProductionCostIn> DocProductionCostIn
		{
			get
			{
				return this.GetTable<DocProductionCostIn>();
			}
		}
		
		public System.Data.Linq.Table<DocProductionCostOut> DocProductionCostOut
		{
			get
			{
				return this.GetTable<DocProductionCostOut>();
			}
		}
		
		public System.Data.Linq.Table<DocProductionCostMaterials> DocProductionCostMaterials
		{
			get
			{
				return this.GetTable<DocProductionCostMaterials>();
			}
		}
		
		public System.Data.Linq.Table<DocProductionLines> DocProductionLines
		{
			get
			{
				return this.GetTable<DocProductionLines>();
			}
		}
		
		public System.Data.Linq.Table<FactProductionTree> FactProductionTree
		{
			get
			{
				return this.GetTable<FactProductionTree>();
			}
		}
		
		public System.Data.Linq.Table<DimTechOperation> DimTechOperations
		{
			get
			{
				return this.GetTable<DimTechOperation>();
			}
		}
		
		public System.Data.Linq.Table<DocProduction> DocProductions
		{
			get
			{
				return this.GetTable<DocProduction>();
			}
		}
		
		public System.Data.Linq.Table<DimPartner> DimPartners
		{
			get
			{
				return this.GetTable<DimPartner>();
			}
		}
		
		public System.Data.Linq.Table<DocSale> DocSales
		{
			get
			{
				return this.GetTable<DocSale>();
			}
		}
		
		public System.Data.Linq.Table<DocSalesLine> DocSalesLines
		{
			get
			{
				return this.GetTable<DocSalesLine>();
			}
		}
		
		public System.Data.Linq.Table<FactCurrencyRate> FactCurrencyRates
		{
			get
			{
				return this.GetTable<FactCurrencyRate>();
			}
		}
		
		public System.Data.Linq.Table<DocTransferProduction> DocTransferProductions
		{
			get
			{
				return this.GetTable<DocTransferProduction>();
			}
		}
		
		public System.Data.Linq.Table<DocTransferProductionLine> DocTransferProductionLines
		{
			get
			{
				return this.GetTable<DocTransferProductionLine>();
			}
		}
		
		public System.Data.Linq.Table<FactMaterialsInProduction> FactMaterialsInProductions
		{
			get
			{
				return this.GetTable<FactMaterialsInProduction>();
			}
		}
		
		public System.Data.Linq.Table<FactProduction> FactProductions
		{
			get
			{
				return this.GetTable<FactProduction>();
			}
		}
		
		public System.Data.Linq.Table<FactProductionRemain> FactProductionRemains
		{
			get
			{
				return this.GetTable<FactProductionRemain>();
			}
		}
		
		public System.Data.Linq.Table<FactMovement> FactMovements
		{
			get
			{
				return this.GetTable<FactMovement>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimDates")]
	public partial class DimDates : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DateKey;
		
		private System.DateTime _DateTimeStamp;
		
		private System.DateTime _Date;
		
		private string _DateName;
		
		private int _WeekDay;
		
		private string _WeekDateName;
		
		private int _Week;
		
		private string _WeekName;
		
		private int _Month;
		
		private string _MonthName;
		
		private int _Quarter;
		
		private string _QuarterName;
		
		private int _Year;
		
		private string _YearName;
		
		private EntitySet<FactPOS> _FactPOS;
		
		private EntitySet<FactPrices> _FactPrices;
		
		private EntitySet<FactPricesHistory> _FactPricesHistory;
		
		private EntitySet<FactRemains> _FactRemains;
		
		private EntitySet<FactConsignmentMoves> _FactConsignmentMoves;
		
		private EntitySet<FactConsignmentRemains> _FactConsignmentRemains;
		
		private EntitySet<DocProductionCosts> _DocProductionCosts;
		
		private EntitySet<FactProductionTree> _FactProductionTree;
		
		private EntitySet<DocProduction> _DocProductions;
		
		private EntitySet<DocTransferProduction> _DocTransferProductions;
		
		private EntitySet<FactMaterialsInProduction> _FactMaterialsInProductions;
		
		private EntitySet<FactProduction> _FactProductions;
		
		private EntitySet<FactProductionRemain> _FactProductionRemains;
		
		private EntitySet<FactMovement> _FactMovements;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateKeyChanging(int value);
    partial void OnDateKeyChanged();
    partial void OnDateTimeStampChanging(System.DateTime value);
    partial void OnDateTimeStampChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnDateNameChanging(string value);
    partial void OnDateNameChanged();
    partial void OnWeekDayChanging(int value);
    partial void OnWeekDayChanged();
    partial void OnWeekDateNameChanging(string value);
    partial void OnWeekDateNameChanged();
    partial void OnWeekChanging(int value);
    partial void OnWeekChanged();
    partial void OnWeekNameChanging(string value);
    partial void OnWeekNameChanged();
    partial void OnMonthChanging(int value);
    partial void OnMonthChanged();
    partial void OnMonthNameChanging(string value);
    partial void OnMonthNameChanged();
    partial void OnQuarterChanging(int value);
    partial void OnQuarterChanged();
    partial void OnQuarterNameChanging(string value);
    partial void OnQuarterNameChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnYearNameChanging(string value);
    partial void OnYearNameChanged();
    #endregion
		
		public DimDates()
		{
			this._FactPOS = new EntitySet<FactPOS>(new Action<FactPOS>(this.attach_FactPOS), new Action<FactPOS>(this.detach_FactPOS));
			this._FactPrices = new EntitySet<FactPrices>(new Action<FactPrices>(this.attach_FactPrices), new Action<FactPrices>(this.detach_FactPrices));
			this._FactPricesHistory = new EntitySet<FactPricesHistory>(new Action<FactPricesHistory>(this.attach_FactPricesHistory), new Action<FactPricesHistory>(this.detach_FactPricesHistory));
			this._FactRemains = new EntitySet<FactRemains>(new Action<FactRemains>(this.attach_FactRemains), new Action<FactRemains>(this.detach_FactRemains));
			this._FactConsignmentMoves = new EntitySet<FactConsignmentMoves>(new Action<FactConsignmentMoves>(this.attach_FactConsignmentMoves), new Action<FactConsignmentMoves>(this.detach_FactConsignmentMoves));
			this._FactConsignmentRemains = new EntitySet<FactConsignmentRemains>(new Action<FactConsignmentRemains>(this.attach_FactConsignmentRemains), new Action<FactConsignmentRemains>(this.detach_FactConsignmentRemains));
			this._DocProductionCosts = new EntitySet<DocProductionCosts>(new Action<DocProductionCosts>(this.attach_DocProductionCosts), new Action<DocProductionCosts>(this.detach_DocProductionCosts));
			this._FactProductionTree = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTree), new Action<FactProductionTree>(this.detach_FactProductionTree));
			this._DocProductions = new EntitySet<DocProduction>(new Action<DocProduction>(this.attach_DocProductions), new Action<DocProduction>(this.detach_DocProductions));
			this._DocTransferProductions = new EntitySet<DocTransferProduction>(new Action<DocTransferProduction>(this.attach_DocTransferProductions), new Action<DocTransferProduction>(this.detach_DocTransferProductions));
			this._FactMaterialsInProductions = new EntitySet<FactMaterialsInProduction>(new Action<FactMaterialsInProduction>(this.attach_FactMaterialsInProductions), new Action<FactMaterialsInProduction>(this.detach_FactMaterialsInProductions));
			this._FactProductions = new EntitySet<FactProduction>(new Action<FactProduction>(this.attach_FactProductions), new Action<FactProduction>(this.detach_FactProductions));
			this._FactProductionRemains = new EntitySet<FactProductionRemain>(new Action<FactProductionRemain>(this.attach_FactProductionRemains), new Action<FactProductionRemain>(this.detach_FactProductionRemains));
			this._FactMovements = new EntitySet<FactMovement>(new Action<FactMovement>(this.attach_FactMovements), new Action<FactMovement>(this.detach_FactMovements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime DateTimeStamp
		{
			get
			{
				return this._DateTimeStamp;
			}
			set
			{
				if ((this._DateTimeStamp != value))
				{
					this.OnDateTimeStampChanging(value);
					this.SendPropertyChanging();
					this._DateTimeStamp = value;
					this.SendPropertyChanged("DateTimeStamp");
					this.OnDateTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DateName
		{
			get
			{
				return this._DateName;
			}
			set
			{
				if ((this._DateName != value))
				{
					this.OnDateNameChanging(value);
					this.SendPropertyChanging();
					this._DateName = value;
					this.SendPropertyChanged("DateName");
					this.OnDateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekDay", DbType="Int NOT NULL")]
		public int WeekDay
		{
			get
			{
				return this._WeekDay;
			}
			set
			{
				if ((this._WeekDay != value))
				{
					this.OnWeekDayChanging(value);
					this.SendPropertyChanging();
					this._WeekDay = value;
					this.SendPropertyChanged("WeekDay");
					this.OnWeekDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekDateName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string WeekDateName
		{
			get
			{
				return this._WeekDateName;
			}
			set
			{
				if ((this._WeekDateName != value))
				{
					this.OnWeekDateNameChanging(value);
					this.SendPropertyChanging();
					this._WeekDateName = value;
					this.SendPropertyChanged("WeekDateName");
					this.OnWeekDateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Week", DbType="Int NOT NULL")]
		public int Week
		{
			get
			{
				return this._Week;
			}
			set
			{
				if ((this._Week != value))
				{
					this.OnWeekChanging(value);
					this.SendPropertyChanging();
					this._Week = value;
					this.SendPropertyChanged("Week");
					this.OnWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string WeekName
		{
			get
			{
				return this._WeekName;
			}
			set
			{
				if ((this._WeekName != value))
				{
					this.OnWeekNameChanging(value);
					this.SendPropertyChanging();
					this._WeekName = value;
					this.SendPropertyChanged("WeekName");
					this.OnWeekNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int NOT NULL")]
		public int Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MonthName
		{
			get
			{
				return this._MonthName;
			}
			set
			{
				if ((this._MonthName != value))
				{
					this.OnMonthNameChanging(value);
					this.SendPropertyChanging();
					this._MonthName = value;
					this.SendPropertyChanged("MonthName");
					this.OnMonthNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quarter", DbType="Int NOT NULL")]
		public int Quarter
		{
			get
			{
				return this._Quarter;
			}
			set
			{
				if ((this._Quarter != value))
				{
					this.OnQuarterChanging(value);
					this.SendPropertyChanging();
					this._Quarter = value;
					this.SendPropertyChanged("Quarter");
					this.OnQuarterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuarterName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string QuarterName
		{
			get
			{
				return this._QuarterName;
			}
			set
			{
				if ((this._QuarterName != value))
				{
					this.OnQuarterNameChanging(value);
					this.SendPropertyChanging();
					this._QuarterName = value;
					this.SendPropertyChanged("QuarterName");
					this.OnQuarterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string YearName
		{
			get
			{
				return this._YearName;
			}
			set
			{
				if ((this._YearName != value))
				{
					this.OnYearNameChanging(value);
					this.SendPropertyChanging();
					this._YearName = value;
					this.SendPropertyChanged("YearName");
					this.OnYearNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactPOS", Storage="_FactPOS", ThisKey="DateKey", OtherKey="DateKey")]
		public EntitySet<FactPOS> FactPOS
		{
			get
			{
				return this._FactPOS;
			}
			set
			{
				this._FactPOS.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactPrices", Storage="_FactPrices", ThisKey="DateKey", OtherKey="DateKey")]
		public EntitySet<FactPrices> FactPrices
		{
			get
			{
				return this._FactPrices;
			}
			set
			{
				this._FactPrices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactPricesHistory", Storage="_FactPricesHistory", ThisKey="DateKey", OtherKey="DateKey")]
		public EntitySet<FactPricesHistory> FactPricesHistory
		{
			get
			{
				return this._FactPricesHistory;
			}
			set
			{
				this._FactPricesHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactRemains", Storage="_FactRemains", ThisKey="DateKey", OtherKey="DateKey")]
		public EntitySet<FactRemains> FactRemains
		{
			get
			{
				return this._FactRemains;
			}
			set
			{
				this._FactRemains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactConsignmentMoves", Storage="_FactConsignmentMoves", ThisKey="DateKey", OtherKey="DateKey")]
		public EntitySet<FactConsignmentMoves> FactConsignmentMoves
		{
			get
			{
				return this._FactConsignmentMoves;
			}
			set
			{
				this._FactConsignmentMoves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactConsignmentRemains", Storage="_FactConsignmentRemains", ThisKey="DateKey", OtherKey="DateKey")]
		public EntitySet<FactConsignmentRemains> FactConsignmentRemains
		{
			get
			{
				return this._FactConsignmentRemains;
			}
			set
			{
				this._FactConsignmentRemains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_DocProductionCosts", Storage="_DocProductionCosts", ThisKey="DateKey", OtherKey="DateKey")]
		public EntitySet<DocProductionCosts> DocProductionCosts
		{
			get
			{
				return this._DocProductionCosts;
			}
			set
			{
				this._DocProductionCosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactProductionTree", Storage="_FactProductionTree", ThisKey="DateKey", OtherKey="DateKey")]
		public EntitySet<FactProductionTree> FactProductionTree
		{
			get
			{
				return this._FactProductionTree;
			}
			set
			{
				this._FactProductionTree.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_DocProduction", Storage="_DocProductions", ThisKey="DateKey", OtherKey="DateKey")]
		public EntitySet<DocProduction> DocProductions
		{
			get
			{
				return this._DocProductions;
			}
			set
			{
				this._DocProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_DocTransferProduction", Storage="_DocTransferProductions", ThisKey="DateKey", OtherKey="DateKey")]
		public EntitySet<DocTransferProduction> DocTransferProductions
		{
			get
			{
				return this._DocTransferProductions;
			}
			set
			{
				this._DocTransferProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactMaterialsInProduction", Storage="_FactMaterialsInProductions", ThisKey="DateKey", OtherKey="DateKey")]
		public EntitySet<FactMaterialsInProduction> FactMaterialsInProductions
		{
			get
			{
				return this._FactMaterialsInProductions;
			}
			set
			{
				this._FactMaterialsInProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactProduction", Storage="_FactProductions", ThisKey="DateKey", OtherKey="DateKey")]
		public EntitySet<FactProduction> FactProductions
		{
			get
			{
				return this._FactProductions;
			}
			set
			{
				this._FactProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactProductionRemain", Storage="_FactProductionRemains", ThisKey="DateKey", OtherKey="DateKey")]
		public EntitySet<FactProductionRemain> FactProductionRemains
		{
			get
			{
				return this._FactProductionRemains;
			}
			set
			{
				this._FactProductionRemains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactMovement", Storage="_FactMovements", ThisKey="DateKey", OtherKey="DateKey")]
		public EntitySet<FactMovement> FactMovements
		{
			get
			{
				return this._FactMovements;
			}
			set
			{
				this._FactMovements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactPOS(FactPOS entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = this;
		}
		
		private void detach_FactPOS(FactPOS entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = null;
		}
		
		private void attach_FactPrices(FactPrices entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = this;
		}
		
		private void detach_FactPrices(FactPrices entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = null;
		}
		
		private void attach_FactPricesHistory(FactPricesHistory entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = this;
		}
		
		private void detach_FactPricesHistory(FactPricesHistory entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = null;
		}
		
		private void attach_FactRemains(FactRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = this;
		}
		
		private void detach_FactRemains(FactRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = null;
		}
		
		private void attach_FactConsignmentMoves(FactConsignmentMoves entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = this;
		}
		
		private void detach_FactConsignmentMoves(FactConsignmentMoves entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = null;
		}
		
		private void attach_FactConsignmentRemains(FactConsignmentRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = this;
		}
		
		private void detach_FactConsignmentRemains(FactConsignmentRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = null;
		}
		
		private void attach_DocProductionCosts(DocProductionCosts entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = this;
		}
		
		private void detach_DocProductionCosts(DocProductionCosts entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = null;
		}
		
		private void attach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = this;
		}
		
		private void detach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = null;
		}
		
		private void attach_DocProductions(DocProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = this;
		}
		
		private void detach_DocProductions(DocProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = null;
		}
		
		private void attach_DocTransferProductions(DocTransferProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = this;
		}
		
		private void detach_DocTransferProductions(DocTransferProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = null;
		}
		
		private void attach_FactMaterialsInProductions(FactMaterialsInProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = this;
		}
		
		private void detach_FactMaterialsInProductions(FactMaterialsInProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = null;
		}
		
		private void attach_FactProductions(FactProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = this;
		}
		
		private void detach_FactProductions(FactProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = null;
		}
		
		private void attach_FactProductionRemains(FactProductionRemain entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = this;
		}
		
		private void detach_FactProductionRemains(FactProductionRemain entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = null;
		}
		
		private void attach_FactMovements(FactMovement entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = this;
		}
		
		private void detach_FactMovements(FactMovement entity)
		{
			this.SendPropertyChanging();
			entity.DimDates = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimGroups")]
	public partial class DimGroups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Code;
		
		private string _Name;
		
		private System.Nullable<long> _ParentGroupID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<DimGoods> _DimGoods;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentGroupIDChanging(System.Nullable<long> value);
    partial void OnParentGroupIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DimGroups()
		{
			this._DimGoods = new EntitySet<DimGoods>(new Action<DimGoods>(this.attach_DimGoods), new Action<DimGoods>(this.detach_DimGoods));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NChar(11)", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentGroupID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> ParentGroupID
		{
			get
			{
				return this._ParentGroupID;
			}
			set
			{
				if ((this._ParentGroupID != value))
				{
					this.OnParentGroupIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGroupID = value;
					this.SendPropertyChanged("ParentGroupID");
					this.OnParentGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGroups_DimGoods", Storage="_DimGoods", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<DimGoods> DimGoods
		{
			get
			{
				return this._DimGoods;
			}
			set
			{
				this._DimGoods.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DimGoods(DimGoods entity)
		{
			this.SendPropertyChanging();
			entity.DimGroups = this;
		}
		
		private void detach_DimGoods(DimGoods entity)
		{
			this.SendPropertyChanging();
			entity.DimGroups = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimWarehouses")]
	public partial class DimWarehouses : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<DimPOSRegisters> _DimPOSRegisters;
		
		private EntitySet<FactPOS> _FactPOS;
		
		private EntitySet<DimGoodAnalyticalKeys> _DimGoodAnalyticalKeys;
		
		private EntitySet<FactRemains> _FactRemains;
		
		private EntitySet<FactConsignmentMoves> _FactConsignmentMoves;
		
		private EntitySet<FactConsignmentRemains> _FactConsignmentRemains;
		
		private EntitySet<FactConsignmentRemains> _FactConsignmentRemains1;
		
		private EntitySet<DocProductionLines> _DocProductionLines;
		
		private EntitySet<FactProductionTree> _FactProductionTree;
		
		private EntitySet<DocProduction> _DocProductions;
		
		private EntitySet<DocSale> _DocSales;
		
		private EntitySet<DocSalesLine> _DocSalesLines;
		
		private EntitySet<DocTransferProduction> _DocTransferProductions;
		
		private EntitySet<FactProduction> _FactProductions;
		
		private EntitySet<FactMovement> _FactMovements;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DimWarehouses()
		{
			this._DimPOSRegisters = new EntitySet<DimPOSRegisters>(new Action<DimPOSRegisters>(this.attach_DimPOSRegisters), new Action<DimPOSRegisters>(this.detach_DimPOSRegisters));
			this._FactPOS = new EntitySet<FactPOS>(new Action<FactPOS>(this.attach_FactPOS), new Action<FactPOS>(this.detach_FactPOS));
			this._DimGoodAnalyticalKeys = new EntitySet<DimGoodAnalyticalKeys>(new Action<DimGoodAnalyticalKeys>(this.attach_DimGoodAnalyticalKeys), new Action<DimGoodAnalyticalKeys>(this.detach_DimGoodAnalyticalKeys));
			this._FactRemains = new EntitySet<FactRemains>(new Action<FactRemains>(this.attach_FactRemains), new Action<FactRemains>(this.detach_FactRemains));
			this._FactConsignmentMoves = new EntitySet<FactConsignmentMoves>(new Action<FactConsignmentMoves>(this.attach_FactConsignmentMoves), new Action<FactConsignmentMoves>(this.detach_FactConsignmentMoves));
			this._FactConsignmentRemains = new EntitySet<FactConsignmentRemains>(new Action<FactConsignmentRemains>(this.attach_FactConsignmentRemains), new Action<FactConsignmentRemains>(this.detach_FactConsignmentRemains));
			this._FactConsignmentRemains1 = new EntitySet<FactConsignmentRemains>(new Action<FactConsignmentRemains>(this.attach_FactConsignmentRemains1), new Action<FactConsignmentRemains>(this.detach_FactConsignmentRemains1));
			this._DocProductionLines = new EntitySet<DocProductionLines>(new Action<DocProductionLines>(this.attach_DocProductionLines), new Action<DocProductionLines>(this.detach_DocProductionLines));
			this._FactProductionTree = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTree), new Action<FactProductionTree>(this.detach_FactProductionTree));
			this._DocProductions = new EntitySet<DocProduction>(new Action<DocProduction>(this.attach_DocProductions), new Action<DocProduction>(this.detach_DocProductions));
			this._DocSales = new EntitySet<DocSale>(new Action<DocSale>(this.attach_DocSales), new Action<DocSale>(this.detach_DocSales));
			this._DocSalesLines = new EntitySet<DocSalesLine>(new Action<DocSalesLine>(this.attach_DocSalesLines), new Action<DocSalesLine>(this.detach_DocSalesLines));
			this._DocTransferProductions = new EntitySet<DocTransferProduction>(new Action<DocTransferProduction>(this.attach_DocTransferProductions), new Action<DocTransferProduction>(this.detach_DocTransferProductions));
			this._FactProductions = new EntitySet<FactProduction>(new Action<FactProduction>(this.attach_FactProductions), new Action<FactProduction>(this.detach_FactProductions));
			this._FactMovements = new EntitySet<FactMovement>(new Action<FactMovement>(this.attach_FactMovements), new Action<FactMovement>(this.detach_FactMovements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_DimPOSRegisters", Storage="_DimPOSRegisters", ThisKey="ID", OtherKey="WarehouseID")]
		public EntitySet<DimPOSRegisters> DimPOSRegisters
		{
			get
			{
				return this._DimPOSRegisters;
			}
			set
			{
				this._DimPOSRegisters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactPOS", Storage="_FactPOS", ThisKey="ID", OtherKey="WarehouseID")]
		public EntitySet<FactPOS> FactPOS
		{
			get
			{
				return this._FactPOS;
			}
			set
			{
				this._FactPOS.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_DimGoodAnalyticalKeys", Storage="_DimGoodAnalyticalKeys", ThisKey="ID", OtherKey="WarehouseID")]
		public EntitySet<DimGoodAnalyticalKeys> DimGoodAnalyticalKeys
		{
			get
			{
				return this._DimGoodAnalyticalKeys;
			}
			set
			{
				this._DimGoodAnalyticalKeys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactRemains", Storage="_FactRemains", ThisKey="ID", OtherKey="WarehouseID")]
		public EntitySet<FactRemains> FactRemains
		{
			get
			{
				return this._FactRemains;
			}
			set
			{
				this._FactRemains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactConsignmentMoves", Storage="_FactConsignmentMoves", ThisKey="ID", OtherKey="WarehouseID")]
		public EntitySet<FactConsignmentMoves> FactConsignmentMoves
		{
			get
			{
				return this._FactConsignmentMoves;
			}
			set
			{
				this._FactConsignmentMoves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactConsignmentRemains", Storage="_FactConsignmentRemains", ThisKey="ID", OtherKey="FromWarehouseID")]
		public EntitySet<FactConsignmentRemains> FactConsignmentRemains
		{
			get
			{
				return this._FactConsignmentRemains;
			}
			set
			{
				this._FactConsignmentRemains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactConsignmentRemains1", Storage="_FactConsignmentRemains1", ThisKey="ID", OtherKey="ToWarehouseID")]
		public EntitySet<FactConsignmentRemains> FactConsignmentRemains1
		{
			get
			{
				return this._FactConsignmentRemains1;
			}
			set
			{
				this._FactConsignmentRemains1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_DocProductionLines", Storage="_DocProductionLines", ThisKey="ID", OtherKey="WarehouseID")]
		public EntitySet<DocProductionLines> DocProductionLines
		{
			get
			{
				return this._DocProductionLines;
			}
			set
			{
				this._DocProductionLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactProductionTree", Storage="_FactProductionTree", ThisKey="ID", OtherKey="WarehouseID")]
		public EntitySet<FactProductionTree> FactProductionTree
		{
			get
			{
				return this._FactProductionTree;
			}
			set
			{
				this._FactProductionTree.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_DocProduction", Storage="_DocProductions", ThisKey="ID", OtherKey="WarehouseID")]
		public EntitySet<DocProduction> DocProductions
		{
			get
			{
				return this._DocProductions;
			}
			set
			{
				this._DocProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_DocSale", Storage="_DocSales", ThisKey="ID", OtherKey="WarehouseID")]
		public EntitySet<DocSale> DocSales
		{
			get
			{
				return this._DocSales;
			}
			set
			{
				this._DocSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_DocSalesLine", Storage="_DocSalesLines", ThisKey="ID", OtherKey="WarehouseID")]
		public EntitySet<DocSalesLine> DocSalesLines
		{
			get
			{
				return this._DocSalesLines;
			}
			set
			{
				this._DocSalesLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_DocTransferProduction", Storage="_DocTransferProductions", ThisKey="ID", OtherKey="WarehouseID")]
		public EntitySet<DocTransferProduction> DocTransferProductions
		{
			get
			{
				return this._DocTransferProductions;
			}
			set
			{
				this._DocTransferProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactProduction", Storage="_FactProductions", ThisKey="ID", OtherKey="ToWarehouseID")]
		public EntitySet<FactProduction> FactProductions
		{
			get
			{
				return this._FactProductions;
			}
			set
			{
				this._FactProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactMovement", Storage="_FactMovements", ThisKey="ID", OtherKey="WarehouseID")]
		public EntitySet<FactMovement> FactMovements
		{
			get
			{
				return this._FactMovements;
			}
			set
			{
				this._FactMovements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DimPOSRegisters(DimPOSRegisters entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = this;
		}
		
		private void detach_DimPOSRegisters(DimPOSRegisters entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = null;
		}
		
		private void attach_FactPOS(FactPOS entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = this;
		}
		
		private void detach_FactPOS(FactPOS entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = null;
		}
		
		private void attach_DimGoodAnalyticalKeys(DimGoodAnalyticalKeys entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = this;
		}
		
		private void detach_DimGoodAnalyticalKeys(DimGoodAnalyticalKeys entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = null;
		}
		
		private void attach_FactRemains(FactRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = this;
		}
		
		private void detach_FactRemains(FactRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = null;
		}
		
		private void attach_FactConsignmentMoves(FactConsignmentMoves entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = this;
		}
		
		private void detach_FactConsignmentMoves(FactConsignmentMoves entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = null;
		}
		
		private void attach_FactConsignmentRemains(FactConsignmentRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = this;
		}
		
		private void detach_FactConsignmentRemains(FactConsignmentRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = null;
		}
		
		private void attach_FactConsignmentRemains1(FactConsignmentRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses1 = this;
		}
		
		private void detach_FactConsignmentRemains1(FactConsignmentRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses1 = null;
		}
		
		private void attach_DocProductionLines(DocProductionLines entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = this;
		}
		
		private void detach_DocProductionLines(DocProductionLines entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = null;
		}
		
		private void attach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = this;
		}
		
		private void detach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = null;
		}
		
		private void attach_DocProductions(DocProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = this;
		}
		
		private void detach_DocProductions(DocProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = null;
		}
		
		private void attach_DocSales(DocSale entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = this;
		}
		
		private void detach_DocSales(DocSale entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = null;
		}
		
		private void attach_DocSalesLines(DocSalesLine entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = this;
		}
		
		private void detach_DocSalesLines(DocSalesLine entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = null;
		}
		
		private void attach_DocTransferProductions(DocTransferProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = this;
		}
		
		private void detach_DocTransferProductions(DocTransferProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = null;
		}
		
		private void attach_FactProductions(FactProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = this;
		}
		
		private void detach_FactProductions(FactProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = null;
		}
		
		private void attach_FactMovements(FactMovement entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = this;
		}
		
		private void detach_FactMovements(FactMovement entity)
		{
			this.SendPropertyChanging();
			entity.DimWarehouses = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimMovementTypes")]
	public partial class DimMovementTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TypeName;
		
		private System.Nullable<bool> _Active;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public DimMovementTypes()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(50)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimGoods")]
	public partial class DimGoods : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Code;
		
		private string _Artikul;
		
		private string _Name;
		
		private System.Nullable<decimal> _WeightGramm1Pcs;
		
		private System.Nullable<decimal> _WeightGrammNominal;
		
		private System.Nullable<decimal> _WeightGrammDeviation;
		
		private string _BaseUnit;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Nullable<long> _GroupID;
		
		private System.Nullable<long> _GoodTypeID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<FactPrices> _FactPrices;
		
		private EntitySet<FactPricesHistory> _FactPricesHistory;
		
		private EntitySet<DimGoodAnalyticalKeys> _DimGoodAnalyticalKeys;
		
		private EntitySet<FactPOSLines> _FactPOSLines;
		
		private EntitySet<FactRemains> _FactRemains;
		
		private EntitySet<FactConsignmentMoves> _FactConsignmentMoves;
		
		private EntitySet<FactConsignmentRemains> _FactConsignmentRemains;
		
		private EntitySet<DocProductionCosts> _DocProductionCosts;
		
		private EntitySet<DocProductionCostIn> _DocProductionCostIn;
		
		private EntitySet<DocProductionCostOut> _DocProductionCostOut;
		
		private EntitySet<DocProductionCostMaterials> _DocProductionCostMaterials;
		
		private EntitySet<DocProductionLines> _DocProductionLines;
		
		private EntitySet<FactProductionTree> _FactProductionTree;
		
		private EntitySet<FactProductionTree> _FactProductionTree1;
		
		private EntitySet<FactProductionTree> _FactProductionTree2;
		
		private EntitySet<DocSalesLine> _DocSalesLines;
		
		private EntitySet<DocTransferProductionLine> _DocTransferProductionLines;
		
		private EntitySet<FactMaterialsInProduction> _FactMaterialsInProductions;
		
		private EntitySet<FactProduction> _FactProductions;
		
		private EntitySet<FactProductionRemain> _FactProductionRemains;
		
		private EntitySet<FactMovement> _FactMovements;
		
		private EntityRef<DimGroups> _DimGroups;
		
		private EntityRef<DimGoodTypes> _DimGoodTypes;
		
		private EntityRef<DimUnits> _DimUnits;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnArtikulChanging(string value);
    partial void OnArtikulChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnWeightGramm1PcsChanging(System.Nullable<decimal> value);
    partial void OnWeightGramm1PcsChanged();
    partial void OnWeightGrammNominalChanging(System.Nullable<decimal> value);
    partial void OnWeightGrammNominalChanged();
    partial void OnWeightGrammDeviationChanging(System.Nullable<decimal> value);
    partial void OnWeightGrammDeviationChanged();
    partial void OnBaseUnitChanging(string value);
    partial void OnBaseUnitChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnGroupIDChanging(System.Nullable<long> value);
    partial void OnGroupIDChanged();
    partial void OnGoodTypeIDChanging(System.Nullable<long> value);
    partial void OnGoodTypeIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DimGoods()
		{
			this._FactPrices = new EntitySet<FactPrices>(new Action<FactPrices>(this.attach_FactPrices), new Action<FactPrices>(this.detach_FactPrices));
			this._FactPricesHistory = new EntitySet<FactPricesHistory>(new Action<FactPricesHistory>(this.attach_FactPricesHistory), new Action<FactPricesHistory>(this.detach_FactPricesHistory));
			this._DimGoodAnalyticalKeys = new EntitySet<DimGoodAnalyticalKeys>(new Action<DimGoodAnalyticalKeys>(this.attach_DimGoodAnalyticalKeys), new Action<DimGoodAnalyticalKeys>(this.detach_DimGoodAnalyticalKeys));
			this._FactPOSLines = new EntitySet<FactPOSLines>(new Action<FactPOSLines>(this.attach_FactPOSLines), new Action<FactPOSLines>(this.detach_FactPOSLines));
			this._FactRemains = new EntitySet<FactRemains>(new Action<FactRemains>(this.attach_FactRemains), new Action<FactRemains>(this.detach_FactRemains));
			this._FactConsignmentMoves = new EntitySet<FactConsignmentMoves>(new Action<FactConsignmentMoves>(this.attach_FactConsignmentMoves), new Action<FactConsignmentMoves>(this.detach_FactConsignmentMoves));
			this._FactConsignmentRemains = new EntitySet<FactConsignmentRemains>(new Action<FactConsignmentRemains>(this.attach_FactConsignmentRemains), new Action<FactConsignmentRemains>(this.detach_FactConsignmentRemains));
			this._DocProductionCosts = new EntitySet<DocProductionCosts>(new Action<DocProductionCosts>(this.attach_DocProductionCosts), new Action<DocProductionCosts>(this.detach_DocProductionCosts));
			this._DocProductionCostIn = new EntitySet<DocProductionCostIn>(new Action<DocProductionCostIn>(this.attach_DocProductionCostIn), new Action<DocProductionCostIn>(this.detach_DocProductionCostIn));
			this._DocProductionCostOut = new EntitySet<DocProductionCostOut>(new Action<DocProductionCostOut>(this.attach_DocProductionCostOut), new Action<DocProductionCostOut>(this.detach_DocProductionCostOut));
			this._DocProductionCostMaterials = new EntitySet<DocProductionCostMaterials>(new Action<DocProductionCostMaterials>(this.attach_DocProductionCostMaterials), new Action<DocProductionCostMaterials>(this.detach_DocProductionCostMaterials));
			this._DocProductionLines = new EntitySet<DocProductionLines>(new Action<DocProductionLines>(this.attach_DocProductionLines), new Action<DocProductionLines>(this.detach_DocProductionLines));
			this._FactProductionTree = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTree), new Action<FactProductionTree>(this.detach_FactProductionTree));
			this._FactProductionTree1 = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTree1), new Action<FactProductionTree>(this.detach_FactProductionTree1));
			this._FactProductionTree2 = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTree2), new Action<FactProductionTree>(this.detach_FactProductionTree2));
			this._DocSalesLines = new EntitySet<DocSalesLine>(new Action<DocSalesLine>(this.attach_DocSalesLines), new Action<DocSalesLine>(this.detach_DocSalesLines));
			this._DocTransferProductionLines = new EntitySet<DocTransferProductionLine>(new Action<DocTransferProductionLine>(this.attach_DocTransferProductionLines), new Action<DocTransferProductionLine>(this.detach_DocTransferProductionLines));
			this._FactMaterialsInProductions = new EntitySet<FactMaterialsInProduction>(new Action<FactMaterialsInProduction>(this.attach_FactMaterialsInProductions), new Action<FactMaterialsInProduction>(this.detach_FactMaterialsInProductions));
			this._FactProductions = new EntitySet<FactProduction>(new Action<FactProduction>(this.attach_FactProductions), new Action<FactProduction>(this.detach_FactProductions));
			this._FactProductionRemains = new EntitySet<FactProductionRemain>(new Action<FactProductionRemain>(this.attach_FactProductionRemains), new Action<FactProductionRemain>(this.detach_FactProductionRemains));
			this._FactMovements = new EntitySet<FactMovement>(new Action<FactMovement>(this.attach_FactMovements), new Action<FactMovement>(this.detach_FactMovements));
			this._DimGroups = default(EntityRef<DimGroups>);
			this._DimGoodTypes = default(EntityRef<DimGoodTypes>);
			this._DimUnits = default(EntityRef<DimUnits>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NChar(11)", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artikul", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Artikul
		{
			get
			{
				return this._Artikul;
			}
			set
			{
				if ((this._Artikul != value))
				{
					this.OnArtikulChanging(value);
					this.SendPropertyChanging();
					this._Artikul = value;
					this.SendPropertyChanged("Artikul");
					this.OnArtikulChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeightGramm1Pcs", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> WeightGramm1Pcs
		{
			get
			{
				return this._WeightGramm1Pcs;
			}
			set
			{
				if ((this._WeightGramm1Pcs != value))
				{
					this.OnWeightGramm1PcsChanging(value);
					this.SendPropertyChanging();
					this._WeightGramm1Pcs = value;
					this.SendPropertyChanged("WeightGramm1Pcs");
					this.OnWeightGramm1PcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeightGrammNominal", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> WeightGrammNominal
		{
			get
			{
				return this._WeightGrammNominal;
			}
			set
			{
				if ((this._WeightGrammNominal != value))
				{
					this.OnWeightGrammNominalChanging(value);
					this.SendPropertyChanging();
					this._WeightGrammNominal = value;
					this.SendPropertyChanged("WeightGrammNominal");
					this.OnWeightGrammNominalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeightGrammDeviation", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> WeightGrammDeviation
		{
			get
			{
				return this._WeightGrammDeviation;
			}
			set
			{
				if ((this._WeightGrammDeviation != value))
				{
					this.OnWeightGrammDeviationChanging(value);
					this.SendPropertyChanging();
					this._WeightGrammDeviation = value;
					this.SendPropertyChanged("WeightGrammDeviation");
					this.OnWeightGrammDeviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnit", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string BaseUnit
		{
			get
			{
				return this._BaseUnit;
			}
			set
			{
				if ((this._BaseUnit != value))
				{
					this.OnBaseUnitChanging(value);
					this.SendPropertyChanging();
					this._BaseUnit = value;
					this.SendPropertyChanged("BaseUnit");
					this.OnBaseUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._DimGroups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodTypeID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodTypeID
		{
			get
			{
				return this._GoodTypeID;
			}
			set
			{
				if ((this._GoodTypeID != value))
				{
					if (this._DimGoodTypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodTypeIDChanging(value);
					this.SendPropertyChanging();
					this._GoodTypeID = value;
					this.SendPropertyChanged("GoodTypeID");
					this.OnGoodTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactPrices", Storage="_FactPrices", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<FactPrices> FactPrices
		{
			get
			{
				return this._FactPrices;
			}
			set
			{
				this._FactPrices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactPricesHistory", Storage="_FactPricesHistory", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<FactPricesHistory> FactPricesHistory
		{
			get
			{
				return this._FactPricesHistory;
			}
			set
			{
				this._FactPricesHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DimGoodAnalyticalKeys", Storage="_DimGoodAnalyticalKeys", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<DimGoodAnalyticalKeys> DimGoodAnalyticalKeys
		{
			get
			{
				return this._DimGoodAnalyticalKeys;
			}
			set
			{
				this._DimGoodAnalyticalKeys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactPOSLines", Storage="_FactPOSLines", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<FactPOSLines> FactPOSLines
		{
			get
			{
				return this._FactPOSLines;
			}
			set
			{
				this._FactPOSLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactRemains", Storage="_FactRemains", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<FactRemains> FactRemains
		{
			get
			{
				return this._FactRemains;
			}
			set
			{
				this._FactRemains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactConsignmentMoves", Storage="_FactConsignmentMoves", ThisKey="ID", OtherKey="RawGoodID")]
		public EntitySet<FactConsignmentMoves> FactConsignmentMoves
		{
			get
			{
				return this._FactConsignmentMoves;
			}
			set
			{
				this._FactConsignmentMoves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactConsignmentRemains", Storage="_FactConsignmentRemains", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<FactConsignmentRemains> FactConsignmentRemains
		{
			get
			{
				return this._FactConsignmentRemains;
			}
			set
			{
				this._FactConsignmentRemains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DocProductionCosts", Storage="_DocProductionCosts", ThisKey="ID", OtherKey="MasterGoodID")]
		public EntitySet<DocProductionCosts> DocProductionCosts
		{
			get
			{
				return this._DocProductionCosts;
			}
			set
			{
				this._DocProductionCosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DocProductionCostIn", Storage="_DocProductionCostIn", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<DocProductionCostIn> DocProductionCostIn
		{
			get
			{
				return this._DocProductionCostIn;
			}
			set
			{
				this._DocProductionCostIn.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DocProductionCostOut", Storage="_DocProductionCostOut", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<DocProductionCostOut> DocProductionCostOut
		{
			get
			{
				return this._DocProductionCostOut;
			}
			set
			{
				this._DocProductionCostOut.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DocProductionCostMaterials", Storage="_DocProductionCostMaterials", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<DocProductionCostMaterials> DocProductionCostMaterials
		{
			get
			{
				return this._DocProductionCostMaterials;
			}
			set
			{
				this._DocProductionCostMaterials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DocProductionLines", Storage="_DocProductionLines", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<DocProductionLines> DocProductionLines
		{
			get
			{
				return this._DocProductionLines;
			}
			set
			{
				this._DocProductionLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactProductionTree", Storage="_FactProductionTree", ThisKey="ID", OtherKey="FirstRawMaterialGoodID")]
		public EntitySet<FactProductionTree> FactProductionTree
		{
			get
			{
				return this._FactProductionTree;
			}
			set
			{
				this._FactProductionTree.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactProductionTree1", Storage="_FactProductionTree1", ThisKey="ID", OtherKey="PrepackGoodID")]
		public EntitySet<FactProductionTree> FactProductionTree1
		{
			get
			{
				return this._FactProductionTree1;
			}
			set
			{
				this._FactProductionTree1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactProductionTree2", Storage="_FactProductionTree2", ThisKey="ID", OtherKey="RawGoodID")]
		public EntitySet<FactProductionTree> FactProductionTree2
		{
			get
			{
				return this._FactProductionTree2;
			}
			set
			{
				this._FactProductionTree2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DocSalesLine", Storage="_DocSalesLines", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<DocSalesLine> DocSalesLines
		{
			get
			{
				return this._DocSalesLines;
			}
			set
			{
				this._DocSalesLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DocTransferProductionLine", Storage="_DocTransferProductionLines", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<DocTransferProductionLine> DocTransferProductionLines
		{
			get
			{
				return this._DocTransferProductionLines;
			}
			set
			{
				this._DocTransferProductionLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactMaterialsInProduction", Storage="_FactMaterialsInProductions", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<FactMaterialsInProduction> FactMaterialsInProductions
		{
			get
			{
				return this._FactMaterialsInProductions;
			}
			set
			{
				this._FactMaterialsInProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactProduction", Storage="_FactProductions", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<FactProduction> FactProductions
		{
			get
			{
				return this._FactProductions;
			}
			set
			{
				this._FactProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactProductionRemain", Storage="_FactProductionRemains", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<FactProductionRemain> FactProductionRemains
		{
			get
			{
				return this._FactProductionRemains;
			}
			set
			{
				this._FactProductionRemains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactMovement", Storage="_FactMovements", ThisKey="ID", OtherKey="GoodID")]
		public EntitySet<FactMovement> FactMovements
		{
			get
			{
				return this._FactMovements;
			}
			set
			{
				this._FactMovements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGroups_DimGoods", Storage="_DimGroups", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true)]
		public DimGroups DimGroups
		{
			get
			{
				return this._DimGroups.Entity;
			}
			set
			{
				DimGroups previousValue = this._DimGroups.Entity;
				if (((previousValue != value) 
							|| (this._DimGroups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGroups.Entity = null;
						previousValue.DimGoods.Remove(this);
					}
					this._DimGroups.Entity = value;
					if ((value != null))
					{
						value.DimGoods.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGroups");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoodTypes_DimGoods", Storage="_DimGoodTypes", ThisKey="GoodTypeID", OtherKey="ID", IsForeignKey=true)]
		public DimGoodTypes DimGoodTypes
		{
			get
			{
				return this._DimGoodTypes.Entity;
			}
			set
			{
				DimGoodTypes previousValue = this._DimGoodTypes.Entity;
				if (((previousValue != value) 
							|| (this._DimGoodTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoodTypes.Entity = null;
						previousValue.DimGoods.Remove(this);
					}
					this._DimGoodTypes.Entity = value;
					if ((value != null))
					{
						value.DimGoods.Add(this);
						this._GoodTypeID = value.ID;
					}
					else
					{
						this._GoodTypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoodTypes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DimGoods", Storage="_DimUnits", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.DimGoods.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.DimGoods.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactPrices(FactPrices entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_FactPrices(FactPrices entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_FactPricesHistory(FactPricesHistory entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_FactPricesHistory(FactPricesHistory entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_DimGoodAnalyticalKeys(DimGoodAnalyticalKeys entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_DimGoodAnalyticalKeys(DimGoodAnalyticalKeys entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_FactPOSLines(FactPOSLines entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_FactPOSLines(FactPOSLines entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_FactRemains(FactRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_FactRemains(FactRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_FactConsignmentMoves(FactConsignmentMoves entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_FactConsignmentMoves(FactConsignmentMoves entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_FactConsignmentRemains(FactConsignmentRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_FactConsignmentRemains(FactConsignmentRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_DocProductionCosts(DocProductionCosts entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_DocProductionCosts(DocProductionCosts entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_DocProductionCostIn(DocProductionCostIn entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_DocProductionCostIn(DocProductionCostIn entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_DocProductionCostOut(DocProductionCostOut entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_DocProductionCostOut(DocProductionCostOut entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_DocProductionCostMaterials(DocProductionCostMaterials entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_DocProductionCostMaterials(DocProductionCostMaterials entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_DocProductionLines(DocProductionLines entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_DocProductionLines(DocProductionLines entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_FactProductionTree1(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods1 = this;
		}
		
		private void detach_FactProductionTree1(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods1 = null;
		}
		
		private void attach_FactProductionTree2(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods2 = this;
		}
		
		private void detach_FactProductionTree2(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods2 = null;
		}
		
		private void attach_DocSalesLines(DocSalesLine entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_DocSalesLines(DocSalesLine entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_DocTransferProductionLines(DocTransferProductionLine entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_DocTransferProductionLines(DocTransferProductionLine entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_FactMaterialsInProductions(FactMaterialsInProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_FactMaterialsInProductions(FactMaterialsInProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_FactProductions(FactProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_FactProductions(FactProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_FactProductionRemains(FactProductionRemain entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_FactProductionRemains(FactProductionRemain entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
		
		private void attach_FactMovements(FactMovement entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = this;
		}
		
		private void detach_FactMovements(FactMovement entity)
		{
			this.SendPropertyChanging();
			entity.DimGoods = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimGoodTypes")]
	public partial class DimGoodTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _TypeName;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<DimGoods> _DimGoods;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public DimGoodTypes()
		{
			this._DimGoods = new EntitySet<DimGoods>(new Action<DimGoods>(this.attach_DimGoods), new Action<DimGoods>(this.detach_DimGoods));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(50)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoodTypes_DimGoods", Storage="_DimGoods", ThisKey="ID", OtherKey="GoodTypeID")]
		public EntitySet<DimGoods> DimGoods
		{
			get
			{
				return this._DimGoods;
			}
			set
			{
				this._DimGoods.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DimGoods(DimGoods entity)
		{
			this.SendPropertyChanging();
			entity.DimGoodTypes = this;
		}
		
		private void detach_DimGoods(DimGoods entity)
		{
			this.SendPropertyChanging();
			entity.DimGoodTypes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimUnits")]
	public partial class DimUnits : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Code;
		
		private string _TypeName;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<DimGoods> _DimGoods;
		
		private EntitySet<FactPrices> _FactPrices;
		
		private EntitySet<FactPrices> _FactPrices1;
		
		private EntitySet<FactPricesHistory> _FactPricesHistory;
		
		private EntitySet<FactPOSLines> _FactPOSLines;
		
		private EntitySet<DimUnitConversion> _DimUnitConversion;
		
		private EntitySet<DimUnitConversion> _DimUnitConversion1;
		
		private EntitySet<FactRemains> _FactRemains;
		
		private EntitySet<FactConsignmentMoves> _FactConsignmentMoves;
		
		private EntitySet<FactConsignmentMoves> _FactConsignmentMoves1;
		
		private EntitySet<FactConsignmentRemains> _FactConsignmentRemains;
		
		private EntitySet<DocProductionCosts> _DocProductionCosts;
		
		private EntitySet<DocProductionCosts> _DocProductionCosts1;
		
		private EntitySet<DocProductionCostIn> _DocProductionCostIn;
		
		private EntitySet<DocProductionCostIn> _DocProductionCostIn1;
		
		private EntitySet<DocProductionCostOut> _DocProductionCostOut;
		
		private EntitySet<DocProductionCostOut> _DocProductionCostOut1;
		
		private EntitySet<DocProductionCostMaterials> _DocProductionCostMaterials;
		
		private EntitySet<DocProductionCostMaterials> _DocProductionCostMaterials1;
		
		private EntitySet<DocProductionLines> _DocProductionLines;
		
		private EntitySet<DocProductionLines> _DocProductionLines1;
		
		private EntitySet<FactProductionTree> _FactProductionTree;
		
		private EntitySet<FactProductionTree> _FactProductionTree1;
		
		private EntitySet<FactProductionTree> _FactProductionTree2;
		
		private EntitySet<FactProductionTree> _FactProductionTree3;
		
		private EntitySet<DocSalesLine> _DocSalesLines;
		
		private EntitySet<DocSalesLine> _DocSalesLines1;
		
		private EntitySet<DocTransferProductionLine> _DocTransferProductionLines;
		
		private EntitySet<DocTransferProductionLine> _DocTransferProductionLines1;
		
		private EntitySet<FactMaterialsInProduction> _FactMaterialsInProductions;
		
		private EntitySet<FactMaterialsInProduction> _FactMaterialsInProductions1;
		
		private EntitySet<FactProduction> _FactProductions;
		
		private EntitySet<FactProduction> _FactProductions1;
		
		private EntitySet<FactProductionRemain> _FactProductionRemains;
		
		private EntitySet<FactMovement> _FactMovements;
		
		private EntitySet<FactMovement> _FactMovements1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DimUnits()
		{
			this._DimGoods = new EntitySet<DimGoods>(new Action<DimGoods>(this.attach_DimGoods), new Action<DimGoods>(this.detach_DimGoods));
			this._FactPrices = new EntitySet<FactPrices>(new Action<FactPrices>(this.attach_FactPrices), new Action<FactPrices>(this.detach_FactPrices));
			this._FactPrices1 = new EntitySet<FactPrices>(new Action<FactPrices>(this.attach_FactPrices1), new Action<FactPrices>(this.detach_FactPrices1));
			this._FactPricesHistory = new EntitySet<FactPricesHistory>(new Action<FactPricesHistory>(this.attach_FactPricesHistory), new Action<FactPricesHistory>(this.detach_FactPricesHistory));
			this._FactPOSLines = new EntitySet<FactPOSLines>(new Action<FactPOSLines>(this.attach_FactPOSLines), new Action<FactPOSLines>(this.detach_FactPOSLines));
			this._DimUnitConversion = new EntitySet<DimUnitConversion>(new Action<DimUnitConversion>(this.attach_DimUnitConversion), new Action<DimUnitConversion>(this.detach_DimUnitConversion));
			this._DimUnitConversion1 = new EntitySet<DimUnitConversion>(new Action<DimUnitConversion>(this.attach_DimUnitConversion1), new Action<DimUnitConversion>(this.detach_DimUnitConversion1));
			this._FactRemains = new EntitySet<FactRemains>(new Action<FactRemains>(this.attach_FactRemains), new Action<FactRemains>(this.detach_FactRemains));
			this._FactConsignmentMoves = new EntitySet<FactConsignmentMoves>(new Action<FactConsignmentMoves>(this.attach_FactConsignmentMoves), new Action<FactConsignmentMoves>(this.detach_FactConsignmentMoves));
			this._FactConsignmentMoves1 = new EntitySet<FactConsignmentMoves>(new Action<FactConsignmentMoves>(this.attach_FactConsignmentMoves1), new Action<FactConsignmentMoves>(this.detach_FactConsignmentMoves1));
			this._FactConsignmentRemains = new EntitySet<FactConsignmentRemains>(new Action<FactConsignmentRemains>(this.attach_FactConsignmentRemains), new Action<FactConsignmentRemains>(this.detach_FactConsignmentRemains));
			this._DocProductionCosts = new EntitySet<DocProductionCosts>(new Action<DocProductionCosts>(this.attach_DocProductionCosts), new Action<DocProductionCosts>(this.detach_DocProductionCosts));
			this._DocProductionCosts1 = new EntitySet<DocProductionCosts>(new Action<DocProductionCosts>(this.attach_DocProductionCosts1), new Action<DocProductionCosts>(this.detach_DocProductionCosts1));
			this._DocProductionCostIn = new EntitySet<DocProductionCostIn>(new Action<DocProductionCostIn>(this.attach_DocProductionCostIn), new Action<DocProductionCostIn>(this.detach_DocProductionCostIn));
			this._DocProductionCostIn1 = new EntitySet<DocProductionCostIn>(new Action<DocProductionCostIn>(this.attach_DocProductionCostIn1), new Action<DocProductionCostIn>(this.detach_DocProductionCostIn1));
			this._DocProductionCostOut = new EntitySet<DocProductionCostOut>(new Action<DocProductionCostOut>(this.attach_DocProductionCostOut), new Action<DocProductionCostOut>(this.detach_DocProductionCostOut));
			this._DocProductionCostOut1 = new EntitySet<DocProductionCostOut>(new Action<DocProductionCostOut>(this.attach_DocProductionCostOut1), new Action<DocProductionCostOut>(this.detach_DocProductionCostOut1));
			this._DocProductionCostMaterials = new EntitySet<DocProductionCostMaterials>(new Action<DocProductionCostMaterials>(this.attach_DocProductionCostMaterials), new Action<DocProductionCostMaterials>(this.detach_DocProductionCostMaterials));
			this._DocProductionCostMaterials1 = new EntitySet<DocProductionCostMaterials>(new Action<DocProductionCostMaterials>(this.attach_DocProductionCostMaterials1), new Action<DocProductionCostMaterials>(this.detach_DocProductionCostMaterials1));
			this._DocProductionLines = new EntitySet<DocProductionLines>(new Action<DocProductionLines>(this.attach_DocProductionLines), new Action<DocProductionLines>(this.detach_DocProductionLines));
			this._DocProductionLines1 = new EntitySet<DocProductionLines>(new Action<DocProductionLines>(this.attach_DocProductionLines1), new Action<DocProductionLines>(this.detach_DocProductionLines1));
			this._FactProductionTree = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTree), new Action<FactProductionTree>(this.detach_FactProductionTree));
			this._FactProductionTree1 = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTree1), new Action<FactProductionTree>(this.detach_FactProductionTree1));
			this._FactProductionTree2 = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTree2), new Action<FactProductionTree>(this.detach_FactProductionTree2));
			this._FactProductionTree3 = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTree3), new Action<FactProductionTree>(this.detach_FactProductionTree3));
			this._DocSalesLines = new EntitySet<DocSalesLine>(new Action<DocSalesLine>(this.attach_DocSalesLines), new Action<DocSalesLine>(this.detach_DocSalesLines));
			this._DocSalesLines1 = new EntitySet<DocSalesLine>(new Action<DocSalesLine>(this.attach_DocSalesLines1), new Action<DocSalesLine>(this.detach_DocSalesLines1));
			this._DocTransferProductionLines = new EntitySet<DocTransferProductionLine>(new Action<DocTransferProductionLine>(this.attach_DocTransferProductionLines), new Action<DocTransferProductionLine>(this.detach_DocTransferProductionLines));
			this._DocTransferProductionLines1 = new EntitySet<DocTransferProductionLine>(new Action<DocTransferProductionLine>(this.attach_DocTransferProductionLines1), new Action<DocTransferProductionLine>(this.detach_DocTransferProductionLines1));
			this._FactMaterialsInProductions = new EntitySet<FactMaterialsInProduction>(new Action<FactMaterialsInProduction>(this.attach_FactMaterialsInProductions), new Action<FactMaterialsInProduction>(this.detach_FactMaterialsInProductions));
			this._FactMaterialsInProductions1 = new EntitySet<FactMaterialsInProduction>(new Action<FactMaterialsInProduction>(this.attach_FactMaterialsInProductions1), new Action<FactMaterialsInProduction>(this.detach_FactMaterialsInProductions1));
			this._FactProductions = new EntitySet<FactProduction>(new Action<FactProduction>(this.attach_FactProductions), new Action<FactProduction>(this.detach_FactProductions));
			this._FactProductions1 = new EntitySet<FactProduction>(new Action<FactProduction>(this.attach_FactProductions1), new Action<FactProduction>(this.detach_FactProductions1));
			this._FactProductionRemains = new EntitySet<FactProductionRemain>(new Action<FactProductionRemain>(this.attach_FactProductionRemains), new Action<FactProductionRemain>(this.detach_FactProductionRemains));
			this._FactMovements = new EntitySet<FactMovement>(new Action<FactMovement>(this.attach_FactMovements), new Action<FactMovement>(this.detach_FactMovements));
			this._FactMovements1 = new EntitySet<FactMovement>(new Action<FactMovement>(this.attach_FactMovements1), new Action<FactMovement>(this.detach_FactMovements1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NChar(11)", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DimGoods", Storage="_DimGoods", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<DimGoods> DimGoods
		{
			get
			{
				return this._DimGoods;
			}
			set
			{
				this._DimGoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactPrices", Storage="_FactPrices", ThisKey="ID", OtherKey="UnitID")]
		public EntitySet<FactPrices> FactPrices
		{
			get
			{
				return this._FactPrices;
			}
			set
			{
				this._FactPrices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactPrices1", Storage="_FactPrices1", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<FactPrices> FactPrices1
		{
			get
			{
				return this._FactPrices1;
			}
			set
			{
				this._FactPrices1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactPricesHistory", Storage="_FactPricesHistory", ThisKey="ID", OtherKey="UnitID")]
		public EntitySet<FactPricesHistory> FactPricesHistory
		{
			get
			{
				return this._FactPricesHistory;
			}
			set
			{
				this._FactPricesHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactPOSLines", Storage="_FactPOSLines", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<FactPOSLines> FactPOSLines
		{
			get
			{
				return this._FactPOSLines;
			}
			set
			{
				this._FactPOSLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DimUnitConversion", Storage="_DimUnitConversion", ThisKey="ID", OtherKey="FromUnitID")]
		public EntitySet<DimUnitConversion> DimUnitConversion
		{
			get
			{
				return this._DimUnitConversion;
			}
			set
			{
				this._DimUnitConversion.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DimUnitConversion1", Storage="_DimUnitConversion1", ThisKey="ID", OtherKey="ToUnitID")]
		public EntitySet<DimUnitConversion> DimUnitConversion1
		{
			get
			{
				return this._DimUnitConversion1;
			}
			set
			{
				this._DimUnitConversion1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactRemains", Storage="_FactRemains", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<FactRemains> FactRemains
		{
			get
			{
				return this._FactRemains;
			}
			set
			{
				this._FactRemains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactConsignmentMoves", Storage="_FactConsignmentMoves", ThisKey="ID", OtherKey="RawUnitID")]
		public EntitySet<FactConsignmentMoves> FactConsignmentMoves
		{
			get
			{
				return this._FactConsignmentMoves;
			}
			set
			{
				this._FactConsignmentMoves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactConsignmentMoves1", Storage="_FactConsignmentMoves1", ThisKey="ID", OtherKey="RawBaseUnitID")]
		public EntitySet<FactConsignmentMoves> FactConsignmentMoves1
		{
			get
			{
				return this._FactConsignmentMoves1;
			}
			set
			{
				this._FactConsignmentMoves1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactConsignmentRemains", Storage="_FactConsignmentRemains", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<FactConsignmentRemains> FactConsignmentRemains
		{
			get
			{
				return this._FactConsignmentRemains;
			}
			set
			{
				this._FactConsignmentRemains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCosts", Storage="_DocProductionCosts", ThisKey="ID", OtherKey="UnitID")]
		public EntitySet<DocProductionCosts> DocProductionCosts
		{
			get
			{
				return this._DocProductionCosts;
			}
			set
			{
				this._DocProductionCosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCosts1", Storage="_DocProductionCosts1", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<DocProductionCosts> DocProductionCosts1
		{
			get
			{
				return this._DocProductionCosts1;
			}
			set
			{
				this._DocProductionCosts1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCostIn", Storage="_DocProductionCostIn", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<DocProductionCostIn> DocProductionCostIn
		{
			get
			{
				return this._DocProductionCostIn;
			}
			set
			{
				this._DocProductionCostIn.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCostIn1", Storage="_DocProductionCostIn1", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<DocProductionCostIn> DocProductionCostIn1
		{
			get
			{
				return this._DocProductionCostIn1;
			}
			set
			{
				this._DocProductionCostIn1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCostOut", Storage="_DocProductionCostOut", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<DocProductionCostOut> DocProductionCostOut
		{
			get
			{
				return this._DocProductionCostOut;
			}
			set
			{
				this._DocProductionCostOut.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCostOut1", Storage="_DocProductionCostOut1", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<DocProductionCostOut> DocProductionCostOut1
		{
			get
			{
				return this._DocProductionCostOut1;
			}
			set
			{
				this._DocProductionCostOut1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCostMaterials", Storage="_DocProductionCostMaterials", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<DocProductionCostMaterials> DocProductionCostMaterials
		{
			get
			{
				return this._DocProductionCostMaterials;
			}
			set
			{
				this._DocProductionCostMaterials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCostMaterials1", Storage="_DocProductionCostMaterials1", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<DocProductionCostMaterials> DocProductionCostMaterials1
		{
			get
			{
				return this._DocProductionCostMaterials1;
			}
			set
			{
				this._DocProductionCostMaterials1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionLines", Storage="_DocProductionLines", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<DocProductionLines> DocProductionLines
		{
			get
			{
				return this._DocProductionLines;
			}
			set
			{
				this._DocProductionLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionLines1", Storage="_DocProductionLines1", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<DocProductionLines> DocProductionLines1
		{
			get
			{
				return this._DocProductionLines1;
			}
			set
			{
				this._DocProductionLines1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactProductionTree", Storage="_FactProductionTree", ThisKey="ID", OtherKey="PrepackUnitID")]
		public EntitySet<FactProductionTree> FactProductionTree
		{
			get
			{
				return this._FactProductionTree;
			}
			set
			{
				this._FactProductionTree.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactProductionTree1", Storage="_FactProductionTree1", ThisKey="ID", OtherKey="PrepackBaseUnitID")]
		public EntitySet<FactProductionTree> FactProductionTree1
		{
			get
			{
				return this._FactProductionTree1;
			}
			set
			{
				this._FactProductionTree1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactProductionTree2", Storage="_FactProductionTree2", ThisKey="ID", OtherKey="RawUnitID")]
		public EntitySet<FactProductionTree> FactProductionTree2
		{
			get
			{
				return this._FactProductionTree2;
			}
			set
			{
				this._FactProductionTree2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactProductionTree3", Storage="_FactProductionTree3", ThisKey="ID", OtherKey="RawBaseUnitID")]
		public EntitySet<FactProductionTree> FactProductionTree3
		{
			get
			{
				return this._FactProductionTree3;
			}
			set
			{
				this._FactProductionTree3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocSalesLine", Storage="_DocSalesLines", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<DocSalesLine> DocSalesLines
		{
			get
			{
				return this._DocSalesLines;
			}
			set
			{
				this._DocSalesLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocSalesLine1", Storage="_DocSalesLines1", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<DocSalesLine> DocSalesLines1
		{
			get
			{
				return this._DocSalesLines1;
			}
			set
			{
				this._DocSalesLines1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocTransferProductionLine", Storage="_DocTransferProductionLines", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<DocTransferProductionLine> DocTransferProductionLines
		{
			get
			{
				return this._DocTransferProductionLines;
			}
			set
			{
				this._DocTransferProductionLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocTransferProductionLine1", Storage="_DocTransferProductionLines1", ThisKey="ID", OtherKey="UnitID")]
		public EntitySet<DocTransferProductionLine> DocTransferProductionLines1
		{
			get
			{
				return this._DocTransferProductionLines1;
			}
			set
			{
				this._DocTransferProductionLines1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactMaterialsInProduction", Storage="_FactMaterialsInProductions", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<FactMaterialsInProduction> FactMaterialsInProductions
		{
			get
			{
				return this._FactMaterialsInProductions;
			}
			set
			{
				this._FactMaterialsInProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactMaterialsInProduction1", Storage="_FactMaterialsInProductions1", ThisKey="ID", OtherKey="UnitID")]
		public EntitySet<FactMaterialsInProduction> FactMaterialsInProductions1
		{
			get
			{
				return this._FactMaterialsInProductions1;
			}
			set
			{
				this._FactMaterialsInProductions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactProduction", Storage="_FactProductions", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<FactProduction> FactProductions
		{
			get
			{
				return this._FactProductions;
			}
			set
			{
				this._FactProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactProduction1", Storage="_FactProductions1", ThisKey="ID", OtherKey="UnitID")]
		public EntitySet<FactProduction> FactProductions1
		{
			get
			{
				return this._FactProductions1;
			}
			set
			{
				this._FactProductions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactProductionRemain", Storage="_FactProductionRemains", ThisKey="ID", OtherKey="UnitID")]
		public EntitySet<FactProductionRemain> FactProductionRemains
		{
			get
			{
				return this._FactProductionRemains;
			}
			set
			{
				this._FactProductionRemains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactMovement", Storage="_FactMovements", ThisKey="ID", OtherKey="BaseUnitID")]
		public EntitySet<FactMovement> FactMovements
		{
			get
			{
				return this._FactMovements;
			}
			set
			{
				this._FactMovements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactMovement1", Storage="_FactMovements1", ThisKey="ID", OtherKey="UnitID")]
		public EntitySet<FactMovement> FactMovements1
		{
			get
			{
				return this._FactMovements1;
			}
			set
			{
				this._FactMovements1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DimGoods(DimGoods entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_DimGoods(DimGoods entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_FactPrices(FactPrices entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_FactPrices(FactPrices entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_FactPrices1(FactPrices entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = this;
		}
		
		private void detach_FactPrices1(FactPrices entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = null;
		}
		
		private void attach_FactPricesHistory(FactPricesHistory entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_FactPricesHistory(FactPricesHistory entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_FactPOSLines(FactPOSLines entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_FactPOSLines(FactPOSLines entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_DimUnitConversion(DimUnitConversion entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_DimUnitConversion(DimUnitConversion entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_DimUnitConversion1(DimUnitConversion entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = this;
		}
		
		private void detach_DimUnitConversion1(DimUnitConversion entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = null;
		}
		
		private void attach_FactRemains(FactRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_FactRemains(FactRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_FactConsignmentMoves(FactConsignmentMoves entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_FactConsignmentMoves(FactConsignmentMoves entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_FactConsignmentMoves1(FactConsignmentMoves entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = this;
		}
		
		private void detach_FactConsignmentMoves1(FactConsignmentMoves entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = null;
		}
		
		private void attach_FactConsignmentRemains(FactConsignmentRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_FactConsignmentRemains(FactConsignmentRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_DocProductionCosts(DocProductionCosts entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_DocProductionCosts(DocProductionCosts entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_DocProductionCosts1(DocProductionCosts entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = this;
		}
		
		private void detach_DocProductionCosts1(DocProductionCosts entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = null;
		}
		
		private void attach_DocProductionCostIn(DocProductionCostIn entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_DocProductionCostIn(DocProductionCostIn entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_DocProductionCostIn1(DocProductionCostIn entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = this;
		}
		
		private void detach_DocProductionCostIn1(DocProductionCostIn entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = null;
		}
		
		private void attach_DocProductionCostOut(DocProductionCostOut entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_DocProductionCostOut(DocProductionCostOut entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_DocProductionCostOut1(DocProductionCostOut entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = this;
		}
		
		private void detach_DocProductionCostOut1(DocProductionCostOut entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = null;
		}
		
		private void attach_DocProductionCostMaterials(DocProductionCostMaterials entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_DocProductionCostMaterials(DocProductionCostMaterials entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_DocProductionCostMaterials1(DocProductionCostMaterials entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = this;
		}
		
		private void detach_DocProductionCostMaterials1(DocProductionCostMaterials entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = null;
		}
		
		private void attach_DocProductionLines(DocProductionLines entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_DocProductionLines(DocProductionLines entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_DocProductionLines1(DocProductionLines entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = this;
		}
		
		private void detach_DocProductionLines1(DocProductionLines entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = null;
		}
		
		private void attach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_FactProductionTree1(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = this;
		}
		
		private void detach_FactProductionTree1(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = null;
		}
		
		private void attach_FactProductionTree2(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits2 = this;
		}
		
		private void detach_FactProductionTree2(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits2 = null;
		}
		
		private void attach_FactProductionTree3(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits3 = this;
		}
		
		private void detach_FactProductionTree3(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits3 = null;
		}
		
		private void attach_DocSalesLines(DocSalesLine entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_DocSalesLines(DocSalesLine entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_DocSalesLines1(DocSalesLine entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = this;
		}
		
		private void detach_DocSalesLines1(DocSalesLine entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = null;
		}
		
		private void attach_DocTransferProductionLines(DocTransferProductionLine entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_DocTransferProductionLines(DocTransferProductionLine entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_DocTransferProductionLines1(DocTransferProductionLine entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = this;
		}
		
		private void detach_DocTransferProductionLines1(DocTransferProductionLine entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = null;
		}
		
		private void attach_FactMaterialsInProductions(FactMaterialsInProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_FactMaterialsInProductions(FactMaterialsInProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_FactMaterialsInProductions1(FactMaterialsInProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = this;
		}
		
		private void detach_FactMaterialsInProductions1(FactMaterialsInProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = null;
		}
		
		private void attach_FactProductions(FactProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_FactProductions(FactProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_FactProductions1(FactProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = this;
		}
		
		private void detach_FactProductions1(FactProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = null;
		}
		
		private void attach_FactProductionRemains(FactProductionRemain entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_FactProductionRemains(FactProductionRemain entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_FactMovements(FactMovement entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = this;
		}
		
		private void detach_FactMovements(FactMovement entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits = null;
		}
		
		private void attach_FactMovements1(FactMovement entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = this;
		}
		
		private void detach_FactMovements1(FactMovement entity)
		{
			this.SendPropertyChanging();
			entity.DimUnits1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimPriceTypes")]
	public partial class DimPriceTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _TypeName;
		
		private System.Nullable<long> _CurrencyID;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<FactPOS> _FactPOS;
		
		private EntitySet<FactPrices> _FactPrices;
		
		private EntitySet<FactPricesHistory> _FactPricesHistory;
		
		private EntitySet<DocProduction> _DocProductions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnCurrencyIDChanging(System.Nullable<long> value);
    partial void OnCurrencyIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DimPriceTypes()
		{
			this._FactPOS = new EntitySet<FactPOS>(new Action<FactPOS>(this.attach_FactPOS), new Action<FactPOS>(this.detach_FactPOS));
			this._FactPrices = new EntitySet<FactPrices>(new Action<FactPrices>(this.attach_FactPrices), new Action<FactPrices>(this.detach_FactPrices));
			this._FactPricesHistory = new EntitySet<FactPricesHistory>(new Action<FactPricesHistory>(this.attach_FactPricesHistory), new Action<FactPricesHistory>(this.detach_FactPricesHistory));
			this._DocProductions = new EntitySet<DocProduction>(new Action<DocProduction>(this.attach_DocProductions), new Action<DocProduction>(this.detach_DocProductions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(50)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="BigInt")]
		public System.Nullable<long> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(50)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPriceTypes_FactPOS", Storage="_FactPOS", ThisKey="ID", OtherKey="PriceTypeID")]
		public EntitySet<FactPOS> FactPOS
		{
			get
			{
				return this._FactPOS;
			}
			set
			{
				this._FactPOS.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPriceTypes_FactPrices", Storage="_FactPrices", ThisKey="ID", OtherKey="PriceTypeID")]
		public EntitySet<FactPrices> FactPrices
		{
			get
			{
				return this._FactPrices;
			}
			set
			{
				this._FactPrices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPriceTypes_FactPricesHistory", Storage="_FactPricesHistory", ThisKey="ID", OtherKey="PriceTypeID")]
		public EntitySet<FactPricesHistory> FactPricesHistory
		{
			get
			{
				return this._FactPricesHistory;
			}
			set
			{
				this._FactPricesHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPriceTypes_DocProduction", Storage="_DocProductions", ThisKey="ID", OtherKey="PriceTypeID")]
		public EntitySet<DocProduction> DocProductions
		{
			get
			{
				return this._DocProductions;
			}
			set
			{
				this._DocProductions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactPOS(FactPOS entity)
		{
			this.SendPropertyChanging();
			entity.DimPriceTypes = this;
		}
		
		private void detach_FactPOS(FactPOS entity)
		{
			this.SendPropertyChanging();
			entity.DimPriceTypes = null;
		}
		
		private void attach_FactPrices(FactPrices entity)
		{
			this.SendPropertyChanging();
			entity.DimPriceTypes = this;
		}
		
		private void detach_FactPrices(FactPrices entity)
		{
			this.SendPropertyChanging();
			entity.DimPriceTypes = null;
		}
		
		private void attach_FactPricesHistory(FactPricesHistory entity)
		{
			this.SendPropertyChanging();
			entity.DimPriceTypes = this;
		}
		
		private void detach_FactPricesHistory(FactPricesHistory entity)
		{
			this.SendPropertyChanging();
			entity.DimPriceTypes = null;
		}
		
		private void attach_DocProductions(DocProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimPriceTypes = this;
		}
		
		private void detach_DocProductions(DocProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimPriceTypes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimCurrencies")]
	public partial class DimCurrencies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Code;
		
		private string _Name;
		
		private string _FullName;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<FactPOS> _FactPOS;
		
		private EntitySet<FactPrices> _FactPrices;
		
		private EntitySet<FactPricesHistory> _FactPricesHistory;
		
		private EntitySet<DocProduction> _DocProductions;
		
		private EntitySet<DocSale> _DocSales;
		
		private EntitySet<FactCurrencyRate> _FactCurrencyRates;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DimCurrencies()
		{
			this._FactPOS = new EntitySet<FactPOS>(new Action<FactPOS>(this.attach_FactPOS), new Action<FactPOS>(this.detach_FactPOS));
			this._FactPrices = new EntitySet<FactPrices>(new Action<FactPrices>(this.attach_FactPrices), new Action<FactPrices>(this.detach_FactPrices));
			this._FactPricesHistory = new EntitySet<FactPricesHistory>(new Action<FactPricesHistory>(this.attach_FactPricesHistory), new Action<FactPricesHistory>(this.detach_FactPricesHistory));
			this._DocProductions = new EntitySet<DocProduction>(new Action<DocProduction>(this.attach_DocProductions), new Action<DocProduction>(this.detach_DocProductions));
			this._DocSales = new EntitySet<DocSale>(new Action<DocSale>(this.attach_DocSales), new Action<DocSale>(this.detach_DocSales));
			this._FactCurrencyRates = new EntitySet<FactCurrencyRate>(new Action<FactCurrencyRate>(this.attach_FactCurrencyRates), new Action<FactCurrencyRate>(this.detach_FactCurrencyRates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NChar(11)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(250)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimCurrencies_FactPOS", Storage="_FactPOS", ThisKey="ID", OtherKey="CurrencyID")]
		public EntitySet<FactPOS> FactPOS
		{
			get
			{
				return this._FactPOS;
			}
			set
			{
				this._FactPOS.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimCurrencies_FactPrices", Storage="_FactPrices", ThisKey="ID", OtherKey="CurrencyID")]
		public EntitySet<FactPrices> FactPrices
		{
			get
			{
				return this._FactPrices;
			}
			set
			{
				this._FactPrices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimCurrencies_FactPricesHistory", Storage="_FactPricesHistory", ThisKey="ID", OtherKey="CurrencyID")]
		public EntitySet<FactPricesHistory> FactPricesHistory
		{
			get
			{
				return this._FactPricesHistory;
			}
			set
			{
				this._FactPricesHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimCurrencies_DocProduction", Storage="_DocProductions", ThisKey="ID", OtherKey="CurrencyID")]
		public EntitySet<DocProduction> DocProductions
		{
			get
			{
				return this._DocProductions;
			}
			set
			{
				this._DocProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimCurrencies_DocSale", Storage="_DocSales", ThisKey="ID", OtherKey="CurrencyID")]
		public EntitySet<DocSale> DocSales
		{
			get
			{
				return this._DocSales;
			}
			set
			{
				this._DocSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimCurrencies_FactCurrencyRate", Storage="_FactCurrencyRates", ThisKey="ID", OtherKey="CurrencyID")]
		public EntitySet<FactCurrencyRate> FactCurrencyRates
		{
			get
			{
				return this._FactCurrencyRates;
			}
			set
			{
				this._FactCurrencyRates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactPOS(FactPOS entity)
		{
			this.SendPropertyChanging();
			entity.DimCurrencies = this;
		}
		
		private void detach_FactPOS(FactPOS entity)
		{
			this.SendPropertyChanging();
			entity.DimCurrencies = null;
		}
		
		private void attach_FactPrices(FactPrices entity)
		{
			this.SendPropertyChanging();
			entity.DimCurrencies = this;
		}
		
		private void detach_FactPrices(FactPrices entity)
		{
			this.SendPropertyChanging();
			entity.DimCurrencies = null;
		}
		
		private void attach_FactPricesHistory(FactPricesHistory entity)
		{
			this.SendPropertyChanging();
			entity.DimCurrencies = this;
		}
		
		private void detach_FactPricesHistory(FactPricesHistory entity)
		{
			this.SendPropertyChanging();
			entity.DimCurrencies = null;
		}
		
		private void attach_DocProductions(DocProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimCurrencies = this;
		}
		
		private void detach_DocProductions(DocProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimCurrencies = null;
		}
		
		private void attach_DocSales(DocSale entity)
		{
			this.SendPropertyChanging();
			entity.DimCurrencies = this;
		}
		
		private void detach_DocSales(DocSale entity)
		{
			this.SendPropertyChanging();
			entity.DimCurrencies = null;
		}
		
		private void attach_FactCurrencyRates(FactCurrencyRate entity)
		{
			this.SendPropertyChanging();
			entity.DimCurrencies = this;
		}
		
		private void detach_FactCurrencyRates(FactCurrencyRate entity)
		{
			this.SendPropertyChanging();
			entity.DimCurrencies = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimDepartments")]
	public partial class DimDepartments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Code;
		
		private string _Name;
		
		private System.Nullable<long> _GroupID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<DimDepartments> _DimDepartments2;
		
		private EntitySet<FactRemains> _FactRemains;
		
		private EntitySet<FactConsignmentMoves> _FactConsignmentMoves;
		
		private EntitySet<DocProductionCosts> _DocProductionCosts;
		
		private EntitySet<DocProductionCostIn> _DocProductionCostIn;
		
		private EntitySet<DocProductionCostOut> _DocProductionCostOut;
		
		private EntitySet<DocProductionCostMaterials> _DocProductionCostMaterials;
		
		private EntitySet<DocProductionLines> _DocProductionLines;
		
		private EntitySet<FactProductionTree> _FactProductionTree;
		
		private EntitySet<DocProduction> _DocProductions;
		
		private EntitySet<DocTransferProduction> _DocTransferProductions;
		
		private EntitySet<FactMaterialsInProduction> _FactMaterialsInProductions;
		
		private EntitySet<FactProduction> _FactProductions;
		
		private EntitySet<FactProductionRemain> _FactProductionRemains;
		
		private EntitySet<FactMovement> _FactMovements;
		
		private EntityRef<DimDepartments> _DimDepartments1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGroupIDChanging(System.Nullable<long> value);
    partial void OnGroupIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DimDepartments()
		{
			this._DimDepartments2 = new EntitySet<DimDepartments>(new Action<DimDepartments>(this.attach_DimDepartments2), new Action<DimDepartments>(this.detach_DimDepartments2));
			this._FactRemains = new EntitySet<FactRemains>(new Action<FactRemains>(this.attach_FactRemains), new Action<FactRemains>(this.detach_FactRemains));
			this._FactConsignmentMoves = new EntitySet<FactConsignmentMoves>(new Action<FactConsignmentMoves>(this.attach_FactConsignmentMoves), new Action<FactConsignmentMoves>(this.detach_FactConsignmentMoves));
			this._DocProductionCosts = new EntitySet<DocProductionCosts>(new Action<DocProductionCosts>(this.attach_DocProductionCosts), new Action<DocProductionCosts>(this.detach_DocProductionCosts));
			this._DocProductionCostIn = new EntitySet<DocProductionCostIn>(new Action<DocProductionCostIn>(this.attach_DocProductionCostIn), new Action<DocProductionCostIn>(this.detach_DocProductionCostIn));
			this._DocProductionCostOut = new EntitySet<DocProductionCostOut>(new Action<DocProductionCostOut>(this.attach_DocProductionCostOut), new Action<DocProductionCostOut>(this.detach_DocProductionCostOut));
			this._DocProductionCostMaterials = new EntitySet<DocProductionCostMaterials>(new Action<DocProductionCostMaterials>(this.attach_DocProductionCostMaterials), new Action<DocProductionCostMaterials>(this.detach_DocProductionCostMaterials));
			this._DocProductionLines = new EntitySet<DocProductionLines>(new Action<DocProductionLines>(this.attach_DocProductionLines), new Action<DocProductionLines>(this.detach_DocProductionLines));
			this._FactProductionTree = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTree), new Action<FactProductionTree>(this.detach_FactProductionTree));
			this._DocProductions = new EntitySet<DocProduction>(new Action<DocProduction>(this.attach_DocProductions), new Action<DocProduction>(this.detach_DocProductions));
			this._DocTransferProductions = new EntitySet<DocTransferProduction>(new Action<DocTransferProduction>(this.attach_DocTransferProductions), new Action<DocTransferProduction>(this.detach_DocTransferProductions));
			this._FactMaterialsInProductions = new EntitySet<FactMaterialsInProduction>(new Action<FactMaterialsInProduction>(this.attach_FactMaterialsInProductions), new Action<FactMaterialsInProduction>(this.detach_FactMaterialsInProductions));
			this._FactProductions = new EntitySet<FactProduction>(new Action<FactProduction>(this.attach_FactProductions), new Action<FactProduction>(this.detach_FactProductions));
			this._FactProductionRemains = new EntitySet<FactProductionRemain>(new Action<FactProductionRemain>(this.attach_FactProductionRemains), new Action<FactProductionRemain>(this.detach_FactProductionRemains));
			this._FactMovements = new EntitySet<FactMovement>(new Action<FactMovement>(this.attach_FactMovements), new Action<FactMovement>(this.detach_FactMovements));
			this._DimDepartments1 = default(EntityRef<DimDepartments>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NChar(11)", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._DimDepartments1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DimDepartments", Storage="_DimDepartments2", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<DimDepartments> DimDepartments2
		{
			get
			{
				return this._DimDepartments2;
			}
			set
			{
				this._DimDepartments2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_FactRemains", Storage="_FactRemains", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<FactRemains> FactRemains
		{
			get
			{
				return this._FactRemains;
			}
			set
			{
				this._FactRemains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_FactConsignmentMoves", Storage="_FactConsignmentMoves", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<FactConsignmentMoves> FactConsignmentMoves
		{
			get
			{
				return this._FactConsignmentMoves;
			}
			set
			{
				this._FactConsignmentMoves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DocProductionCosts", Storage="_DocProductionCosts", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<DocProductionCosts> DocProductionCosts
		{
			get
			{
				return this._DocProductionCosts;
			}
			set
			{
				this._DocProductionCosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DocProductionCostIn", Storage="_DocProductionCostIn", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<DocProductionCostIn> DocProductionCostIn
		{
			get
			{
				return this._DocProductionCostIn;
			}
			set
			{
				this._DocProductionCostIn.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DocProductionCostOut", Storage="_DocProductionCostOut", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<DocProductionCostOut> DocProductionCostOut
		{
			get
			{
				return this._DocProductionCostOut;
			}
			set
			{
				this._DocProductionCostOut.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DocProductionCostMaterials", Storage="_DocProductionCostMaterials", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<DocProductionCostMaterials> DocProductionCostMaterials
		{
			get
			{
				return this._DocProductionCostMaterials;
			}
			set
			{
				this._DocProductionCostMaterials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DocProductionLines", Storage="_DocProductionLines", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<DocProductionLines> DocProductionLines
		{
			get
			{
				return this._DocProductionLines;
			}
			set
			{
				this._DocProductionLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_FactProductionTree", Storage="_FactProductionTree", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<FactProductionTree> FactProductionTree
		{
			get
			{
				return this._FactProductionTree;
			}
			set
			{
				this._FactProductionTree.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DocProduction", Storage="_DocProductions", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<DocProduction> DocProductions
		{
			get
			{
				return this._DocProductions;
			}
			set
			{
				this._DocProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DocTransferProduction", Storage="_DocTransferProductions", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<DocTransferProduction> DocTransferProductions
		{
			get
			{
				return this._DocTransferProductions;
			}
			set
			{
				this._DocTransferProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_FactMaterialsInProduction", Storage="_FactMaterialsInProductions", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<FactMaterialsInProduction> FactMaterialsInProductions
		{
			get
			{
				return this._FactMaterialsInProductions;
			}
			set
			{
				this._FactMaterialsInProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_FactProduction", Storage="_FactProductions", ThisKey="ID", OtherKey="FromDepartmentID")]
		public EntitySet<FactProduction> FactProductions
		{
			get
			{
				return this._FactProductions;
			}
			set
			{
				this._FactProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_FactProductionRemain", Storage="_FactProductionRemains", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<FactProductionRemain> FactProductionRemains
		{
			get
			{
				return this._FactProductionRemains;
			}
			set
			{
				this._FactProductionRemains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_FactMovement", Storage="_FactMovements", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<FactMovement> FactMovements
		{
			get
			{
				return this._FactMovements;
			}
			set
			{
				this._FactMovements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DimDepartments", Storage="_DimDepartments1", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments1
		{
			get
			{
				return this._DimDepartments1.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments1.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments1.Entity = null;
						previousValue.DimDepartments2.Remove(this);
					}
					this._DimDepartments1.Entity = value;
					if ((value != null))
					{
						value.DimDepartments2.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DimDepartments2(DimDepartments entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments1 = this;
		}
		
		private void detach_DimDepartments2(DimDepartments entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments1 = null;
		}
		
		private void attach_FactRemains(FactRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = this;
		}
		
		private void detach_FactRemains(FactRemains entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = null;
		}
		
		private void attach_FactConsignmentMoves(FactConsignmentMoves entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = this;
		}
		
		private void detach_FactConsignmentMoves(FactConsignmentMoves entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = null;
		}
		
		private void attach_DocProductionCosts(DocProductionCosts entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = this;
		}
		
		private void detach_DocProductionCosts(DocProductionCosts entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = null;
		}
		
		private void attach_DocProductionCostIn(DocProductionCostIn entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = this;
		}
		
		private void detach_DocProductionCostIn(DocProductionCostIn entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = null;
		}
		
		private void attach_DocProductionCostOut(DocProductionCostOut entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = this;
		}
		
		private void detach_DocProductionCostOut(DocProductionCostOut entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = null;
		}
		
		private void attach_DocProductionCostMaterials(DocProductionCostMaterials entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = this;
		}
		
		private void detach_DocProductionCostMaterials(DocProductionCostMaterials entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = null;
		}
		
		private void attach_DocProductionLines(DocProductionLines entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = this;
		}
		
		private void detach_DocProductionLines(DocProductionLines entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = null;
		}
		
		private void attach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = this;
		}
		
		private void detach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = null;
		}
		
		private void attach_DocProductions(DocProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = this;
		}
		
		private void detach_DocProductions(DocProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = null;
		}
		
		private void attach_DocTransferProductions(DocTransferProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = this;
		}
		
		private void detach_DocTransferProductions(DocTransferProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = null;
		}
		
		private void attach_FactMaterialsInProductions(FactMaterialsInProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = this;
		}
		
		private void detach_FactMaterialsInProductions(FactMaterialsInProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = null;
		}
		
		private void attach_FactProductions(FactProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = this;
		}
		
		private void detach_FactProductions(FactProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = null;
		}
		
		private void attach_FactProductionRemains(FactProductionRemain entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = this;
		}
		
		private void detach_FactProductionRemains(FactProductionRemain entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = null;
		}
		
		private void attach_FactMovements(FactMovement entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = this;
		}
		
		private void detach_FactMovements(FactMovement entity)
		{
			this.SendPropertyChanging();
			entity.DimDepartments = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimPOSRegisters")]
	public partial class DimPOSRegisters : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private System.Nullable<long> _WarehouseID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<FactPOS> _FactPOS;
		
		private EntityRef<DimWarehouses> _DimWarehouses;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnWarehouseIDChanging(System.Nullable<long> value);
    partial void OnWarehouseIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DimPOSRegisters()
		{
			this._FactPOS = new EntitySet<FactPOS>(new Action<FactPOS>(this.attach_FactPOS), new Action<FactPOS>(this.detach_FactPOS));
			this._DimWarehouses = default(EntityRef<DimWarehouses>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._DimWarehouses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(50)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPOSRegisters_FactPOS", Storage="_FactPOS", ThisKey="ID", OtherKey="POSRegisterID")]
		public EntitySet<FactPOS> FactPOS
		{
			get
			{
				return this._FactPOS;
			}
			set
			{
				this._FactPOS.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_DimPOSRegisters", Storage="_DimWarehouses", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses
		{
			get
			{
				return this._DimWarehouses.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses.Entity = null;
						previousValue.DimPOSRegisters.Remove(this);
					}
					this._DimWarehouses.Entity = value;
					if ((value != null))
					{
						value.DimPOSRegisters.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactPOS(FactPOS entity)
		{
			this.SendPropertyChanging();
			entity.DimPOSRegisters = this;
		}
		
		private void detach_FactPOS(FactPOS entity)
		{
			this.SendPropertyChanging();
			entity.DimPOSRegisters = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimPeople")]
	public partial class DimPeople : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<FactPOS> _FactPOS;
		
		private EntitySet<DimSpecifications> _DimSpecifications;
		
		private EntitySet<FactPOSLines> _FactPOSLines;
		
		private EntitySet<DocProductionCosts> _DocProductionCosts;
		
		private EntitySet<DocProduction> _DocProductions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DimPeople()
		{
			this._FactPOS = new EntitySet<FactPOS>(new Action<FactPOS>(this.attach_FactPOS), new Action<FactPOS>(this.detach_FactPOS));
			this._DimSpecifications = new EntitySet<DimSpecifications>(new Action<DimSpecifications>(this.attach_DimSpecifications), new Action<DimSpecifications>(this.detach_DimSpecifications));
			this._FactPOSLines = new EntitySet<FactPOSLines>(new Action<FactPOSLines>(this.attach_FactPOSLines), new Action<FactPOSLines>(this.detach_FactPOSLines));
			this._DocProductionCosts = new EntitySet<DocProductionCosts>(new Action<DocProductionCosts>(this.attach_DocProductionCosts), new Action<DocProductionCosts>(this.detach_DocProductionCosts));
			this._DocProductions = new EntitySet<DocProduction>(new Action<DocProduction>(this.attach_DocProductions), new Action<DocProduction>(this.detach_DocProductions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPeople_FactPOS", Storage="_FactPOS", ThisKey="ID", OtherKey="CasherID")]
		public EntitySet<FactPOS> FactPOS
		{
			get
			{
				return this._FactPOS;
			}
			set
			{
				this._FactPOS.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPeople_DimSpecifications", Storage="_DimSpecifications", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<DimSpecifications> DimSpecifications
		{
			get
			{
				return this._DimSpecifications;
			}
			set
			{
				this._DimSpecifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPeople_FactPOSLines", Storage="_FactPOSLines", ThisKey="ID", OtherKey="CasherID")]
		public EntitySet<FactPOSLines> FactPOSLines
		{
			get
			{
				return this._FactPOSLines;
			}
			set
			{
				this._FactPOSLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPeople_DocProductionCosts", Storage="_DocProductionCosts", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<DocProductionCosts> DocProductionCosts
		{
			get
			{
				return this._DocProductionCosts;
			}
			set
			{
				this._DocProductionCosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPeople_DocProduction", Storage="_DocProductions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<DocProduction> DocProductions
		{
			get
			{
				return this._DocProductions;
			}
			set
			{
				this._DocProductions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactPOS(FactPOS entity)
		{
			this.SendPropertyChanging();
			entity.DimPeople = this;
		}
		
		private void detach_FactPOS(FactPOS entity)
		{
			this.SendPropertyChanging();
			entity.DimPeople = null;
		}
		
		private void attach_DimSpecifications(DimSpecifications entity)
		{
			this.SendPropertyChanging();
			entity.DimPeople = this;
		}
		
		private void detach_DimSpecifications(DimSpecifications entity)
		{
			this.SendPropertyChanging();
			entity.DimPeople = null;
		}
		
		private void attach_FactPOSLines(FactPOSLines entity)
		{
			this.SendPropertyChanging();
			entity.DimPeople = this;
		}
		
		private void detach_FactPOSLines(FactPOSLines entity)
		{
			this.SendPropertyChanging();
			entity.DimPeople = null;
		}
		
		private void attach_DocProductionCosts(DocProductionCosts entity)
		{
			this.SendPropertyChanging();
			entity.DimPeople = this;
		}
		
		private void detach_DocProductionCosts(DocProductionCosts entity)
		{
			this.SendPropertyChanging();
			entity.DimPeople = null;
		}
		
		private void attach_DocProductions(DocProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimPeople = this;
		}
		
		private void detach_DocProductions(DocProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimPeople = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactPOS")]
	public partial class FactPOS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<System.DateTime> _NumberPrefix;
		
		private string _ChequeNumber;
		
		private System.Nullable<System.DateTime> _DocDate;
		
		private System.Nullable<int> _DateKey;
		
		private System.Data.Linq.Binary _Posted;
		
		private System.Nullable<long> _CasherID;
		
		private System.Nullable<decimal> _POSCheckNumber;
		
		private System.Nullable<decimal> _AmountCash;
		
		private System.Nullable<decimal> _AmountPayCards;
		
		private System.Nullable<decimal> _AmountDoc;
		
		private System.Nullable<long> _WarehouseID;
		
		private System.Nullable<long> _CurrencyID;
		
		private System.Nullable<long> _PriceTypeID;
		
		private System.Nullable<long> _POSRegisterID;
		
		private string _DiscountCardNumber;
		
		private System.Nullable<bool> _Refund;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<FactPOSLines> _FactPOSLines;
		
		private EntityRef<DimCurrencies> _DimCurrencies;
		
		private EntityRef<DimDates> _DimDates;
		
		private EntityRef<DimPeople> _DimPeople;
		
		private EntityRef<DimPOSRegisters> _DimPOSRegisters;
		
		private EntityRef<DimPriceTypes> _DimPriceTypes;
		
		private EntityRef<DimWarehouses> _DimWarehouses;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNumberPrefixChanging(System.Nullable<System.DateTime> value);
    partial void OnNumberPrefixChanged();
    partial void OnChequeNumberChanging(string value);
    partial void OnChequeNumberChanged();
    partial void OnDocDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDocDateChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnPostedChanging(System.Data.Linq.Binary value);
    partial void OnPostedChanged();
    partial void OnCasherIDChanging(System.Nullable<long> value);
    partial void OnCasherIDChanged();
    partial void OnPOSCheckNumberChanging(System.Nullable<decimal> value);
    partial void OnPOSCheckNumberChanged();
    partial void OnAmountCashChanging(System.Nullable<decimal> value);
    partial void OnAmountCashChanged();
    partial void OnAmountPayCardsChanging(System.Nullable<decimal> value);
    partial void OnAmountPayCardsChanged();
    partial void OnAmountDocChanging(System.Nullable<decimal> value);
    partial void OnAmountDocChanged();
    partial void OnWarehouseIDChanging(System.Nullable<long> value);
    partial void OnWarehouseIDChanged();
    partial void OnCurrencyIDChanging(System.Nullable<long> value);
    partial void OnCurrencyIDChanged();
    partial void OnPriceTypeIDChanging(System.Nullable<long> value);
    partial void OnPriceTypeIDChanged();
    partial void OnPOSRegisterIDChanging(System.Nullable<long> value);
    partial void OnPOSRegisterIDChanged();
    partial void OnDiscountCardNumberChanging(string value);
    partial void OnDiscountCardNumberChanged();
    partial void OnRefundChanging(System.Nullable<bool> value);
    partial void OnRefundChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public FactPOS()
		{
			this._FactPOSLines = new EntitySet<FactPOSLines>(new Action<FactPOSLines>(this.attach_FactPOSLines), new Action<FactPOSLines>(this.detach_FactPOSLines));
			this._DimCurrencies = default(EntityRef<DimCurrencies>);
			this._DimDates = default(EntityRef<DimDates>);
			this._DimPeople = default(EntityRef<DimPeople>);
			this._DimPOSRegisters = default(EntityRef<DimPOSRegisters>);
			this._DimPriceTypes = default(EntityRef<DimPriceTypes>);
			this._DimWarehouses = default(EntityRef<DimWarehouses>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberPrefix", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> NumberPrefix
		{
			get
			{
				return this._NumberPrefix;
			}
			set
			{
				if ((this._NumberPrefix != value))
				{
					this.OnNumberPrefixChanging(value);
					this.SendPropertyChanging();
					this._NumberPrefix = value;
					this.SendPropertyChanged("NumberPrefix");
					this.OnNumberPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChequeNumber", DbType="NVarChar(11)", UpdateCheck=UpdateCheck.Never)]
		public string ChequeNumber
		{
			get
			{
				return this._ChequeNumber;
			}
			set
			{
				if ((this._ChequeNumber != value))
				{
					this.OnChequeNumberChanging(value);
					this.SendPropertyChanging();
					this._ChequeNumber = value;
					this.SendPropertyChanged("ChequeNumber");
					this.OnChequeNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					if (this._DimDates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Posted", DbType="Binary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Posted
		{
			get
			{
				return this._Posted;
			}
			set
			{
				if ((this._Posted != value))
				{
					this.OnPostedChanging(value);
					this.SendPropertyChanging();
					this._Posted = value;
					this.SendPropertyChanged("Posted");
					this.OnPostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CasherID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> CasherID
		{
			get
			{
				return this._CasherID;
			}
			set
			{
				if ((this._CasherID != value))
				{
					if (this._DimPeople.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCasherIDChanging(value);
					this.SendPropertyChanging();
					this._CasherID = value;
					this.SendPropertyChanged("CasherID");
					this.OnCasherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POSCheckNumber", DbType="Decimal(8,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> POSCheckNumber
		{
			get
			{
				return this._POSCheckNumber;
			}
			set
			{
				if ((this._POSCheckNumber != value))
				{
					this.OnPOSCheckNumberChanging(value);
					this.SendPropertyChanging();
					this._POSCheckNumber = value;
					this.SendPropertyChanged("POSCheckNumber");
					this.OnPOSCheckNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountCash", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> AmountCash
		{
			get
			{
				return this._AmountCash;
			}
			set
			{
				if ((this._AmountCash != value))
				{
					this.OnAmountCashChanging(value);
					this.SendPropertyChanging();
					this._AmountCash = value;
					this.SendPropertyChanged("AmountCash");
					this.OnAmountCashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountPayCards", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> AmountPayCards
		{
			get
			{
				return this._AmountPayCards;
			}
			set
			{
				if ((this._AmountPayCards != value))
				{
					this.OnAmountPayCardsChanging(value);
					this.SendPropertyChanging();
					this._AmountPayCards = value;
					this.SendPropertyChanged("AmountPayCards");
					this.OnAmountPayCardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountDoc", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> AmountDoc
		{
			get
			{
				return this._AmountDoc;
			}
			set
			{
				if ((this._AmountDoc != value))
				{
					this.OnAmountDocChanging(value);
					this.SendPropertyChanging();
					this._AmountDoc = value;
					this.SendPropertyChanged("AmountDoc");
					this.OnAmountDocChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._DimWarehouses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._DimCurrencies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceTypeID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> PriceTypeID
		{
			get
			{
				return this._PriceTypeID;
			}
			set
			{
				if ((this._PriceTypeID != value))
				{
					if (this._DimPriceTypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PriceTypeID = value;
					this.SendPropertyChanged("PriceTypeID");
					this.OnPriceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POSRegisterID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> POSRegisterID
		{
			get
			{
				return this._POSRegisterID;
			}
			set
			{
				if ((this._POSRegisterID != value))
				{
					if (this._DimPOSRegisters.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPOSRegisterIDChanging(value);
					this.SendPropertyChanging();
					this._POSRegisterID = value;
					this.SendPropertyChanged("POSRegisterID");
					this.OnPOSRegisterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountCardNumber", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string DiscountCardNumber
		{
			get
			{
				return this._DiscountCardNumber;
			}
			set
			{
				if ((this._DiscountCardNumber != value))
				{
					this.OnDiscountCardNumberChanging(value);
					this.SendPropertyChanging();
					this._DiscountCardNumber = value;
					this.SendPropertyChanged("DiscountCardNumber");
					this.OnDiscountCardNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Refund", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Refund
		{
			get
			{
				return this._Refund;
			}
			set
			{
				if ((this._Refund != value))
				{
					this.OnRefundChanging(value);
					this.SendPropertyChanging();
					this._Refund = value;
					this.SendPropertyChanged("Refund");
					this.OnRefundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FactPOS_FactPOSLines", Storage="_FactPOSLines", ThisKey="ID", OtherKey="DocID")]
		public EntitySet<FactPOSLines> FactPOSLines
		{
			get
			{
				return this._FactPOSLines;
			}
			set
			{
				this._FactPOSLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimCurrencies_FactPOS", Storage="_DimCurrencies", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
		public DimCurrencies DimCurrencies
		{
			get
			{
				return this._DimCurrencies.Entity;
			}
			set
			{
				DimCurrencies previousValue = this._DimCurrencies.Entity;
				if (((previousValue != value) 
							|| (this._DimCurrencies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimCurrencies.Entity = null;
						previousValue.FactPOS.Remove(this);
					}
					this._DimCurrencies.Entity = value;
					if ((value != null))
					{
						value.FactPOS.Add(this);
						this._CurrencyID = value.ID;
					}
					else
					{
						this._CurrencyID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimCurrencies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactPOS", Storage="_DimDates", ThisKey="DateKey", OtherKey="DateKey", IsForeignKey=true)]
		public DimDates DimDates
		{
			get
			{
				return this._DimDates.Entity;
			}
			set
			{
				DimDates previousValue = this._DimDates.Entity;
				if (((previousValue != value) 
							|| (this._DimDates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDates.Entity = null;
						previousValue.FactPOS.Remove(this);
					}
					this._DimDates.Entity = value;
					if ((value != null))
					{
						value.FactPOS.Add(this);
						this._DateKey = value.DateKey;
					}
					else
					{
						this._DateKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimDates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPeople_FactPOS", Storage="_DimPeople", ThisKey="CasherID", OtherKey="ID", IsForeignKey=true)]
		public DimPeople DimPeople
		{
			get
			{
				return this._DimPeople.Entity;
			}
			set
			{
				DimPeople previousValue = this._DimPeople.Entity;
				if (((previousValue != value) 
							|| (this._DimPeople.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimPeople.Entity = null;
						previousValue.FactPOS.Remove(this);
					}
					this._DimPeople.Entity = value;
					if ((value != null))
					{
						value.FactPOS.Add(this);
						this._CasherID = value.ID;
					}
					else
					{
						this._CasherID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimPeople");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPOSRegisters_FactPOS", Storage="_DimPOSRegisters", ThisKey="POSRegisterID", OtherKey="ID", IsForeignKey=true)]
		public DimPOSRegisters DimPOSRegisters
		{
			get
			{
				return this._DimPOSRegisters.Entity;
			}
			set
			{
				DimPOSRegisters previousValue = this._DimPOSRegisters.Entity;
				if (((previousValue != value) 
							|| (this._DimPOSRegisters.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimPOSRegisters.Entity = null;
						previousValue.FactPOS.Remove(this);
					}
					this._DimPOSRegisters.Entity = value;
					if ((value != null))
					{
						value.FactPOS.Add(this);
						this._POSRegisterID = value.ID;
					}
					else
					{
						this._POSRegisterID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimPOSRegisters");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPriceTypes_FactPOS", Storage="_DimPriceTypes", ThisKey="PriceTypeID", OtherKey="ID", IsForeignKey=true)]
		public DimPriceTypes DimPriceTypes
		{
			get
			{
				return this._DimPriceTypes.Entity;
			}
			set
			{
				DimPriceTypes previousValue = this._DimPriceTypes.Entity;
				if (((previousValue != value) 
							|| (this._DimPriceTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimPriceTypes.Entity = null;
						previousValue.FactPOS.Remove(this);
					}
					this._DimPriceTypes.Entity = value;
					if ((value != null))
					{
						value.FactPOS.Add(this);
						this._PriceTypeID = value.ID;
					}
					else
					{
						this._PriceTypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimPriceTypes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactPOS", Storage="_DimWarehouses", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses
		{
			get
			{
				return this._DimWarehouses.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses.Entity = null;
						previousValue.FactPOS.Remove(this);
					}
					this._DimWarehouses.Entity = value;
					if ((value != null))
					{
						value.FactPOS.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactPOSLines(FactPOSLines entity)
		{
			this.SendPropertyChanging();
			entity.FactPOS = this;
		}
		
		private void detach_FactPOSLines(FactPOSLines entity)
		{
			this.SendPropertyChanging();
			entity.FactPOS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactPrices")]
	public partial class FactPrices : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _GoodID;
		
		private System.Nullable<System.DateTime> _OnDate;
		
		private System.Nullable<int> _DateKey;
		
		private System.Nullable<System.DateTime> _PriceDate;
		
		private System.Nullable<int> _PriceDateKey;
		
		private decimal _Price;
		
		private System.Nullable<decimal> _PricePerUnit;
		
		private System.Nullable<long> _UnitID;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Nullable<long> _CurrencyID;
		
		private System.Nullable<long> _PriceTypeID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimCurrencies> _DimCurrencies;
		
		private EntityRef<DimDates> _DimDates;
		
		private EntityRef<DimPriceTypes> _DimPriceTypes;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimUnits> _DimUnits1;
		
		private EntityRef<DimGoods> _DimGoods;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnOnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOnDateChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnPriceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPriceDateChanged();
    partial void OnPriceDateKeyChanging(System.Nullable<int> value);
    partial void OnPriceDateKeyChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnPricePerUnitChanging(System.Nullable<decimal> value);
    partial void OnPricePerUnitChanged();
    partial void OnUnitIDChanging(System.Nullable<long> value);
    partial void OnUnitIDChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnCurrencyIDChanging(System.Nullable<long> value);
    partial void OnCurrencyIDChanged();
    partial void OnPriceTypeIDChanging(System.Nullable<long> value);
    partial void OnPriceTypeIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public FactPrices()
		{
			this._DimCurrencies = default(EntityRef<DimCurrencies>);
			this._DimDates = default(EntityRef<DimDates>);
			this._DimPriceTypes = default(EntityRef<DimPriceTypes>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimUnits1 = default(EntityRef<DimUnits>);
			this._DimGoods = default(EntityRef<DimGoods>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> OnDate
		{
			get
			{
				return this._OnDate;
			}
			set
			{
				if ((this._OnDate != value))
				{
					this.OnOnDateChanging(value);
					this.SendPropertyChanging();
					this._OnDate = value;
					this.SendPropertyChanged("OnDate");
					this.OnOnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					if (this._DimDates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PriceDate
		{
			get
			{
				return this._PriceDate;
			}
			set
			{
				if ((this._PriceDate != value))
				{
					this.OnPriceDateChanging(value);
					this.SendPropertyChanging();
					this._PriceDate = value;
					this.SendPropertyChanged("PriceDate");
					this.OnPriceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceDateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PriceDateKey
		{
			get
			{
				return this._PriceDateKey;
			}
			set
			{
				if ((this._PriceDateKey != value))
				{
					this.OnPriceDateKeyChanging(value);
					this.SendPropertyChanging();
					this._PriceDateKey = value;
					this.SendPropertyChanged("PriceDateKey");
					this.OnPriceDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(15,2) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePerUnit", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> PricePerUnit
		{
			get
			{
				return this._PricePerUnit;
			}
			set
			{
				if ((this._PricePerUnit != value))
				{
					this.OnPricePerUnitChanging(value);
					this.SendPropertyChanging();
					this._PricePerUnit = value;
					this.SendPropertyChanged("PricePerUnit");
					this.OnPricePerUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if (this._DimUnits1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._DimCurrencies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceTypeID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> PriceTypeID
		{
			get
			{
				return this._PriceTypeID;
			}
			set
			{
				if ((this._PriceTypeID != value))
				{
					if (this._DimPriceTypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PriceTypeID = value;
					this.SendPropertyChanged("PriceTypeID");
					this.OnPriceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimCurrencies_FactPrices", Storage="_DimCurrencies", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
		public DimCurrencies DimCurrencies
		{
			get
			{
				return this._DimCurrencies.Entity;
			}
			set
			{
				DimCurrencies previousValue = this._DimCurrencies.Entity;
				if (((previousValue != value) 
							|| (this._DimCurrencies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimCurrencies.Entity = null;
						previousValue.FactPrices.Remove(this);
					}
					this._DimCurrencies.Entity = value;
					if ((value != null))
					{
						value.FactPrices.Add(this);
						this._CurrencyID = value.ID;
					}
					else
					{
						this._CurrencyID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimCurrencies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactPrices", Storage="_DimDates", ThisKey="DateKey", OtherKey="DateKey", IsForeignKey=true)]
		public DimDates DimDates
		{
			get
			{
				return this._DimDates.Entity;
			}
			set
			{
				DimDates previousValue = this._DimDates.Entity;
				if (((previousValue != value) 
							|| (this._DimDates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDates.Entity = null;
						previousValue.FactPrices.Remove(this);
					}
					this._DimDates.Entity = value;
					if ((value != null))
					{
						value.FactPrices.Add(this);
						this._DateKey = value.DateKey;
					}
					else
					{
						this._DateKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimDates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPriceTypes_FactPrices", Storage="_DimPriceTypes", ThisKey="PriceTypeID", OtherKey="ID", IsForeignKey=true)]
		public DimPriceTypes DimPriceTypes
		{
			get
			{
				return this._DimPriceTypes.Entity;
			}
			set
			{
				DimPriceTypes previousValue = this._DimPriceTypes.Entity;
				if (((previousValue != value) 
							|| (this._DimPriceTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimPriceTypes.Entity = null;
						previousValue.FactPrices.Remove(this);
					}
					this._DimPriceTypes.Entity = value;
					if ((value != null))
					{
						value.FactPrices.Add(this);
						this._PriceTypeID = value.ID;
					}
					else
					{
						this._PriceTypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimPriceTypes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactPrices", Storage="_DimUnits", ThisKey="UnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.FactPrices.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.FactPrices.Add(this);
						this._UnitID = value.ID;
					}
					else
					{
						this._UnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactPrices1", Storage="_DimUnits1", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits1
		{
			get
			{
				return this._DimUnits1.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits1.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits1.Entity = null;
						previousValue.FactPrices1.Remove(this);
					}
					this._DimUnits1.Entity = value;
					if ((value != null))
					{
						value.FactPrices1.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactPrices", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.FactPrices.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.FactPrices.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactPricesHistory")]
	public partial class FactPricesHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _GoodID;
		
		private System.Nullable<int> _DateKey;
		
		private System.Nullable<System.DateTime> _Date;
		
		private decimal _Price;
		
		private System.Nullable<long> _UnitID;
		
		private System.Nullable<long> _CurrencyID;
		
		private System.Nullable<long> _PriceTypeID;
		
		private System.Nullable<System.DateTime> _Period;
		
		private System.Data.Linq.Binary _RecorderTRef;
		
		private System.Data.Linq.Binary _RecorderRRef;
		
		private decimal _LineNum;
		
		private System.Data.Linq.Binary _GoodRef;
		
		private System.Data.Linq.Binary _UnitRef;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimCurrencies> _DimCurrencies;
		
		private EntityRef<DimDates> _DimDates;
		
		private EntityRef<DimPriceTypes> _DimPriceTypes;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimGoods> _DimGoods;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnUnitIDChanging(System.Nullable<long> value);
    partial void OnUnitIDChanged();
    partial void OnCurrencyIDChanging(System.Nullable<long> value);
    partial void OnCurrencyIDChanged();
    partial void OnPriceTypeIDChanging(System.Nullable<long> value);
    partial void OnPriceTypeIDChanged();
    partial void OnPeriodChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodChanged();
    partial void OnRecorderTRefChanging(System.Data.Linq.Binary value);
    partial void OnRecorderTRefChanged();
    partial void OnRecorderRRefChanging(System.Data.Linq.Binary value);
    partial void OnRecorderRRefChanged();
    partial void OnLineNumChanging(decimal value);
    partial void OnLineNumChanged();
    partial void OnGoodRefChanging(System.Data.Linq.Binary value);
    partial void OnGoodRefChanged();
    partial void OnUnitRefChanging(System.Data.Linq.Binary value);
    partial void OnUnitRefChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public FactPricesHistory()
		{
			this._DimCurrencies = default(EntityRef<DimCurrencies>);
			this._DimDates = default(EntityRef<DimDates>);
			this._DimPriceTypes = default(EntityRef<DimPriceTypes>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimGoods = default(EntityRef<DimGoods>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					if (this._DimDates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(15,2) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._DimCurrencies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceTypeID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> PriceTypeID
		{
			get
			{
				return this._PriceTypeID;
			}
			set
			{
				if ((this._PriceTypeID != value))
				{
					if (this._DimPriceTypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PriceTypeID = value;
					this.SendPropertyChanged("PriceTypeID");
					this.OnPriceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderTRef", DbType="Binary(4) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RecorderTRef
		{
			get
			{
				return this._RecorderTRef;
			}
			set
			{
				if ((this._RecorderTRef != value))
				{
					this.OnRecorderTRefChanging(value);
					this.SendPropertyChanging();
					this._RecorderTRef = value;
					this.SendPropertyChanged("RecorderTRef");
					this.OnRecorderTRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderRRef", DbType="Binary(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RecorderRRef
		{
			get
			{
				return this._RecorderRRef;
			}
			set
			{
				if ((this._RecorderRRef != value))
				{
					this.OnRecorderRRefChanging(value);
					this.SendPropertyChanging();
					this._RecorderRRef = value;
					this.SendPropertyChanged("RecorderRRef");
					this.OnRecorderRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNum", DbType="Decimal(9,0) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal LineNum
		{
			get
			{
				return this._LineNum;
			}
			set
			{
				if ((this._LineNum != value))
				{
					this.OnLineNumChanging(value);
					this.SendPropertyChanging();
					this._LineNum = value;
					this.SendPropertyChanged("LineNum");
					this.OnLineNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary GoodRef
		{
			get
			{
				return this._GoodRef;
			}
			set
			{
				if ((this._GoodRef != value))
				{
					this.OnGoodRefChanging(value);
					this.SendPropertyChanging();
					this._GoodRef = value;
					this.SendPropertyChanged("GoodRef");
					this.OnGoodRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary UnitRef
		{
			get
			{
				return this._UnitRef;
			}
			set
			{
				if ((this._UnitRef != value))
				{
					this.OnUnitRefChanging(value);
					this.SendPropertyChanging();
					this._UnitRef = value;
					this.SendPropertyChanged("UnitRef");
					this.OnUnitRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimCurrencies_FactPricesHistory", Storage="_DimCurrencies", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
		public DimCurrencies DimCurrencies
		{
			get
			{
				return this._DimCurrencies.Entity;
			}
			set
			{
				DimCurrencies previousValue = this._DimCurrencies.Entity;
				if (((previousValue != value) 
							|| (this._DimCurrencies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimCurrencies.Entity = null;
						previousValue.FactPricesHistory.Remove(this);
					}
					this._DimCurrencies.Entity = value;
					if ((value != null))
					{
						value.FactPricesHistory.Add(this);
						this._CurrencyID = value.ID;
					}
					else
					{
						this._CurrencyID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimCurrencies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactPricesHistory", Storage="_DimDates", ThisKey="DateKey", OtherKey="DateKey", IsForeignKey=true)]
		public DimDates DimDates
		{
			get
			{
				return this._DimDates.Entity;
			}
			set
			{
				DimDates previousValue = this._DimDates.Entity;
				if (((previousValue != value) 
							|| (this._DimDates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDates.Entity = null;
						previousValue.FactPricesHistory.Remove(this);
					}
					this._DimDates.Entity = value;
					if ((value != null))
					{
						value.FactPricesHistory.Add(this);
						this._DateKey = value.DateKey;
					}
					else
					{
						this._DateKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimDates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPriceTypes_FactPricesHistory", Storage="_DimPriceTypes", ThisKey="PriceTypeID", OtherKey="ID", IsForeignKey=true)]
		public DimPriceTypes DimPriceTypes
		{
			get
			{
				return this._DimPriceTypes.Entity;
			}
			set
			{
				DimPriceTypes previousValue = this._DimPriceTypes.Entity;
				if (((previousValue != value) 
							|| (this._DimPriceTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimPriceTypes.Entity = null;
						previousValue.FactPricesHistory.Remove(this);
					}
					this._DimPriceTypes.Entity = value;
					if ((value != null))
					{
						value.FactPricesHistory.Add(this);
						this._PriceTypeID = value.ID;
					}
					else
					{
						this._PriceTypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimPriceTypes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactPricesHistory", Storage="_DimUnits", ThisKey="UnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.FactPricesHistory.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.FactPricesHistory.Add(this);
						this._UnitID = value.ID;
					}
					else
					{
						this._UnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactPricesHistory", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.FactPricesHistory.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.FactPricesHistory.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimGoodAnalyticalKeys")]
	public partial class DimGoodAnalyticalKeys : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _GoodID;
		
		private System.Nullable<long> _WarehouseID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimWarehouses> _DimWarehouses;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnWarehouseIDChanging(System.Nullable<long> value);
    partial void OnWarehouseIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DimGoodAnalyticalKeys()
		{
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimWarehouses = default(EntityRef<DimWarehouses>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._DimWarehouses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DimGoodAnalyticalKeys", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.DimGoodAnalyticalKeys.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.DimGoodAnalyticalKeys.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_DimGoodAnalyticalKeys", Storage="_DimWarehouses", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses
		{
			get
			{
				return this._DimWarehouses.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses.Entity = null;
						previousValue.DimGoodAnalyticalKeys.Remove(this);
					}
					this._DimWarehouses.Entity = value;
					if ((value != null))
					{
						value.DimGoodAnalyticalKeys.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimSpecifications")]
	public partial class DimSpecifications : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Code;
		
		private string _Name;
		
		private string _Status;
		
		private System.Nullable<System.DateTime> _FromDate;
		
		private System.Nullable<System.DateTime> _ToDate;
		
		private System.Nullable<long> _UserID;
		
		private string _Description;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<DocProductionCosts> _DocProductionCosts;
		
		private EntitySet<DocProductionLines> _DocProductionLines;
		
		private EntitySet<FactMaterialsInProduction> _FactMaterialsInProductions;
		
		private EntitySet<FactProduction> _FactProductions;
		
		private EntityRef<DimPeople> _DimPeople;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnFromDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(System.Nullable<System.DateTime> value);
    partial void OnToDateChanged();
    partial void OnUserIDChanging(System.Nullable<long> value);
    partial void OnUserIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DimSpecifications()
		{
			this._DocProductionCosts = new EntitySet<DocProductionCosts>(new Action<DocProductionCosts>(this.attach_DocProductionCosts), new Action<DocProductionCosts>(this.detach_DocProductionCosts));
			this._DocProductionLines = new EntitySet<DocProductionLines>(new Action<DocProductionLines>(this.attach_DocProductionLines), new Action<DocProductionLines>(this.detach_DocProductionLines));
			this._FactMaterialsInProductions = new EntitySet<FactMaterialsInProduction>(new Action<FactMaterialsInProduction>(this.attach_FactMaterialsInProductions), new Action<FactMaterialsInProduction>(this.detach_FactMaterialsInProductions));
			this._FactProductions = new EntitySet<FactProduction>(new Action<FactProduction>(this.attach_FactProductions), new Action<FactProduction>(this.detach_FactProductions));
			this._DimPeople = default(EntityRef<DimPeople>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NChar(12)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FromDate
		{
			get
			{
				return this._FromDate;
			}
			set
			{
				if ((this._FromDate != value))
				{
					this.OnFromDateChanging(value);
					this.SendPropertyChanging();
					this._FromDate = value;
					this.SendPropertyChanged("FromDate");
					this.OnFromDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ToDate
		{
			get
			{
				return this._ToDate;
			}
			set
			{
				if ((this._ToDate != value))
				{
					this.OnToDateChanging(value);
					this.SendPropertyChanging();
					this._ToDate = value;
					this.SendPropertyChanged("ToDate");
					this.OnToDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt")]
		public System.Nullable<long> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._DimPeople.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimSpecifications_DocProductionCosts", Storage="_DocProductionCosts", ThisKey="ID", OtherKey="SpecificationID")]
		public EntitySet<DocProductionCosts> DocProductionCosts
		{
			get
			{
				return this._DocProductionCosts;
			}
			set
			{
				this._DocProductionCosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimSpecifications_DocProductionLines", Storage="_DocProductionLines", ThisKey="ID", OtherKey="SpecificationID")]
		public EntitySet<DocProductionLines> DocProductionLines
		{
			get
			{
				return this._DocProductionLines;
			}
			set
			{
				this._DocProductionLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimSpecifications_FactMaterialsInProduction", Storage="_FactMaterialsInProductions", ThisKey="ID", OtherKey="SpecID")]
		public EntitySet<FactMaterialsInProduction> FactMaterialsInProductions
		{
			get
			{
				return this._FactMaterialsInProductions;
			}
			set
			{
				this._FactMaterialsInProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimSpecifications_FactProduction", Storage="_FactProductions", ThisKey="ID", OtherKey="SpecificationID")]
		public EntitySet<FactProduction> FactProductions
		{
			get
			{
				return this._FactProductions;
			}
			set
			{
				this._FactProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPeople_DimSpecifications", Storage="_DimPeople", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public DimPeople DimPeople
		{
			get
			{
				return this._DimPeople.Entity;
			}
			set
			{
				DimPeople previousValue = this._DimPeople.Entity;
				if (((previousValue != value) 
							|| (this._DimPeople.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimPeople.Entity = null;
						previousValue.DimSpecifications.Remove(this);
					}
					this._DimPeople.Entity = value;
					if ((value != null))
					{
						value.DimSpecifications.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimPeople");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocProductionCosts(DocProductionCosts entity)
		{
			this.SendPropertyChanging();
			entity.DimSpecifications = this;
		}
		
		private void detach_DocProductionCosts(DocProductionCosts entity)
		{
			this.SendPropertyChanging();
			entity.DimSpecifications = null;
		}
		
		private void attach_DocProductionLines(DocProductionLines entity)
		{
			this.SendPropertyChanging();
			entity.DimSpecifications = this;
		}
		
		private void detach_DocProductionLines(DocProductionLines entity)
		{
			this.SendPropertyChanging();
			entity.DimSpecifications = null;
		}
		
		private void attach_FactMaterialsInProductions(FactMaterialsInProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimSpecifications = this;
		}
		
		private void detach_FactMaterialsInProductions(FactMaterialsInProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimSpecifications = null;
		}
		
		private void attach_FactProductions(FactProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimSpecifications = this;
		}
		
		private void detach_FactProductions(FactProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimSpecifications = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactPOSLines")]
	public partial class FactPOSLines : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _DocID;
		
		private System.Nullable<long> _GoodID;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Nullable<decimal> _QtyPcs;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<decimal> _AmountTax;
		
		private System.Nullable<decimal> _DiscountAutoPercent;
		
		private System.Nullable<decimal> _DiscountAutoAmount;
		
		private System.Nullable<decimal> _DiscountManualPercent;
		
		private System.Nullable<decimal> _DiscountManualAmount;
		
		private System.Nullable<long> _CasherID;
		
		private string _Barcode;
		
		private System.Data.Linq.Binary _Document898_IDRRef;
		
		private System.Data.Linq.Binary _KeyField;
		
		private System.Nullable<decimal> _LineNum;
		
		private System.Nullable<bool> _Refund;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimPeople> _DimPeople;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<FactPOS> _FactPOS;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDocIDChanging(System.Nullable<long> value);
    partial void OnDocIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnQtyPcsChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnAmountTaxChanging(System.Nullable<decimal> value);
    partial void OnAmountTaxChanged();
    partial void OnDiscountAutoPercentChanging(System.Nullable<decimal> value);
    partial void OnDiscountAutoPercentChanged();
    partial void OnDiscountAutoAmountChanging(System.Nullable<decimal> value);
    partial void OnDiscountAutoAmountChanged();
    partial void OnDiscountManualPercentChanging(System.Nullable<decimal> value);
    partial void OnDiscountManualPercentChanged();
    partial void OnDiscountManualAmountChanging(System.Nullable<decimal> value);
    partial void OnDiscountManualAmountChanged();
    partial void OnCasherIDChanging(System.Nullable<long> value);
    partial void OnCasherIDChanged();
    partial void OnBarcodeChanging(string value);
    partial void OnBarcodeChanged();
    partial void OnDocument898_IDRRefChanging(System.Data.Linq.Binary value);
    partial void OnDocument898_IDRRefChanged();
    partial void OnKeyFieldChanging(System.Data.Linq.Binary value);
    partial void OnKeyFieldChanged();
    partial void OnLineNumChanging(System.Nullable<decimal> value);
    partial void OnLineNumChanged();
    partial void OnRefundChanging(System.Nullable<bool> value);
    partial void OnRefundChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public FactPOSLines()
		{
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimPeople = default(EntityRef<DimPeople>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._FactPOS = default(EntityRef<FactPOS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					if (this._FactPOS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPcs
		{
			get
			{
				return this._QtyPcs;
			}
			set
			{
				if ((this._QtyPcs != value))
				{
					this.OnQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._QtyPcs = value;
					this.SendPropertyChanged("QtyPcs");
					this.OnQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountTax", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> AmountTax
		{
			get
			{
				return this._AmountTax;
			}
			set
			{
				if ((this._AmountTax != value))
				{
					this.OnAmountTaxChanging(value);
					this.SendPropertyChanging();
					this._AmountTax = value;
					this.SendPropertyChanged("AmountTax");
					this.OnAmountTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountAutoPercent", DbType="Decimal(5,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> DiscountAutoPercent
		{
			get
			{
				return this._DiscountAutoPercent;
			}
			set
			{
				if ((this._DiscountAutoPercent != value))
				{
					this.OnDiscountAutoPercentChanging(value);
					this.SendPropertyChanging();
					this._DiscountAutoPercent = value;
					this.SendPropertyChanged("DiscountAutoPercent");
					this.OnDiscountAutoPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountAutoAmount", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> DiscountAutoAmount
		{
			get
			{
				return this._DiscountAutoAmount;
			}
			set
			{
				if ((this._DiscountAutoAmount != value))
				{
					this.OnDiscountAutoAmountChanging(value);
					this.SendPropertyChanging();
					this._DiscountAutoAmount = value;
					this.SendPropertyChanged("DiscountAutoAmount");
					this.OnDiscountAutoAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountManualPercent", DbType="Decimal(5,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> DiscountManualPercent
		{
			get
			{
				return this._DiscountManualPercent;
			}
			set
			{
				if ((this._DiscountManualPercent != value))
				{
					this.OnDiscountManualPercentChanging(value);
					this.SendPropertyChanging();
					this._DiscountManualPercent = value;
					this.SendPropertyChanged("DiscountManualPercent");
					this.OnDiscountManualPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountManualAmount", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> DiscountManualAmount
		{
			get
			{
				return this._DiscountManualAmount;
			}
			set
			{
				if ((this._DiscountManualAmount != value))
				{
					this.OnDiscountManualAmountChanging(value);
					this.SendPropertyChanging();
					this._DiscountManualAmount = value;
					this.SendPropertyChanged("DiscountManualAmount");
					this.OnDiscountManualAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CasherID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> CasherID
		{
			get
			{
				return this._CasherID;
			}
			set
			{
				if ((this._CasherID != value))
				{
					if (this._DimPeople.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCasherIDChanging(value);
					this.SendPropertyChanging();
					this._CasherID = value;
					this.SendPropertyChanged("CasherID");
					this.OnCasherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Barcode", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string Barcode
		{
			get
			{
				return this._Barcode;
			}
			set
			{
				if ((this._Barcode != value))
				{
					this.OnBarcodeChanging(value);
					this.SendPropertyChanging();
					this._Barcode = value;
					this.SendPropertyChanged("Barcode");
					this.OnBarcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Document898_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Document898_IDRRef
		{
			get
			{
				return this._Document898_IDRRef;
			}
			set
			{
				if ((this._Document898_IDRRef != value))
				{
					this.OnDocument898_IDRRefChanging(value);
					this.SendPropertyChanging();
					this._Document898_IDRRef = value;
					this.SendPropertyChanged("Document898_IDRRef");
					this.OnDocument898_IDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyField", DbType="Binary(4)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary KeyField
		{
			get
			{
				return this._KeyField;
			}
			set
			{
				if ((this._KeyField != value))
				{
					this.OnKeyFieldChanging(value);
					this.SendPropertyChanging();
					this._KeyField = value;
					this.SendPropertyChanged("KeyField");
					this.OnKeyFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNum", DbType="Decimal(5,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> LineNum
		{
			get
			{
				return this._LineNum;
			}
			set
			{
				if ((this._LineNum != value))
				{
					this.OnLineNumChanging(value);
					this.SendPropertyChanging();
					this._LineNum = value;
					this.SendPropertyChanged("LineNum");
					this.OnLineNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Refund", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Refund
		{
			get
			{
				return this._Refund;
			}
			set
			{
				if ((this._Refund != value))
				{
					this.OnRefundChanging(value);
					this.SendPropertyChanging();
					this._Refund = value;
					this.SendPropertyChanged("Refund");
					this.OnRefundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactPOSLines", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.FactPOSLines.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.FactPOSLines.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPeople_FactPOSLines", Storage="_DimPeople", ThisKey="CasherID", OtherKey="ID", IsForeignKey=true)]
		public DimPeople DimPeople
		{
			get
			{
				return this._DimPeople.Entity;
			}
			set
			{
				DimPeople previousValue = this._DimPeople.Entity;
				if (((previousValue != value) 
							|| (this._DimPeople.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimPeople.Entity = null;
						previousValue.FactPOSLines.Remove(this);
					}
					this._DimPeople.Entity = value;
					if ((value != null))
					{
						value.FactPOSLines.Add(this);
						this._CasherID = value.ID;
					}
					else
					{
						this._CasherID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimPeople");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactPOSLines", Storage="_DimUnits", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.FactPOSLines.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.FactPOSLines.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FactPOS_FactPOSLines", Storage="_FactPOS", ThisKey="DocID", OtherKey="ID", IsForeignKey=true)]
		public FactPOS FactPOS
		{
			get
			{
				return this._FactPOS.Entity;
			}
			set
			{
				FactPOS previousValue = this._FactPOS.Entity;
				if (((previousValue != value) 
							|| (this._FactPOS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactPOS.Entity = null;
						previousValue.FactPOSLines.Remove(this);
					}
					this._FactPOS.Entity = value;
					if ((value != null))
					{
						value.FactPOSLines.Add(this);
						this._DocID = value.ID;
					}
					else
					{
						this._DocID = default(Nullable<long>);
					}
					this.SendPropertyChanged("FactPOS");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimUnitConversion")]
	public partial class DimUnitConversion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _FromUnitID;
		
		private System.Nullable<decimal> _FromQty;
		
		private System.Nullable<long> _ToUnitID;
		
		private System.Nullable<decimal> _ToQty;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimUnits> _DimUnits1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnFromUnitIDChanging(System.Nullable<long> value);
    partial void OnFromUnitIDChanged();
    partial void OnFromQtyChanging(System.Nullable<decimal> value);
    partial void OnFromQtyChanged();
    partial void OnToUnitIDChanging(System.Nullable<long> value);
    partial void OnToUnitIDChanged();
    partial void OnToQtyChanging(System.Nullable<decimal> value);
    partial void OnToQtyChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public DimUnitConversion()
		{
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimUnits1 = default(EntityRef<DimUnits>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> FromUnitID
		{
			get
			{
				return this._FromUnitID;
			}
			set
			{
				if ((this._FromUnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromUnitIDChanging(value);
					this.SendPropertyChanging();
					this._FromUnitID = value;
					this.SendPropertyChanged("FromUnitID");
					this.OnFromUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FromQty
		{
			get
			{
				return this._FromQty;
			}
			set
			{
				if ((this._FromQty != value))
				{
					this.OnFromQtyChanging(value);
					this.SendPropertyChanging();
					this._FromQty = value;
					this.SendPropertyChanged("FromQty");
					this.OnFromQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> ToUnitID
		{
			get
			{
				return this._ToUnitID;
			}
			set
			{
				if ((this._ToUnitID != value))
				{
					if (this._DimUnits1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToUnitIDChanging(value);
					this.SendPropertyChanging();
					this._ToUnitID = value;
					this.SendPropertyChanged("ToUnitID");
					this.OnToUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ToQty
		{
			get
			{
				return this._ToQty;
			}
			set
			{
				if ((this._ToQty != value))
				{
					this.OnToQtyChanging(value);
					this.SendPropertyChanging();
					this._ToQty = value;
					this.SendPropertyChanged("ToQty");
					this.OnToQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DimUnitConversion", Storage="_DimUnits", ThisKey="FromUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.DimUnitConversion.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.DimUnitConversion.Add(this);
						this._FromUnitID = value.ID;
					}
					else
					{
						this._FromUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DimUnitConversion1", Storage="_DimUnits1", ThisKey="ToUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits1
		{
			get
			{
				return this._DimUnits1.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits1.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits1.Entity = null;
						previousValue.DimUnitConversion1.Remove(this);
					}
					this._DimUnits1.Entity = value;
					if ((value != null))
					{
						value.DimUnitConversion1.Add(this);
						this._ToUnitID = value.ID;
					}
					else
					{
						this._ToUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactRemains")]
	public partial class FactRemains : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _WarehouseID;
		
		private System.Nullable<long> _DepartmentID;
		
		private System.Nullable<long> _GoodID;
		
		private string _ConsignNumber;
		
		private System.Nullable<System.DateTime> _RemainsDate;
		
		private System.Nullable<int> _DateKey;
		
		private System.Nullable<decimal> _OnStockQty;
		
		private System.Nullable<decimal> _InOrdersQty;
		
		private System.Nullable<decimal> _QtyPcs;
		
		private System.Nullable<decimal> _QtyGram;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimDates> _DimDates;
		
		private EntityRef<DimDepartments> _DimDepartments;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimWarehouses> _DimWarehouses;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnWarehouseIDChanging(System.Nullable<long> value);
    partial void OnWarehouseIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<long> value);
    partial void OnDepartmentIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnConsignNumberChanging(string value);
    partial void OnConsignNumberChanged();
    partial void OnRemainsDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRemainsDateChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnOnStockQtyChanging(System.Nullable<decimal> value);
    partial void OnOnStockQtyChanged();
    partial void OnInOrdersQtyChanging(System.Nullable<decimal> value);
    partial void OnInOrdersQtyChanged();
    partial void OnQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnQtyPcsChanged();
    partial void OnQtyGramChanging(System.Nullable<decimal> value);
    partial void OnQtyGramChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public FactRemains()
		{
			this._DimDates = default(EntityRef<DimDates>);
			this._DimDepartments = default(EntityRef<DimDepartments>);
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimWarehouses = default(EntityRef<DimWarehouses>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._DimWarehouses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._DimDepartments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsignNumber", DbType="NVarChar(4)", UpdateCheck=UpdateCheck.Never)]
		public string ConsignNumber
		{
			get
			{
				return this._ConsignNumber;
			}
			set
			{
				if ((this._ConsignNumber != value))
				{
					this.OnConsignNumberChanging(value);
					this.SendPropertyChanging();
					this._ConsignNumber = value;
					this.SendPropertyChanged("ConsignNumber");
					this.OnConsignNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemainsDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> RemainsDate
		{
			get
			{
				return this._RemainsDate;
			}
			set
			{
				if ((this._RemainsDate != value))
				{
					this.OnRemainsDateChanging(value);
					this.SendPropertyChanging();
					this._RemainsDate = value;
					this.SendPropertyChanged("RemainsDate");
					this.OnRemainsDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					if (this._DimDates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnStockQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> OnStockQty
		{
			get
			{
				return this._OnStockQty;
			}
			set
			{
				if ((this._OnStockQty != value))
				{
					this.OnOnStockQtyChanging(value);
					this.SendPropertyChanging();
					this._OnStockQty = value;
					this.SendPropertyChanged("OnStockQty");
					this.OnOnStockQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InOrdersQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> InOrdersQty
		{
			get
			{
				return this._InOrdersQty;
			}
			set
			{
				if ((this._InOrdersQty != value))
				{
					this.OnInOrdersQtyChanging(value);
					this.SendPropertyChanging();
					this._InOrdersQty = value;
					this.SendPropertyChanged("InOrdersQty");
					this.OnInOrdersQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPcs", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPcs
		{
			get
			{
				return this._QtyPcs;
			}
			set
			{
				if ((this._QtyPcs != value))
				{
					this.OnQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._QtyPcs = value;
					this.SendPropertyChanged("QtyPcs");
					this.OnQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyGram", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyGram
		{
			get
			{
				return this._QtyGram;
			}
			set
			{
				if ((this._QtyGram != value))
				{
					this.OnQtyGramChanging(value);
					this.SendPropertyChanging();
					this._QtyGram = value;
					this.SendPropertyChanged("QtyGram");
					this.OnQtyGramChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactRemains", Storage="_DimDates", ThisKey="DateKey", OtherKey="DateKey", IsForeignKey=true)]
		public DimDates DimDates
		{
			get
			{
				return this._DimDates.Entity;
			}
			set
			{
				DimDates previousValue = this._DimDates.Entity;
				if (((previousValue != value) 
							|| (this._DimDates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDates.Entity = null;
						previousValue.FactRemains.Remove(this);
					}
					this._DimDates.Entity = value;
					if ((value != null))
					{
						value.FactRemains.Add(this);
						this._DateKey = value.DateKey;
					}
					else
					{
						this._DateKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimDates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_FactRemains", Storage="_DimDepartments", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments
		{
			get
			{
				return this._DimDepartments.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments.Entity = null;
						previousValue.FactRemains.Remove(this);
					}
					this._DimDepartments.Entity = value;
					if ((value != null))
					{
						value.FactRemains.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactRemains", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.FactRemains.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.FactRemains.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactRemains", Storage="_DimUnits", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.FactRemains.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.FactRemains.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactRemains", Storage="_DimWarehouses", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses
		{
			get
			{
				return this._DimWarehouses.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses.Entity = null;
						previousValue.FactRemains.Remove(this);
					}
					this._DimWarehouses.Entity = value;
					if ((value != null))
					{
						value.FactRemains.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactConsignmentMoves")]
	public partial class FactConsignmentMoves : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _ConsignmentID;
		
		private string _ConsignNumber;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _DateKey;
		
		private System.Nullable<long> _WarehouseID;
		
		private System.Nullable<long> _DepartmentID;
		
		private System.Nullable<long> _RawGoodID;
		
		private System.Nullable<decimal> _BaseToProductionQty;
		
		private System.Nullable<long> _RawBaseUnitID;
		
		private System.Nullable<decimal> _ToProductionQty;
		
		private System.Nullable<long> _RawUnitID;
		
		private System.Nullable<decimal> _ToProductionQtyPcs;
		
		private System.Nullable<decimal> _RemainQty;
		
		private System.Nullable<decimal> _RemainQtyPcs;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimDates> _DimDates;
		
		private EntityRef<DimDepartments> _DimDepartments;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimUnits> _DimUnits1;
		
		private EntityRef<DimWarehouses> _DimWarehouses;
		
		private EntityRef<FactConsignmentRemains> _FactConsignmentRemains;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnConsignmentIDChanging(System.Nullable<long> value);
    partial void OnConsignmentIDChanged();
    partial void OnConsignNumberChanging(string value);
    partial void OnConsignNumberChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnWarehouseIDChanging(System.Nullable<long> value);
    partial void OnWarehouseIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<long> value);
    partial void OnDepartmentIDChanged();
    partial void OnRawGoodIDChanging(System.Nullable<long> value);
    partial void OnRawGoodIDChanged();
    partial void OnBaseToProductionQtyChanging(System.Nullable<decimal> value);
    partial void OnBaseToProductionQtyChanged();
    partial void OnRawBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnRawBaseUnitIDChanged();
    partial void OnToProductionQtyChanging(System.Nullable<decimal> value);
    partial void OnToProductionQtyChanged();
    partial void OnRawUnitIDChanging(System.Nullable<long> value);
    partial void OnRawUnitIDChanged();
    partial void OnToProductionQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnToProductionQtyPcsChanged();
    partial void OnRemainQtyChanging(System.Nullable<decimal> value);
    partial void OnRemainQtyChanged();
    partial void OnRemainQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnRemainQtyPcsChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public FactConsignmentMoves()
		{
			this._DimDates = default(EntityRef<DimDates>);
			this._DimDepartments = default(EntityRef<DimDepartments>);
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimUnits1 = default(EntityRef<DimUnits>);
			this._DimWarehouses = default(EntityRef<DimWarehouses>);
			this._FactConsignmentRemains = default(EntityRef<FactConsignmentRemains>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsignmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> ConsignmentID
		{
			get
			{
				return this._ConsignmentID;
			}
			set
			{
				if ((this._ConsignmentID != value))
				{
					if (this._FactConsignmentRemains.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConsignmentIDChanging(value);
					this.SendPropertyChanging();
					this._ConsignmentID = value;
					this.SendPropertyChanged("ConsignmentID");
					this.OnConsignmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsignNumber", DbType="NVarChar(4)", UpdateCheck=UpdateCheck.Never)]
		public string ConsignNumber
		{
			get
			{
				return this._ConsignNumber;
			}
			set
			{
				if ((this._ConsignNumber != value))
				{
					this.OnConsignNumberChanging(value);
					this.SendPropertyChanging();
					this._ConsignNumber = value;
					this.SendPropertyChanged("ConsignNumber");
					this.OnConsignNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					if (this._DimDates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._DimWarehouses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._DimDepartments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawGoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> RawGoodID
		{
			get
			{
				return this._RawGoodID;
			}
			set
			{
				if ((this._RawGoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRawGoodIDChanging(value);
					this.SendPropertyChanging();
					this._RawGoodID = value;
					this.SendPropertyChanged("RawGoodID");
					this.OnRawGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseToProductionQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BaseToProductionQty
		{
			get
			{
				return this._BaseToProductionQty;
			}
			set
			{
				if ((this._BaseToProductionQty != value))
				{
					this.OnBaseToProductionQtyChanging(value);
					this.SendPropertyChanging();
					this._BaseToProductionQty = value;
					this.SendPropertyChanged("BaseToProductionQty");
					this.OnBaseToProductionQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawBaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> RawBaseUnitID
		{
			get
			{
				return this._RawBaseUnitID;
			}
			set
			{
				if ((this._RawBaseUnitID != value))
				{
					if (this._DimUnits1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRawBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._RawBaseUnitID = value;
					this.SendPropertyChanged("RawBaseUnitID");
					this.OnRawBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToProductionQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ToProductionQty
		{
			get
			{
				return this._ToProductionQty;
			}
			set
			{
				if ((this._ToProductionQty != value))
				{
					this.OnToProductionQtyChanging(value);
					this.SendPropertyChanging();
					this._ToProductionQty = value;
					this.SendPropertyChanged("ToProductionQty");
					this.OnToProductionQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> RawUnitID
		{
			get
			{
				return this._RawUnitID;
			}
			set
			{
				if ((this._RawUnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRawUnitIDChanging(value);
					this.SendPropertyChanging();
					this._RawUnitID = value;
					this.SendPropertyChanged("RawUnitID");
					this.OnRawUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToProductionQtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ToProductionQtyPcs
		{
			get
			{
				return this._ToProductionQtyPcs;
			}
			set
			{
				if ((this._ToProductionQtyPcs != value))
				{
					this.OnToProductionQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._ToProductionQtyPcs = value;
					this.SendPropertyChanged("ToProductionQtyPcs");
					this.OnToProductionQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemainQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RemainQty
		{
			get
			{
				return this._RemainQty;
			}
			set
			{
				if ((this._RemainQty != value))
				{
					this.OnRemainQtyChanging(value);
					this.SendPropertyChanging();
					this._RemainQty = value;
					this.SendPropertyChanged("RemainQty");
					this.OnRemainQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemainQtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RemainQtyPcs
		{
			get
			{
				return this._RemainQtyPcs;
			}
			set
			{
				if ((this._RemainQtyPcs != value))
				{
					this.OnRemainQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._RemainQtyPcs = value;
					this.SendPropertyChanged("RemainQtyPcs");
					this.OnRemainQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactConsignmentMoves", Storage="_DimDates", ThisKey="DateKey", OtherKey="DateKey", IsForeignKey=true)]
		public DimDates DimDates
		{
			get
			{
				return this._DimDates.Entity;
			}
			set
			{
				DimDates previousValue = this._DimDates.Entity;
				if (((previousValue != value) 
							|| (this._DimDates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDates.Entity = null;
						previousValue.FactConsignmentMoves.Remove(this);
					}
					this._DimDates.Entity = value;
					if ((value != null))
					{
						value.FactConsignmentMoves.Add(this);
						this._DateKey = value.DateKey;
					}
					else
					{
						this._DateKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimDates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_FactConsignmentMoves", Storage="_DimDepartments", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments
		{
			get
			{
				return this._DimDepartments.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments.Entity = null;
						previousValue.FactConsignmentMoves.Remove(this);
					}
					this._DimDepartments.Entity = value;
					if ((value != null))
					{
						value.FactConsignmentMoves.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactConsignmentMoves", Storage="_DimGoods", ThisKey="RawGoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.FactConsignmentMoves.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.FactConsignmentMoves.Add(this);
						this._RawGoodID = value.ID;
					}
					else
					{
						this._RawGoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactConsignmentMoves", Storage="_DimUnits", ThisKey="RawUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.FactConsignmentMoves.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.FactConsignmentMoves.Add(this);
						this._RawUnitID = value.ID;
					}
					else
					{
						this._RawUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactConsignmentMoves1", Storage="_DimUnits1", ThisKey="RawBaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits1
		{
			get
			{
				return this._DimUnits1.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits1.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits1.Entity = null;
						previousValue.FactConsignmentMoves1.Remove(this);
					}
					this._DimUnits1.Entity = value;
					if ((value != null))
					{
						value.FactConsignmentMoves1.Add(this);
						this._RawBaseUnitID = value.ID;
					}
					else
					{
						this._RawBaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactConsignmentMoves", Storage="_DimWarehouses", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses
		{
			get
			{
				return this._DimWarehouses.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses.Entity = null;
						previousValue.FactConsignmentMoves.Remove(this);
					}
					this._DimWarehouses.Entity = value;
					if ((value != null))
					{
						value.FactConsignmentMoves.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FactConsignmentRemains_FactConsignmentMoves", Storage="_FactConsignmentRemains", ThisKey="ConsignmentID", OtherKey="ID", IsForeignKey=true)]
		public FactConsignmentRemains FactConsignmentRemains
		{
			get
			{
				return this._FactConsignmentRemains.Entity;
			}
			set
			{
				FactConsignmentRemains previousValue = this._FactConsignmentRemains.Entity;
				if (((previousValue != value) 
							|| (this._FactConsignmentRemains.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactConsignmentRemains.Entity = null;
						previousValue.FactConsignmentMoves.Remove(this);
					}
					this._FactConsignmentRemains.Entity = value;
					if ((value != null))
					{
						value.FactConsignmentMoves.Add(this);
						this._ConsignmentID = value.ID;
					}
					else
					{
						this._ConsignmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("FactConsignmentRemains");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactConsignmentRemains")]
	public partial class FactConsignmentRemains : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _DateKey;
		
		private string _ConsignNumber;
		
		private System.Nullable<long> _FromWarehouseID;
		
		private System.Nullable<long> _ToWarehouseID;
		
		private System.Nullable<long> _GoodID;
		
		private System.Nullable<decimal> _InitQty;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Nullable<decimal> _InitQtyPcs;
		
		private System.Nullable<decimal> _RemainQty;
		
		private System.Nullable<decimal> _RemainQtyPcs;
		
		private System.Nullable<decimal> _BackQty;
		
		private System.Nullable<decimal> _BackQtyPcs;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<FactConsignmentMoves> _FactConsignmentMoves;
		
		private EntitySet<FactProductionTree> _FactProductionTree;
		
		private EntityRef<DimDates> _DimDates;
		
		private EntityRef<DimWarehouses> _DimWarehouses;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimWarehouses> _DimWarehouses1;
		
		private EntityRef<DimUnits> _DimUnits;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnConsignNumberChanging(string value);
    partial void OnConsignNumberChanged();
    partial void OnFromWarehouseIDChanging(System.Nullable<long> value);
    partial void OnFromWarehouseIDChanged();
    partial void OnToWarehouseIDChanging(System.Nullable<long> value);
    partial void OnToWarehouseIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnInitQtyChanging(System.Nullable<decimal> value);
    partial void OnInitQtyChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnInitQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnInitQtyPcsChanged();
    partial void OnRemainQtyChanging(System.Nullable<decimal> value);
    partial void OnRemainQtyChanged();
    partial void OnRemainQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnRemainQtyPcsChanged();
    partial void OnBackQtyChanging(System.Nullable<decimal> value);
    partial void OnBackQtyChanged();
    partial void OnBackQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnBackQtyPcsChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public FactConsignmentRemains()
		{
			this._FactConsignmentMoves = new EntitySet<FactConsignmentMoves>(new Action<FactConsignmentMoves>(this.attach_FactConsignmentMoves), new Action<FactConsignmentMoves>(this.detach_FactConsignmentMoves));
			this._FactProductionTree = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTree), new Action<FactProductionTree>(this.detach_FactProductionTree));
			this._DimDates = default(EntityRef<DimDates>);
			this._DimWarehouses = default(EntityRef<DimWarehouses>);
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimWarehouses1 = default(EntityRef<DimWarehouses>);
			this._DimUnits = default(EntityRef<DimUnits>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					if (this._DimDates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsignNumber", DbType="NVarChar(4)", UpdateCheck=UpdateCheck.Never)]
		public string ConsignNumber
		{
			get
			{
				return this._ConsignNumber;
			}
			set
			{
				if ((this._ConsignNumber != value))
				{
					this.OnConsignNumberChanging(value);
					this.SendPropertyChanging();
					this._ConsignNumber = value;
					this.SendPropertyChanged("ConsignNumber");
					this.OnConsignNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromWarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> FromWarehouseID
		{
			get
			{
				return this._FromWarehouseID;
			}
			set
			{
				if ((this._FromWarehouseID != value))
				{
					if (this._DimWarehouses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._FromWarehouseID = value;
					this.SendPropertyChanged("FromWarehouseID");
					this.OnFromWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToWarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> ToWarehouseID
		{
			get
			{
				return this._ToWarehouseID;
			}
			set
			{
				if ((this._ToWarehouseID != value))
				{
					if (this._DimWarehouses1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._ToWarehouseID = value;
					this.SendPropertyChanged("ToWarehouseID");
					this.OnToWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> InitQty
		{
			get
			{
				return this._InitQty;
			}
			set
			{
				if ((this._InitQty != value))
				{
					this.OnInitQtyChanging(value);
					this.SendPropertyChanging();
					this._InitQty = value;
					this.SendPropertyChanged("InitQty");
					this.OnInitQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitQtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> InitQtyPcs
		{
			get
			{
				return this._InitQtyPcs;
			}
			set
			{
				if ((this._InitQtyPcs != value))
				{
					this.OnInitQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._InitQtyPcs = value;
					this.SendPropertyChanged("InitQtyPcs");
					this.OnInitQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemainQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RemainQty
		{
			get
			{
				return this._RemainQty;
			}
			set
			{
				if ((this._RemainQty != value))
				{
					this.OnRemainQtyChanging(value);
					this.SendPropertyChanging();
					this._RemainQty = value;
					this.SendPropertyChanged("RemainQty");
					this.OnRemainQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemainQtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RemainQtyPcs
		{
			get
			{
				return this._RemainQtyPcs;
			}
			set
			{
				if ((this._RemainQtyPcs != value))
				{
					this.OnRemainQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._RemainQtyPcs = value;
					this.SendPropertyChanged("RemainQtyPcs");
					this.OnRemainQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BackQty
		{
			get
			{
				return this._BackQty;
			}
			set
			{
				if ((this._BackQty != value))
				{
					this.OnBackQtyChanging(value);
					this.SendPropertyChanging();
					this._BackQty = value;
					this.SendPropertyChanged("BackQty");
					this.OnBackQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackQtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BackQtyPcs
		{
			get
			{
				return this._BackQtyPcs;
			}
			set
			{
				if ((this._BackQtyPcs != value))
				{
					this.OnBackQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._BackQtyPcs = value;
					this.SendPropertyChanged("BackQtyPcs");
					this.OnBackQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FactConsignmentRemains_FactConsignmentMoves", Storage="_FactConsignmentMoves", ThisKey="ID", OtherKey="ConsignmentID")]
		public EntitySet<FactConsignmentMoves> FactConsignmentMoves
		{
			get
			{
				return this._FactConsignmentMoves;
			}
			set
			{
				this._FactConsignmentMoves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FactConsignmentRemains_FactProductionTree", Storage="_FactProductionTree", ThisKey="ID", OtherKey="ConsignmentID")]
		public EntitySet<FactProductionTree> FactProductionTree
		{
			get
			{
				return this._FactProductionTree;
			}
			set
			{
				this._FactProductionTree.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactConsignmentRemains", Storage="_DimDates", ThisKey="DateKey", OtherKey="DateKey", IsForeignKey=true)]
		public DimDates DimDates
		{
			get
			{
				return this._DimDates.Entity;
			}
			set
			{
				DimDates previousValue = this._DimDates.Entity;
				if (((previousValue != value) 
							|| (this._DimDates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDates.Entity = null;
						previousValue.FactConsignmentRemains.Remove(this);
					}
					this._DimDates.Entity = value;
					if ((value != null))
					{
						value.FactConsignmentRemains.Add(this);
						this._DateKey = value.DateKey;
					}
					else
					{
						this._DateKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimDates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactConsignmentRemains", Storage="_DimWarehouses", ThisKey="FromWarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses
		{
			get
			{
				return this._DimWarehouses.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses.Entity = null;
						previousValue.FactConsignmentRemains.Remove(this);
					}
					this._DimWarehouses.Entity = value;
					if ((value != null))
					{
						value.FactConsignmentRemains.Add(this);
						this._FromWarehouseID = value.ID;
					}
					else
					{
						this._FromWarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactConsignmentRemains", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.FactConsignmentRemains.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.FactConsignmentRemains.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactConsignmentRemains1", Storage="_DimWarehouses1", ThisKey="ToWarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses1
		{
			get
			{
				return this._DimWarehouses1.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses1.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses1.Entity = null;
						previousValue.FactConsignmentRemains1.Remove(this);
					}
					this._DimWarehouses1.Entity = value;
					if ((value != null))
					{
						value.FactConsignmentRemains1.Add(this);
						this._ToWarehouseID = value.ID;
					}
					else
					{
						this._ToWarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactConsignmentRemains", Storage="_DimUnits", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.FactConsignmentRemains.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.FactConsignmentRemains.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactConsignmentMoves(FactConsignmentMoves entity)
		{
			this.SendPropertyChanging();
			entity.FactConsignmentRemains = this;
		}
		
		private void detach_FactConsignmentMoves(FactConsignmentMoves entity)
		{
			this.SendPropertyChanging();
			entity.FactConsignmentRemains = null;
		}
		
		private void attach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.FactConsignmentRemains = this;
		}
		
		private void detach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.FactConsignmentRemains = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocProductionCosts")]
	public partial class DocProductionCosts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<System.DateTime> _NumberPrefix;
		
		private string _DocNumber;
		
		private System.Nullable<System.DateTime> _DocDate;
		
		private System.Nullable<int> _DateKey;
		
		private string _ConsignNumber;
		
		private System.Data.Linq.Binary _Posted;
		
		private System.Nullable<long> _DepartmentID;
		
		private System.Nullable<long> _MasterGoodID;
		
		private System.Nullable<decimal> _BaseQty;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<long> _UnitID;
		
		private System.Nullable<long> _SpecificationID;
		
		private System.Nullable<long> _UserID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<DocProductionCostIn> _DocProductionCostIn;
		
		private EntitySet<DocProductionCostOut> _DocProductionCostOut;
		
		private EntitySet<DocProductionCostMaterials> _DocProductionCostMaterials;
		
		private EntitySet<FactProductionTree> _FactProductionTree;
		
		private EntityRef<DimDates> _DimDates;
		
		private EntityRef<DimDepartments> _DimDepartments;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimPeople> _DimPeople;
		
		private EntityRef<DimSpecifications> _DimSpecifications;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimUnits> _DimUnits1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNumberPrefixChanging(System.Nullable<System.DateTime> value);
    partial void OnNumberPrefixChanged();
    partial void OnDocNumberChanging(string value);
    partial void OnDocNumberChanged();
    partial void OnDocDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDocDateChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnConsignNumberChanging(string value);
    partial void OnConsignNumberChanged();
    partial void OnPostedChanging(System.Data.Linq.Binary value);
    partial void OnPostedChanged();
    partial void OnDepartmentIDChanging(System.Nullable<long> value);
    partial void OnDepartmentIDChanged();
    partial void OnMasterGoodIDChanging(System.Nullable<long> value);
    partial void OnMasterGoodIDChanged();
    partial void OnBaseQtyChanging(System.Nullable<decimal> value);
    partial void OnBaseQtyChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnUnitIDChanging(System.Nullable<long> value);
    partial void OnUnitIDChanged();
    partial void OnSpecificationIDChanging(System.Nullable<long> value);
    partial void OnSpecificationIDChanged();
    partial void OnUserIDChanging(System.Nullable<long> value);
    partial void OnUserIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DocProductionCosts()
		{
			this._DocProductionCostIn = new EntitySet<DocProductionCostIn>(new Action<DocProductionCostIn>(this.attach_DocProductionCostIn), new Action<DocProductionCostIn>(this.detach_DocProductionCostIn));
			this._DocProductionCostOut = new EntitySet<DocProductionCostOut>(new Action<DocProductionCostOut>(this.attach_DocProductionCostOut), new Action<DocProductionCostOut>(this.detach_DocProductionCostOut));
			this._DocProductionCostMaterials = new EntitySet<DocProductionCostMaterials>(new Action<DocProductionCostMaterials>(this.attach_DocProductionCostMaterials), new Action<DocProductionCostMaterials>(this.detach_DocProductionCostMaterials));
			this._FactProductionTree = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTree), new Action<FactProductionTree>(this.detach_FactProductionTree));
			this._DimDates = default(EntityRef<DimDates>);
			this._DimDepartments = default(EntityRef<DimDepartments>);
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimPeople = default(EntityRef<DimPeople>);
			this._DimSpecifications = default(EntityRef<DimSpecifications>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimUnits1 = default(EntityRef<DimUnits>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberPrefix", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> NumberPrefix
		{
			get
			{
				return this._NumberPrefix;
			}
			set
			{
				if ((this._NumberPrefix != value))
				{
					this.OnNumberPrefixChanging(value);
					this.SendPropertyChanging();
					this._NumberPrefix = value;
					this.SendPropertyChanged("NumberPrefix");
					this.OnNumberPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocNumber", DbType="NVarChar(11)", UpdateCheck=UpdateCheck.Never)]
		public string DocNumber
		{
			get
			{
				return this._DocNumber;
			}
			set
			{
				if ((this._DocNumber != value))
				{
					this.OnDocNumberChanging(value);
					this.SendPropertyChanging();
					this._DocNumber = value;
					this.SendPropertyChanged("DocNumber");
					this.OnDocNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					if (this._DimDates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsignNumber", DbType="NVarChar(4)", UpdateCheck=UpdateCheck.Never)]
		public string ConsignNumber
		{
			get
			{
				return this._ConsignNumber;
			}
			set
			{
				if ((this._ConsignNumber != value))
				{
					this.OnConsignNumberChanging(value);
					this.SendPropertyChanging();
					this._ConsignNumber = value;
					this.SendPropertyChanged("ConsignNumber");
					this.OnConsignNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Posted", DbType="Binary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Posted
		{
			get
			{
				return this._Posted;
			}
			set
			{
				if ((this._Posted != value))
				{
					this.OnPostedChanging(value);
					this.SendPropertyChanging();
					this._Posted = value;
					this.SendPropertyChanged("Posted");
					this.OnPostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._DimDepartments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasterGoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> MasterGoodID
		{
			get
			{
				return this._MasterGoodID;
			}
			set
			{
				if ((this._MasterGoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMasterGoodIDChanging(value);
					this.SendPropertyChanging();
					this._MasterGoodID = value;
					this.SendPropertyChanged("MasterGoodID");
					this.OnMasterGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BaseQty
		{
			get
			{
				return this._BaseQty;
			}
			set
			{
				if ((this._BaseQty != value))
				{
					this.OnBaseQtyChanging(value);
					this.SendPropertyChanging();
					this._BaseQty = value;
					this.SendPropertyChanged("BaseQty");
					this.OnBaseQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if (this._DimUnits1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecificationID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> SpecificationID
		{
			get
			{
				return this._SpecificationID;
			}
			set
			{
				if ((this._SpecificationID != value))
				{
					if (this._DimSpecifications.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecificationIDChanging(value);
					this.SendPropertyChanging();
					this._SpecificationID = value;
					this.SendPropertyChanged("SpecificationID");
					this.OnSpecificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._DimPeople.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProductionCosts_DocProductionCostIn", Storage="_DocProductionCostIn", ThisKey="ID", OtherKey="DocID")]
		public EntitySet<DocProductionCostIn> DocProductionCostIn
		{
			get
			{
				return this._DocProductionCostIn;
			}
			set
			{
				this._DocProductionCostIn.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProductionCosts_DocProductionCostOut", Storage="_DocProductionCostOut", ThisKey="ID", OtherKey="DocID")]
		public EntitySet<DocProductionCostOut> DocProductionCostOut
		{
			get
			{
				return this._DocProductionCostOut;
			}
			set
			{
				this._DocProductionCostOut.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProductionCosts_DocProductionCostMaterials", Storage="_DocProductionCostMaterials", ThisKey="ID", OtherKey="DocID")]
		public EntitySet<DocProductionCostMaterials> DocProductionCostMaterials
		{
			get
			{
				return this._DocProductionCostMaterials;
			}
			set
			{
				this._DocProductionCostMaterials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProductionCosts_FactProductionTree", Storage="_FactProductionTree", ThisKey="ID", OtherKey="CostDocID")]
		public EntitySet<FactProductionTree> FactProductionTree
		{
			get
			{
				return this._FactProductionTree;
			}
			set
			{
				this._FactProductionTree.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_DocProductionCosts", Storage="_DimDates", ThisKey="DateKey", OtherKey="DateKey", IsForeignKey=true)]
		public DimDates DimDates
		{
			get
			{
				return this._DimDates.Entity;
			}
			set
			{
				DimDates previousValue = this._DimDates.Entity;
				if (((previousValue != value) 
							|| (this._DimDates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDates.Entity = null;
						previousValue.DocProductionCosts.Remove(this);
					}
					this._DimDates.Entity = value;
					if ((value != null))
					{
						value.DocProductionCosts.Add(this);
						this._DateKey = value.DateKey;
					}
					else
					{
						this._DateKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimDates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DocProductionCosts", Storage="_DimDepartments", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments
		{
			get
			{
				return this._DimDepartments.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments.Entity = null;
						previousValue.DocProductionCosts.Remove(this);
					}
					this._DimDepartments.Entity = value;
					if ((value != null))
					{
						value.DocProductionCosts.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DocProductionCosts", Storage="_DimGoods", ThisKey="MasterGoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.DocProductionCosts.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.DocProductionCosts.Add(this);
						this._MasterGoodID = value.ID;
					}
					else
					{
						this._MasterGoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPeople_DocProductionCosts", Storage="_DimPeople", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public DimPeople DimPeople
		{
			get
			{
				return this._DimPeople.Entity;
			}
			set
			{
				DimPeople previousValue = this._DimPeople.Entity;
				if (((previousValue != value) 
							|| (this._DimPeople.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimPeople.Entity = null;
						previousValue.DocProductionCosts.Remove(this);
					}
					this._DimPeople.Entity = value;
					if ((value != null))
					{
						value.DocProductionCosts.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimPeople");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimSpecifications_DocProductionCosts", Storage="_DimSpecifications", ThisKey="SpecificationID", OtherKey="ID", IsForeignKey=true)]
		public DimSpecifications DimSpecifications
		{
			get
			{
				return this._DimSpecifications.Entity;
			}
			set
			{
				DimSpecifications previousValue = this._DimSpecifications.Entity;
				if (((previousValue != value) 
							|| (this._DimSpecifications.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimSpecifications.Entity = null;
						previousValue.DocProductionCosts.Remove(this);
					}
					this._DimSpecifications.Entity = value;
					if ((value != null))
					{
						value.DocProductionCosts.Add(this);
						this._SpecificationID = value.ID;
					}
					else
					{
						this._SpecificationID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimSpecifications");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCosts", Storage="_DimUnits", ThisKey="UnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.DocProductionCosts.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.DocProductionCosts.Add(this);
						this._UnitID = value.ID;
					}
					else
					{
						this._UnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCosts1", Storage="_DimUnits1", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits1
		{
			get
			{
				return this._DimUnits1.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits1.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits1.Entity = null;
						previousValue.DocProductionCosts1.Remove(this);
					}
					this._DimUnits1.Entity = value;
					if ((value != null))
					{
						value.DocProductionCosts1.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocProductionCostIn(DocProductionCostIn entity)
		{
			this.SendPropertyChanging();
			entity.DocProductionCosts = this;
		}
		
		private void detach_DocProductionCostIn(DocProductionCostIn entity)
		{
			this.SendPropertyChanging();
			entity.DocProductionCosts = null;
		}
		
		private void attach_DocProductionCostOut(DocProductionCostOut entity)
		{
			this.SendPropertyChanging();
			entity.DocProductionCosts = this;
		}
		
		private void detach_DocProductionCostOut(DocProductionCostOut entity)
		{
			this.SendPropertyChanging();
			entity.DocProductionCosts = null;
		}
		
		private void attach_DocProductionCostMaterials(DocProductionCostMaterials entity)
		{
			this.SendPropertyChanging();
			entity.DocProductionCosts = this;
		}
		
		private void detach_DocProductionCostMaterials(DocProductionCostMaterials entity)
		{
			this.SendPropertyChanging();
			entity.DocProductionCosts = null;
		}
		
		private void attach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DocProductionCosts = this;
		}
		
		private void detach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DocProductionCosts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocProductionCostIn")]
	public partial class DocProductionCostIn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _DocID;
		
		private System.Nullable<long> _GoodID;
		
		private System.Nullable<decimal> _BaseQty;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<long> _UnitID;
		
		private System.Nullable<decimal> _QtyPcs;
		
		private System.Nullable<long> _DepartmentID;
		
		private System.Data.Linq.Binary _Document846_IDRRef;
		
		private System.Data.Linq.Binary _KeyField;
		
		private System.Nullable<decimal> _LineNum;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimDepartments> _DimDepartments;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimUnits> _DimUnits1;
		
		private EntityRef<DocProductionCosts> _DocProductionCosts;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDocIDChanging(System.Nullable<long> value);
    partial void OnDocIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnBaseQtyChanging(System.Nullable<decimal> value);
    partial void OnBaseQtyChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnUnitIDChanging(System.Nullable<long> value);
    partial void OnUnitIDChanged();
    partial void OnQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnQtyPcsChanged();
    partial void OnDepartmentIDChanging(System.Nullable<long> value);
    partial void OnDepartmentIDChanged();
    partial void OnDocument846_IDRRefChanging(System.Data.Linq.Binary value);
    partial void OnDocument846_IDRRefChanged();
    partial void OnKeyFieldChanging(System.Data.Linq.Binary value);
    partial void OnKeyFieldChanged();
    partial void OnLineNumChanging(System.Nullable<decimal> value);
    partial void OnLineNumChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public DocProductionCostIn()
		{
			this._DimDepartments = default(EntityRef<DimDepartments>);
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimUnits1 = default(EntityRef<DimUnits>);
			this._DocProductionCosts = default(EntityRef<DocProductionCosts>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					if (this._DocProductionCosts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BaseQty
		{
			get
			{
				return this._BaseQty;
			}
			set
			{
				if ((this._BaseQty != value))
				{
					this.OnBaseQtyChanging(value);
					this.SendPropertyChanging();
					this._BaseQty = value;
					this.SendPropertyChanged("BaseQty");
					this.OnBaseQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if ((this._DimUnits.HasLoadedOrAssignedValue || this._DimUnits1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPcs
		{
			get
			{
				return this._QtyPcs;
			}
			set
			{
				if ((this._QtyPcs != value))
				{
					this.OnQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._QtyPcs = value;
					this.SendPropertyChanged("QtyPcs");
					this.OnQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._DimDepartments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Document846_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Document846_IDRRef
		{
			get
			{
				return this._Document846_IDRRef;
			}
			set
			{
				if ((this._Document846_IDRRef != value))
				{
					this.OnDocument846_IDRRefChanging(value);
					this.SendPropertyChanging();
					this._Document846_IDRRef = value;
					this.SendPropertyChanged("Document846_IDRRef");
					this.OnDocument846_IDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyField", DbType="Binary(4)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary KeyField
		{
			get
			{
				return this._KeyField;
			}
			set
			{
				if ((this._KeyField != value))
				{
					this.OnKeyFieldChanging(value);
					this.SendPropertyChanging();
					this._KeyField = value;
					this.SendPropertyChanged("KeyField");
					this.OnKeyFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNum", DbType="Decimal(5,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> LineNum
		{
			get
			{
				return this._LineNum;
			}
			set
			{
				if ((this._LineNum != value))
				{
					this.OnLineNumChanging(value);
					this.SendPropertyChanging();
					this._LineNum = value;
					this.SendPropertyChanged("LineNum");
					this.OnLineNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DocProductionCostIn", Storage="_DimDepartments", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments
		{
			get
			{
				return this._DimDepartments.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments.Entity = null;
						previousValue.DocProductionCostIn.Remove(this);
					}
					this._DimDepartments.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostIn.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DocProductionCostIn", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.DocProductionCostIn.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostIn.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCostIn", Storage="_DimUnits", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.DocProductionCostIn.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostIn.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCostIn1", Storage="_DimUnits1", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits1
		{
			get
			{
				return this._DimUnits1.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits1.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits1.Entity = null;
						previousValue.DocProductionCostIn1.Remove(this);
					}
					this._DimUnits1.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostIn1.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProductionCosts_DocProductionCostIn", Storage="_DocProductionCosts", ThisKey="DocID", OtherKey="ID", IsForeignKey=true)]
		public DocProductionCosts DocProductionCosts
		{
			get
			{
				return this._DocProductionCosts.Entity;
			}
			set
			{
				DocProductionCosts previousValue = this._DocProductionCosts.Entity;
				if (((previousValue != value) 
							|| (this._DocProductionCosts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocProductionCosts.Entity = null;
						previousValue.DocProductionCostIn.Remove(this);
					}
					this._DocProductionCosts.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostIn.Add(this);
						this._DocID = value.ID;
					}
					else
					{
						this._DocID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DocProductionCosts");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocProductionCostOut")]
	public partial class DocProductionCostOut : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _DocID;
		
		private System.Nullable<long> _GoodID;
		
		private System.Nullable<decimal> _BaseQty;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<long> _UnitID;
		
		private System.Nullable<decimal> _QtyPcs;
		
		private System.Nullable<decimal> _CostShare;
		
		private System.Nullable<long> _DepartmentID;
		
		private System.Data.Linq.Binary _Document846_IDRRef;
		
		private System.Data.Linq.Binary _KeyField;
		
		private System.Nullable<decimal> _LineNum;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<FactProductionTree> _FactProductionTree;
		
		private EntityRef<DimDepartments> _DimDepartments;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimUnits> _DimUnits1;
		
		private EntityRef<DocProductionCosts> _DocProductionCosts;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDocIDChanging(System.Nullable<long> value);
    partial void OnDocIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnBaseQtyChanging(System.Nullable<decimal> value);
    partial void OnBaseQtyChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnUnitIDChanging(System.Nullable<long> value);
    partial void OnUnitIDChanged();
    partial void OnQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnQtyPcsChanged();
    partial void OnCostShareChanging(System.Nullable<decimal> value);
    partial void OnCostShareChanged();
    partial void OnDepartmentIDChanging(System.Nullable<long> value);
    partial void OnDepartmentIDChanged();
    partial void OnDocument846_IDRRefChanging(System.Data.Linq.Binary value);
    partial void OnDocument846_IDRRefChanged();
    partial void OnKeyFieldChanging(System.Data.Linq.Binary value);
    partial void OnKeyFieldChanged();
    partial void OnLineNumChanging(System.Nullable<decimal> value);
    partial void OnLineNumChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public DocProductionCostOut()
		{
			this._FactProductionTree = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTree), new Action<FactProductionTree>(this.detach_FactProductionTree));
			this._DimDepartments = default(EntityRef<DimDepartments>);
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimUnits1 = default(EntityRef<DimUnits>);
			this._DocProductionCosts = default(EntityRef<DocProductionCosts>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					if (this._DocProductionCosts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BaseQty
		{
			get
			{
				return this._BaseQty;
			}
			set
			{
				if ((this._BaseQty != value))
				{
					this.OnBaseQtyChanging(value);
					this.SendPropertyChanging();
					this._BaseQty = value;
					this.SendPropertyChanged("BaseQty");
					this.OnBaseQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if ((this._DimUnits.HasLoadedOrAssignedValue || this._DimUnits1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPcs
		{
			get
			{
				return this._QtyPcs;
			}
			set
			{
				if ((this._QtyPcs != value))
				{
					this.OnQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._QtyPcs = value;
					this.SendPropertyChanged("QtyPcs");
					this.OnQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostShare", DbType="Decimal(10,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> CostShare
		{
			get
			{
				return this._CostShare;
			}
			set
			{
				if ((this._CostShare != value))
				{
					this.OnCostShareChanging(value);
					this.SendPropertyChanging();
					this._CostShare = value;
					this.SendPropertyChanged("CostShare");
					this.OnCostShareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._DimDepartments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Document846_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Document846_IDRRef
		{
			get
			{
				return this._Document846_IDRRef;
			}
			set
			{
				if ((this._Document846_IDRRef != value))
				{
					this.OnDocument846_IDRRefChanging(value);
					this.SendPropertyChanging();
					this._Document846_IDRRef = value;
					this.SendPropertyChanged("Document846_IDRRef");
					this.OnDocument846_IDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyField", DbType="Binary(4)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary KeyField
		{
			get
			{
				return this._KeyField;
			}
			set
			{
				if ((this._KeyField != value))
				{
					this.OnKeyFieldChanging(value);
					this.SendPropertyChanging();
					this._KeyField = value;
					this.SendPropertyChanged("KeyField");
					this.OnKeyFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNum", DbType="Decimal(5,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> LineNum
		{
			get
			{
				return this._LineNum;
			}
			set
			{
				if ((this._LineNum != value))
				{
					this.OnLineNumChanging(value);
					this.SendPropertyChanging();
					this._LineNum = value;
					this.SendPropertyChanged("LineNum");
					this.OnLineNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProductionCostOut_FactProductionTree", Storage="_FactProductionTree", ThisKey="ID", OtherKey="CostOutLineID")]
		public EntitySet<FactProductionTree> FactProductionTree
		{
			get
			{
				return this._FactProductionTree;
			}
			set
			{
				this._FactProductionTree.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DocProductionCostOut", Storage="_DimDepartments", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments
		{
			get
			{
				return this._DimDepartments.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments.Entity = null;
						previousValue.DocProductionCostOut.Remove(this);
					}
					this._DimDepartments.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostOut.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DocProductionCostOut", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.DocProductionCostOut.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostOut.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCostOut", Storage="_DimUnits", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.DocProductionCostOut.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostOut.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCostOut1", Storage="_DimUnits1", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits1
		{
			get
			{
				return this._DimUnits1.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits1.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits1.Entity = null;
						previousValue.DocProductionCostOut1.Remove(this);
					}
					this._DimUnits1.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostOut1.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProductionCosts_DocProductionCostOut", Storage="_DocProductionCosts", ThisKey="DocID", OtherKey="ID", IsForeignKey=true)]
		public DocProductionCosts DocProductionCosts
		{
			get
			{
				return this._DocProductionCosts.Entity;
			}
			set
			{
				DocProductionCosts previousValue = this._DocProductionCosts.Entity;
				if (((previousValue != value) 
							|| (this._DocProductionCosts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocProductionCosts.Entity = null;
						previousValue.DocProductionCostOut.Remove(this);
					}
					this._DocProductionCosts.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostOut.Add(this);
						this._DocID = value.ID;
					}
					else
					{
						this._DocID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DocProductionCosts");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DocProductionCostOut = this;
		}
		
		private void detach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DocProductionCostOut = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocProductionCostMaterials")]
	public partial class DocProductionCostMaterials : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _DocID;
		
		private System.Nullable<long> _GoodID;
		
		private System.Nullable<decimal> _BaseQty;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<long> _UnitID;
		
		private System.Nullable<decimal> _QtyPcs;
		
		private System.Nullable<long> _DepartmentID;
		
		private System.Data.Linq.Binary _Document846_IDRRef;
		
		private System.Data.Linq.Binary _KeyField;
		
		private System.Nullable<decimal> _LineNum;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<FactProductionTree> _FactProductionTree;
		
		private EntityRef<DimDepartments> _DimDepartments;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimUnits> _DimUnits1;
		
		private EntityRef<DocProductionCosts> _DocProductionCosts;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDocIDChanging(System.Nullable<long> value);
    partial void OnDocIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnBaseQtyChanging(System.Nullable<decimal> value);
    partial void OnBaseQtyChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnUnitIDChanging(System.Nullable<long> value);
    partial void OnUnitIDChanged();
    partial void OnQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnQtyPcsChanged();
    partial void OnDepartmentIDChanging(System.Nullable<long> value);
    partial void OnDepartmentIDChanged();
    partial void OnDocument846_IDRRefChanging(System.Data.Linq.Binary value);
    partial void OnDocument846_IDRRefChanged();
    partial void OnKeyFieldChanging(System.Data.Linq.Binary value);
    partial void OnKeyFieldChanged();
    partial void OnLineNumChanging(System.Nullable<decimal> value);
    partial void OnLineNumChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public DocProductionCostMaterials()
		{
			this._FactProductionTree = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTree), new Action<FactProductionTree>(this.detach_FactProductionTree));
			this._DimDepartments = default(EntityRef<DimDepartments>);
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimUnits1 = default(EntityRef<DimUnits>);
			this._DocProductionCosts = default(EntityRef<DocProductionCosts>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					if (this._DocProductionCosts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BaseQty
		{
			get
			{
				return this._BaseQty;
			}
			set
			{
				if ((this._BaseQty != value))
				{
					this.OnBaseQtyChanging(value);
					this.SendPropertyChanging();
					this._BaseQty = value;
					this.SendPropertyChanged("BaseQty");
					this.OnBaseQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if ((this._DimUnits.HasLoadedOrAssignedValue || this._DimUnits1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPcs
		{
			get
			{
				return this._QtyPcs;
			}
			set
			{
				if ((this._QtyPcs != value))
				{
					this.OnQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._QtyPcs = value;
					this.SendPropertyChanged("QtyPcs");
					this.OnQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._DimDepartments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Document846_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Document846_IDRRef
		{
			get
			{
				return this._Document846_IDRRef;
			}
			set
			{
				if ((this._Document846_IDRRef != value))
				{
					this.OnDocument846_IDRRefChanging(value);
					this.SendPropertyChanging();
					this._Document846_IDRRef = value;
					this.SendPropertyChanged("Document846_IDRRef");
					this.OnDocument846_IDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyField", DbType="Binary(4)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary KeyField
		{
			get
			{
				return this._KeyField;
			}
			set
			{
				if ((this._KeyField != value))
				{
					this.OnKeyFieldChanging(value);
					this.SendPropertyChanging();
					this._KeyField = value;
					this.SendPropertyChanged("KeyField");
					this.OnKeyFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNum", DbType="Decimal(5,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> LineNum
		{
			get
			{
				return this._LineNum;
			}
			set
			{
				if ((this._LineNum != value))
				{
					this.OnLineNumChanging(value);
					this.SendPropertyChanging();
					this._LineNum = value;
					this.SendPropertyChanged("LineNum");
					this.OnLineNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProductionCostMaterials_FactProductionTree", Storage="_FactProductionTree", ThisKey="ID", OtherKey="CostMatLineID")]
		public EntitySet<FactProductionTree> FactProductionTree
		{
			get
			{
				return this._FactProductionTree;
			}
			set
			{
				this._FactProductionTree.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DocProductionCostMaterials", Storage="_DimDepartments", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments
		{
			get
			{
				return this._DimDepartments.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments.Entity = null;
						previousValue.DocProductionCostMaterials.Remove(this);
					}
					this._DimDepartments.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostMaterials.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DocProductionCostMaterials", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.DocProductionCostMaterials.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostMaterials.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCostMaterials", Storage="_DimUnits", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.DocProductionCostMaterials.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostMaterials.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionCostMaterials1", Storage="_DimUnits1", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits1
		{
			get
			{
				return this._DimUnits1.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits1.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits1.Entity = null;
						previousValue.DocProductionCostMaterials1.Remove(this);
					}
					this._DimUnits1.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostMaterials1.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProductionCosts_DocProductionCostMaterials", Storage="_DocProductionCosts", ThisKey="DocID", OtherKey="ID", IsForeignKey=true)]
		public DocProductionCosts DocProductionCosts
		{
			get
			{
				return this._DocProductionCosts.Entity;
			}
			set
			{
				DocProductionCosts previousValue = this._DocProductionCosts.Entity;
				if (((previousValue != value) 
							|| (this._DocProductionCosts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocProductionCosts.Entity = null;
						previousValue.DocProductionCostMaterials.Remove(this);
					}
					this._DocProductionCosts.Entity = value;
					if ((value != null))
					{
						value.DocProductionCostMaterials.Add(this);
						this._DocID = value.ID;
					}
					else
					{
						this._DocID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DocProductionCosts");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DocProductionCostMaterials = this;
		}
		
		private void detach_FactProductionTree(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DocProductionCostMaterials = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocProductionLines")]
	public partial class DocProductionLines : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _DocID;
		
		private System.Nullable<long> _GoodID;
		
		private System.Nullable<decimal> _BaseQty;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<long> _UnitID;
		
		private System.Nullable<decimal> _QtyPcs;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<long> _SpecificationID;
		
		private System.Nullable<long> _WarehouseID;
		
		private System.Nullable<long> _DepartmentID;
		
		private System.Data.Linq.Binary _Document581_IDRRef;
		
		private System.Data.Linq.Binary _KeyField;
		
		private System.Nullable<decimal> _LineNum;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimDepartments> _DimDepartments;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimSpecifications> _DimSpecifications;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimUnits> _DimUnits1;
		
		private EntityRef<DimWarehouses> _DimWarehouses;
		
		private EntityRef<DocProduction> _DocProduction;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDocIDChanging(System.Nullable<long> value);
    partial void OnDocIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnBaseQtyChanging(System.Nullable<decimal> value);
    partial void OnBaseQtyChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnUnitIDChanging(System.Nullable<long> value);
    partial void OnUnitIDChanged();
    partial void OnQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnQtyPcsChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnSpecificationIDChanging(System.Nullable<long> value);
    partial void OnSpecificationIDChanged();
    partial void OnWarehouseIDChanging(System.Nullable<long> value);
    partial void OnWarehouseIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<long> value);
    partial void OnDepartmentIDChanged();
    partial void OnDocument581_IDRRefChanging(System.Data.Linq.Binary value);
    partial void OnDocument581_IDRRefChanged();
    partial void OnKeyFieldChanging(System.Data.Linq.Binary value);
    partial void OnKeyFieldChanged();
    partial void OnLineNumChanging(System.Nullable<decimal> value);
    partial void OnLineNumChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public DocProductionLines()
		{
			this._DimDepartments = default(EntityRef<DimDepartments>);
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimSpecifications = default(EntityRef<DimSpecifications>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimUnits1 = default(EntityRef<DimUnits>);
			this._DimWarehouses = default(EntityRef<DimWarehouses>);
			this._DocProduction = default(EntityRef<DocProduction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					if (this._DocProduction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BaseQty
		{
			get
			{
				return this._BaseQty;
			}
			set
			{
				if ((this._BaseQty != value))
				{
					this.OnBaseQtyChanging(value);
					this.SendPropertyChanging();
					this._BaseQty = value;
					this.SendPropertyChanged("BaseQty");
					this.OnBaseQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if ((this._DimUnits.HasLoadedOrAssignedValue || this._DimUnits1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPcs
		{
			get
			{
				return this._QtyPcs;
			}
			set
			{
				if ((this._QtyPcs != value))
				{
					this.OnQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._QtyPcs = value;
					this.SendPropertyChanged("QtyPcs");
					this.OnQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecificationID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> SpecificationID
		{
			get
			{
				return this._SpecificationID;
			}
			set
			{
				if ((this._SpecificationID != value))
				{
					if (this._DimSpecifications.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecificationIDChanging(value);
					this.SendPropertyChanging();
					this._SpecificationID = value;
					this.SendPropertyChanged("SpecificationID");
					this.OnSpecificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._DimWarehouses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._DimDepartments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Document581_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Document581_IDRRef
		{
			get
			{
				return this._Document581_IDRRef;
			}
			set
			{
				if ((this._Document581_IDRRef != value))
				{
					this.OnDocument581_IDRRefChanging(value);
					this.SendPropertyChanging();
					this._Document581_IDRRef = value;
					this.SendPropertyChanged("Document581_IDRRef");
					this.OnDocument581_IDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyField", DbType="Binary(4)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary KeyField
		{
			get
			{
				return this._KeyField;
			}
			set
			{
				if ((this._KeyField != value))
				{
					this.OnKeyFieldChanging(value);
					this.SendPropertyChanging();
					this._KeyField = value;
					this.SendPropertyChanged("KeyField");
					this.OnKeyFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNum", DbType="Decimal(5,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> LineNum
		{
			get
			{
				return this._LineNum;
			}
			set
			{
				if ((this._LineNum != value))
				{
					this.OnLineNumChanging(value);
					this.SendPropertyChanging();
					this._LineNum = value;
					this.SendPropertyChanged("LineNum");
					this.OnLineNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DocProductionLines", Storage="_DimDepartments", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments
		{
			get
			{
				return this._DimDepartments.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments.Entity = null;
						previousValue.DocProductionLines.Remove(this);
					}
					this._DimDepartments.Entity = value;
					if ((value != null))
					{
						value.DocProductionLines.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DocProductionLines", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.DocProductionLines.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.DocProductionLines.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimSpecifications_DocProductionLines", Storage="_DimSpecifications", ThisKey="SpecificationID", OtherKey="ID", IsForeignKey=true)]
		public DimSpecifications DimSpecifications
		{
			get
			{
				return this._DimSpecifications.Entity;
			}
			set
			{
				DimSpecifications previousValue = this._DimSpecifications.Entity;
				if (((previousValue != value) 
							|| (this._DimSpecifications.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimSpecifications.Entity = null;
						previousValue.DocProductionLines.Remove(this);
					}
					this._DimSpecifications.Entity = value;
					if ((value != null))
					{
						value.DocProductionLines.Add(this);
						this._SpecificationID = value.ID;
					}
					else
					{
						this._SpecificationID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimSpecifications");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionLines", Storage="_DimUnits", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.DocProductionLines.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.DocProductionLines.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocProductionLines1", Storage="_DimUnits1", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits1
		{
			get
			{
				return this._DimUnits1.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits1.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits1.Entity = null;
						previousValue.DocProductionLines1.Remove(this);
					}
					this._DimUnits1.Entity = value;
					if ((value != null))
					{
						value.DocProductionLines1.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_DocProductionLines", Storage="_DimWarehouses", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses
		{
			get
			{
				return this._DimWarehouses.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses.Entity = null;
						previousValue.DocProductionLines.Remove(this);
					}
					this._DimWarehouses.Entity = value;
					if ((value != null))
					{
						value.DocProductionLines.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProduction_DocProductionLines", Storage="_DocProduction", ThisKey="DocID", OtherKey="ID", IsForeignKey=true)]
		public DocProduction DocProduction
		{
			get
			{
				return this._DocProduction.Entity;
			}
			set
			{
				DocProduction previousValue = this._DocProduction.Entity;
				if (((previousValue != value) 
							|| (this._DocProduction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocProduction.Entity = null;
						previousValue.DocProductionLines.Remove(this);
					}
					this._DocProduction.Entity = value;
					if ((value != null))
					{
						value.DocProductionLines.Add(this);
						this._DocID = value.ID;
					}
					else
					{
						this._DocID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DocProduction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactProductionTree")]
	public partial class FactProductionTree : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _ProductionDocID;
		
		private System.Nullable<long> _CostDocID;
		
		private System.Nullable<long> _CostOutLineID;
		
		private System.Nullable<long> _CostMatLineID;
		
		private System.Nullable<long> _WarehouseID;
		
		private System.Nullable<long> _DepartmentID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _DateKey;
		
		private string _ConsignNumber;
		
		private System.Nullable<long> _RawGoodID;
		
		private System.Nullable<decimal> _RawBaseQty;
		
		private System.Nullable<long> _RawBaseUnitID;
		
		private System.Nullable<decimal> _RawQty;
		
		private System.Nullable<long> _RawUnitID;
		
		private System.Nullable<decimal> _RawQtyPcs;
		
		private System.Nullable<long> _ConsignmentID;
		
		private System.Nullable<decimal> _RemainQty;
		
		private System.Nullable<decimal> _RemainQtyPcs;
		
		private System.Nullable<long> _FirstRawMaterialGoodID;
		
		private System.Nullable<decimal> _FirstRawMaterialProdPercent;
		
		private System.Nullable<long> _PrepackGoodID;
		
		private System.Nullable<decimal> _PrepackBaseQty;
		
		private System.Nullable<long> _PrepackBaseUnitID;
		
		private System.Nullable<decimal> _PrepackQty;
		
		private System.Nullable<long> _PrepackUnitID;
		
		private System.Nullable<decimal> _PrepackQtyPcs;
		
		private System.Nullable<decimal> _PercentProduction;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimDates> _DimDates;
		
		private EntityRef<DimDepartments> _DimDepartments;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimGoods> _DimGoods1;
		
		private EntityRef<DimGoods> _DimGoods2;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimUnits> _DimUnits1;
		
		private EntityRef<DimUnits> _DimUnits2;
		
		private EntityRef<DimUnits> _DimUnits3;
		
		private EntityRef<DimWarehouses> _DimWarehouses;
		
		private EntityRef<DocProductionCostMaterials> _DocProductionCostMaterials;
		
		private EntityRef<DocProductionCostOut> _DocProductionCostOut;
		
		private EntityRef<DocProductionCosts> _DocProductionCosts;
		
		private EntityRef<FactConsignmentRemains> _FactConsignmentRemains;
		
		private EntityRef<DocProduction> _DocProduction;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnProductionDocIDChanging(System.Nullable<long> value);
    partial void OnProductionDocIDChanged();
    partial void OnCostDocIDChanging(System.Nullable<long> value);
    partial void OnCostDocIDChanged();
    partial void OnCostOutLineIDChanging(System.Nullable<long> value);
    partial void OnCostOutLineIDChanged();
    partial void OnCostMatLineIDChanging(System.Nullable<long> value);
    partial void OnCostMatLineIDChanged();
    partial void OnWarehouseIDChanging(System.Nullable<long> value);
    partial void OnWarehouseIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<long> value);
    partial void OnDepartmentIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnConsignNumberChanging(string value);
    partial void OnConsignNumberChanged();
    partial void OnRawGoodIDChanging(System.Nullable<long> value);
    partial void OnRawGoodIDChanged();
    partial void OnRawBaseQtyChanging(System.Nullable<decimal> value);
    partial void OnRawBaseQtyChanged();
    partial void OnRawBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnRawBaseUnitIDChanged();
    partial void OnRawQtyChanging(System.Nullable<decimal> value);
    partial void OnRawQtyChanged();
    partial void OnRawUnitIDChanging(System.Nullable<long> value);
    partial void OnRawUnitIDChanged();
    partial void OnRawQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnRawQtyPcsChanged();
    partial void OnConsignmentIDChanging(System.Nullable<long> value);
    partial void OnConsignmentIDChanged();
    partial void OnRemainQtyChanging(System.Nullable<decimal> value);
    partial void OnRemainQtyChanged();
    partial void OnRemainQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnRemainQtyPcsChanged();
    partial void OnFirstRawMaterialGoodIDChanging(System.Nullable<long> value);
    partial void OnFirstRawMaterialGoodIDChanged();
    partial void OnFirstRawMaterialProdPercentChanging(System.Nullable<decimal> value);
    partial void OnFirstRawMaterialProdPercentChanged();
    partial void OnPrepackGoodIDChanging(System.Nullable<long> value);
    partial void OnPrepackGoodIDChanged();
    partial void OnPrepackBaseQtyChanging(System.Nullable<decimal> value);
    partial void OnPrepackBaseQtyChanged();
    partial void OnPrepackBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnPrepackBaseUnitIDChanged();
    partial void OnPrepackQtyChanging(System.Nullable<decimal> value);
    partial void OnPrepackQtyChanged();
    partial void OnPrepackUnitIDChanging(System.Nullable<long> value);
    partial void OnPrepackUnitIDChanged();
    partial void OnPrepackQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnPrepackQtyPcsChanged();
    partial void OnPercentProductionChanging(System.Nullable<decimal> value);
    partial void OnPercentProductionChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public FactProductionTree()
		{
			this._DimDates = default(EntityRef<DimDates>);
			this._DimDepartments = default(EntityRef<DimDepartments>);
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimGoods1 = default(EntityRef<DimGoods>);
			this._DimGoods2 = default(EntityRef<DimGoods>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimUnits1 = default(EntityRef<DimUnits>);
			this._DimUnits2 = default(EntityRef<DimUnits>);
			this._DimUnits3 = default(EntityRef<DimUnits>);
			this._DimWarehouses = default(EntityRef<DimWarehouses>);
			this._DocProductionCostMaterials = default(EntityRef<DocProductionCostMaterials>);
			this._DocProductionCostOut = default(EntityRef<DocProductionCostOut>);
			this._DocProductionCosts = default(EntityRef<DocProductionCosts>);
			this._FactConsignmentRemains = default(EntityRef<FactConsignmentRemains>);
			this._DocProduction = default(EntityRef<DocProduction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionDocID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> ProductionDocID
		{
			get
			{
				return this._ProductionDocID;
			}
			set
			{
				if ((this._ProductionDocID != value))
				{
					if (this._DocProduction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductionDocIDChanging(value);
					this.SendPropertyChanging();
					this._ProductionDocID = value;
					this.SendPropertyChanged("ProductionDocID");
					this.OnProductionDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostDocID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> CostDocID
		{
			get
			{
				return this._CostDocID;
			}
			set
			{
				if ((this._CostDocID != value))
				{
					if (this._DocProductionCosts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostDocIDChanging(value);
					this.SendPropertyChanging();
					this._CostDocID = value;
					this.SendPropertyChanged("CostDocID");
					this.OnCostDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostOutLineID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> CostOutLineID
		{
			get
			{
				return this._CostOutLineID;
			}
			set
			{
				if ((this._CostOutLineID != value))
				{
					if (this._DocProductionCostOut.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostOutLineIDChanging(value);
					this.SendPropertyChanging();
					this._CostOutLineID = value;
					this.SendPropertyChanged("CostOutLineID");
					this.OnCostOutLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostMatLineID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> CostMatLineID
		{
			get
			{
				return this._CostMatLineID;
			}
			set
			{
				if ((this._CostMatLineID != value))
				{
					if (this._DocProductionCostMaterials.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostMatLineIDChanging(value);
					this.SendPropertyChanging();
					this._CostMatLineID = value;
					this.SendPropertyChanged("CostMatLineID");
					this.OnCostMatLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._DimWarehouses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._DimDepartments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					if (this._DimDates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsignNumber", DbType="NVarChar(4)", UpdateCheck=UpdateCheck.Never)]
		public string ConsignNumber
		{
			get
			{
				return this._ConsignNumber;
			}
			set
			{
				if ((this._ConsignNumber != value))
				{
					this.OnConsignNumberChanging(value);
					this.SendPropertyChanging();
					this._ConsignNumber = value;
					this.SendPropertyChanged("ConsignNumber");
					this.OnConsignNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawGoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> RawGoodID
		{
			get
			{
				return this._RawGoodID;
			}
			set
			{
				if ((this._RawGoodID != value))
				{
					if (this._DimGoods2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRawGoodIDChanging(value);
					this.SendPropertyChanging();
					this._RawGoodID = value;
					this.SendPropertyChanged("RawGoodID");
					this.OnRawGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawBaseQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RawBaseQty
		{
			get
			{
				return this._RawBaseQty;
			}
			set
			{
				if ((this._RawBaseQty != value))
				{
					this.OnRawBaseQtyChanging(value);
					this.SendPropertyChanging();
					this._RawBaseQty = value;
					this.SendPropertyChanged("RawBaseQty");
					this.OnRawBaseQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawBaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> RawBaseUnitID
		{
			get
			{
				return this._RawBaseUnitID;
			}
			set
			{
				if ((this._RawBaseUnitID != value))
				{
					if (this._DimUnits3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRawBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._RawBaseUnitID = value;
					this.SendPropertyChanged("RawBaseUnitID");
					this.OnRawBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RawQty
		{
			get
			{
				return this._RawQty;
			}
			set
			{
				if ((this._RawQty != value))
				{
					this.OnRawQtyChanging(value);
					this.SendPropertyChanging();
					this._RawQty = value;
					this.SendPropertyChanged("RawQty");
					this.OnRawQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> RawUnitID
		{
			get
			{
				return this._RawUnitID;
			}
			set
			{
				if ((this._RawUnitID != value))
				{
					if (this._DimUnits2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRawUnitIDChanging(value);
					this.SendPropertyChanging();
					this._RawUnitID = value;
					this.SendPropertyChanged("RawUnitID");
					this.OnRawUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawQtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RawQtyPcs
		{
			get
			{
				return this._RawQtyPcs;
			}
			set
			{
				if ((this._RawQtyPcs != value))
				{
					this.OnRawQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._RawQtyPcs = value;
					this.SendPropertyChanged("RawQtyPcs");
					this.OnRawQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsignmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> ConsignmentID
		{
			get
			{
				return this._ConsignmentID;
			}
			set
			{
				if ((this._ConsignmentID != value))
				{
					if (this._FactConsignmentRemains.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConsignmentIDChanging(value);
					this.SendPropertyChanging();
					this._ConsignmentID = value;
					this.SendPropertyChanged("ConsignmentID");
					this.OnConsignmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemainQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RemainQty
		{
			get
			{
				return this._RemainQty;
			}
			set
			{
				if ((this._RemainQty != value))
				{
					this.OnRemainQtyChanging(value);
					this.SendPropertyChanging();
					this._RemainQty = value;
					this.SendPropertyChanged("RemainQty");
					this.OnRemainQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemainQtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RemainQtyPcs
		{
			get
			{
				return this._RemainQtyPcs;
			}
			set
			{
				if ((this._RemainQtyPcs != value))
				{
					this.OnRemainQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._RemainQtyPcs = value;
					this.SendPropertyChanged("RemainQtyPcs");
					this.OnRemainQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstRawMaterialGoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> FirstRawMaterialGoodID
		{
			get
			{
				return this._FirstRawMaterialGoodID;
			}
			set
			{
				if ((this._FirstRawMaterialGoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFirstRawMaterialGoodIDChanging(value);
					this.SendPropertyChanging();
					this._FirstRawMaterialGoodID = value;
					this.SendPropertyChanged("FirstRawMaterialGoodID");
					this.OnFirstRawMaterialGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstRawMaterialProdPercent", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> FirstRawMaterialProdPercent
		{
			get
			{
				return this._FirstRawMaterialProdPercent;
			}
			set
			{
				if ((this._FirstRawMaterialProdPercent != value))
				{
					this.OnFirstRawMaterialProdPercentChanging(value);
					this.SendPropertyChanging();
					this._FirstRawMaterialProdPercent = value;
					this.SendPropertyChanged("FirstRawMaterialProdPercent");
					this.OnFirstRawMaterialProdPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrepackGoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> PrepackGoodID
		{
			get
			{
				return this._PrepackGoodID;
			}
			set
			{
				if ((this._PrepackGoodID != value))
				{
					if (this._DimGoods1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrepackGoodIDChanging(value);
					this.SendPropertyChanging();
					this._PrepackGoodID = value;
					this.SendPropertyChanged("PrepackGoodID");
					this.OnPrepackGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrepackBaseQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> PrepackBaseQty
		{
			get
			{
				return this._PrepackBaseQty;
			}
			set
			{
				if ((this._PrepackBaseQty != value))
				{
					this.OnPrepackBaseQtyChanging(value);
					this.SendPropertyChanging();
					this._PrepackBaseQty = value;
					this.SendPropertyChanged("PrepackBaseQty");
					this.OnPrepackBaseQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrepackBaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> PrepackBaseUnitID
		{
			get
			{
				return this._PrepackBaseUnitID;
			}
			set
			{
				if ((this._PrepackBaseUnitID != value))
				{
					if (this._DimUnits1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrepackBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._PrepackBaseUnitID = value;
					this.SendPropertyChanged("PrepackBaseUnitID");
					this.OnPrepackBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrepackQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> PrepackQty
		{
			get
			{
				return this._PrepackQty;
			}
			set
			{
				if ((this._PrepackQty != value))
				{
					this.OnPrepackQtyChanging(value);
					this.SendPropertyChanging();
					this._PrepackQty = value;
					this.SendPropertyChanged("PrepackQty");
					this.OnPrepackQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrepackUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> PrepackUnitID
		{
			get
			{
				return this._PrepackUnitID;
			}
			set
			{
				if ((this._PrepackUnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrepackUnitIDChanging(value);
					this.SendPropertyChanging();
					this._PrepackUnitID = value;
					this.SendPropertyChanged("PrepackUnitID");
					this.OnPrepackUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrepackQtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> PrepackQtyPcs
		{
			get
			{
				return this._PrepackQtyPcs;
			}
			set
			{
				if ((this._PrepackQtyPcs != value))
				{
					this.OnPrepackQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._PrepackQtyPcs = value;
					this.SendPropertyChanged("PrepackQtyPcs");
					this.OnPrepackQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentProduction", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> PercentProduction
		{
			get
			{
				return this._PercentProduction;
			}
			set
			{
				if ((this._PercentProduction != value))
				{
					this.OnPercentProductionChanging(value);
					this.SendPropertyChanging();
					this._PercentProduction = value;
					this.SendPropertyChanged("PercentProduction");
					this.OnPercentProductionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactProductionTree", Storage="_DimDates", ThisKey="DateKey", OtherKey="DateKey", IsForeignKey=true)]
		public DimDates DimDates
		{
			get
			{
				return this._DimDates.Entity;
			}
			set
			{
				DimDates previousValue = this._DimDates.Entity;
				if (((previousValue != value) 
							|| (this._DimDates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDates.Entity = null;
						previousValue.FactProductionTree.Remove(this);
					}
					this._DimDates.Entity = value;
					if ((value != null))
					{
						value.FactProductionTree.Add(this);
						this._DateKey = value.DateKey;
					}
					else
					{
						this._DateKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimDates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_FactProductionTree", Storage="_DimDepartments", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments
		{
			get
			{
				return this._DimDepartments.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments.Entity = null;
						previousValue.FactProductionTree.Remove(this);
					}
					this._DimDepartments.Entity = value;
					if ((value != null))
					{
						value.FactProductionTree.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactProductionTree", Storage="_DimGoods", ThisKey="FirstRawMaterialGoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.FactProductionTree.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.FactProductionTree.Add(this);
						this._FirstRawMaterialGoodID = value.ID;
					}
					else
					{
						this._FirstRawMaterialGoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactProductionTree1", Storage="_DimGoods1", ThisKey="PrepackGoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods1
		{
			get
			{
				return this._DimGoods1.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods1.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods1.Entity = null;
						previousValue.FactProductionTree1.Remove(this);
					}
					this._DimGoods1.Entity = value;
					if ((value != null))
					{
						value.FactProductionTree1.Add(this);
						this._PrepackGoodID = value.ID;
					}
					else
					{
						this._PrepackGoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactProductionTree2", Storage="_DimGoods2", ThisKey="RawGoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods2
		{
			get
			{
				return this._DimGoods2.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods2.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods2.Entity = null;
						previousValue.FactProductionTree2.Remove(this);
					}
					this._DimGoods2.Entity = value;
					if ((value != null))
					{
						value.FactProductionTree2.Add(this);
						this._RawGoodID = value.ID;
					}
					else
					{
						this._RawGoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactProductionTree", Storage="_DimUnits", ThisKey="PrepackUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.FactProductionTree.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.FactProductionTree.Add(this);
						this._PrepackUnitID = value.ID;
					}
					else
					{
						this._PrepackUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactProductionTree1", Storage="_DimUnits1", ThisKey="PrepackBaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits1
		{
			get
			{
				return this._DimUnits1.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits1.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits1.Entity = null;
						previousValue.FactProductionTree1.Remove(this);
					}
					this._DimUnits1.Entity = value;
					if ((value != null))
					{
						value.FactProductionTree1.Add(this);
						this._PrepackBaseUnitID = value.ID;
					}
					else
					{
						this._PrepackBaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactProductionTree2", Storage="_DimUnits2", ThisKey="RawUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits2
		{
			get
			{
				return this._DimUnits2.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits2.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits2.Entity = null;
						previousValue.FactProductionTree2.Remove(this);
					}
					this._DimUnits2.Entity = value;
					if ((value != null))
					{
						value.FactProductionTree2.Add(this);
						this._RawUnitID = value.ID;
					}
					else
					{
						this._RawUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactProductionTree3", Storage="_DimUnits3", ThisKey="RawBaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits3
		{
			get
			{
				return this._DimUnits3.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits3.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits3.Entity = null;
						previousValue.FactProductionTree3.Remove(this);
					}
					this._DimUnits3.Entity = value;
					if ((value != null))
					{
						value.FactProductionTree3.Add(this);
						this._RawBaseUnitID = value.ID;
					}
					else
					{
						this._RawBaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactProductionTree", Storage="_DimWarehouses", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses
		{
			get
			{
				return this._DimWarehouses.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses.Entity = null;
						previousValue.FactProductionTree.Remove(this);
					}
					this._DimWarehouses.Entity = value;
					if ((value != null))
					{
						value.FactProductionTree.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProductionCostMaterials_FactProductionTree", Storage="_DocProductionCostMaterials", ThisKey="CostMatLineID", OtherKey="ID", IsForeignKey=true)]
		public DocProductionCostMaterials DocProductionCostMaterials
		{
			get
			{
				return this._DocProductionCostMaterials.Entity;
			}
			set
			{
				DocProductionCostMaterials previousValue = this._DocProductionCostMaterials.Entity;
				if (((previousValue != value) 
							|| (this._DocProductionCostMaterials.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocProductionCostMaterials.Entity = null;
						previousValue.FactProductionTree.Remove(this);
					}
					this._DocProductionCostMaterials.Entity = value;
					if ((value != null))
					{
						value.FactProductionTree.Add(this);
						this._CostMatLineID = value.ID;
					}
					else
					{
						this._CostMatLineID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DocProductionCostMaterials");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProductionCostOut_FactProductionTree", Storage="_DocProductionCostOut", ThisKey="CostOutLineID", OtherKey="ID", IsForeignKey=true)]
		public DocProductionCostOut DocProductionCostOut
		{
			get
			{
				return this._DocProductionCostOut.Entity;
			}
			set
			{
				DocProductionCostOut previousValue = this._DocProductionCostOut.Entity;
				if (((previousValue != value) 
							|| (this._DocProductionCostOut.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocProductionCostOut.Entity = null;
						previousValue.FactProductionTree.Remove(this);
					}
					this._DocProductionCostOut.Entity = value;
					if ((value != null))
					{
						value.FactProductionTree.Add(this);
						this._CostOutLineID = value.ID;
					}
					else
					{
						this._CostOutLineID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DocProductionCostOut");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProductionCosts_FactProductionTree", Storage="_DocProductionCosts", ThisKey="CostDocID", OtherKey="ID", IsForeignKey=true)]
		public DocProductionCosts DocProductionCosts
		{
			get
			{
				return this._DocProductionCosts.Entity;
			}
			set
			{
				DocProductionCosts previousValue = this._DocProductionCosts.Entity;
				if (((previousValue != value) 
							|| (this._DocProductionCosts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocProductionCosts.Entity = null;
						previousValue.FactProductionTree.Remove(this);
					}
					this._DocProductionCosts.Entity = value;
					if ((value != null))
					{
						value.FactProductionTree.Add(this);
						this._CostDocID = value.ID;
					}
					else
					{
						this._CostDocID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DocProductionCosts");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FactConsignmentRemains_FactProductionTree", Storage="_FactConsignmentRemains", ThisKey="ConsignmentID", OtherKey="ID", IsForeignKey=true)]
		public FactConsignmentRemains FactConsignmentRemains
		{
			get
			{
				return this._FactConsignmentRemains.Entity;
			}
			set
			{
				FactConsignmentRemains previousValue = this._FactConsignmentRemains.Entity;
				if (((previousValue != value) 
							|| (this._FactConsignmentRemains.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactConsignmentRemains.Entity = null;
						previousValue.FactProductionTree.Remove(this);
					}
					this._FactConsignmentRemains.Entity = value;
					if ((value != null))
					{
						value.FactProductionTree.Add(this);
						this._ConsignmentID = value.ID;
					}
					else
					{
						this._ConsignmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("FactConsignmentRemains");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProduction_FactProductionTree", Storage="_DocProduction", ThisKey="ProductionDocID", OtherKey="ID", IsForeignKey=true)]
		public DocProduction DocProduction
		{
			get
			{
				return this._DocProduction.Entity;
			}
			set
			{
				DocProduction previousValue = this._DocProduction.Entity;
				if (((previousValue != value) 
							|| (this._DocProduction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocProduction.Entity = null;
						previousValue.FactProductionTrees.Remove(this);
					}
					this._DocProduction.Entity = value;
					if ((value != null))
					{
						value.FactProductionTrees.Add(this);
						this._ProductionDocID = value.ID;
					}
					else
					{
						this._ProductionDocID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DocProduction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimTechOperations")]
	public partial class DimTechOperation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Code;
		
		private string _Name;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<DocProduction> _DocProductions;
		
		private EntitySet<DocTransferProduction> _DocTransferProductions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DimTechOperation()
		{
			this._DocProductions = new EntitySet<DocProduction>(new Action<DocProduction>(this.attach_DocProductions), new Action<DocProduction>(this.detach_DocProductions));
			this._DocTransferProductions = new EntitySet<DocTransferProduction>(new Action<DocTransferProduction>(this.attach_DocTransferProductions), new Action<DocTransferProduction>(this.detach_DocTransferProductions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NChar(3)", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTechOperation_DocProduction", Storage="_DocProductions", ThisKey="ID", OtherKey="TechOperationID")]
		public EntitySet<DocProduction> DocProductions
		{
			get
			{
				return this._DocProductions;
			}
			set
			{
				this._DocProductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTechOperation_DocTransferProduction", Storage="_DocTransferProductions", ThisKey="ID", OtherKey="TechOperationID")]
		public EntitySet<DocTransferProduction> DocTransferProductions
		{
			get
			{
				return this._DocTransferProductions;
			}
			set
			{
				this._DocTransferProductions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocProductions(DocProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimTechOperation = this;
		}
		
		private void detach_DocProductions(DocProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimTechOperation = null;
		}
		
		private void attach_DocTransferProductions(DocTransferProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimTechOperation = this;
		}
		
		private void detach_DocTransferProductions(DocTransferProduction entity)
		{
			this.SendPropertyChanging();
			entity.DimTechOperation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocProduction")]
	public partial class DocProduction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<System.DateTime> _NumberPrefix;
		
		private string _DocNumber;
		
		private System.Nullable<long> _WarehouseID;
		
		private System.Nullable<long> _DepartmentID;
		
		private System.Nullable<System.DateTime> _DocDate;
		
		private System.Nullable<int> _DateKey;
		
		private string _ConsignNumber;
		
		private System.Nullable<long> _TechOperationID;
		
		private System.Data.Linq.Binary _Posted;
		
		private System.Nullable<long> _PriceTypeID;
		
		private System.Nullable<long> _UserID;
		
		private System.Nullable<long> _CurrencyID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<DocProductionLines> _DocProductionLines;
		
		private EntitySet<FactProductionTree> _FactProductionTrees;
		
		private EntityRef<DimCurrencies> _DimCurrencies;
		
		private EntityRef<DimDates> _DimDates;
		
		private EntityRef<DimDepartments> _DimDepartments;
		
		private EntityRef<DimPeople> _DimPeople;
		
		private EntityRef<DimPriceTypes> _DimPriceTypes;
		
		private EntityRef<DimTechOperation> _DimTechOperation;
		
		private EntityRef<DimWarehouses> _DimWarehouses;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNumberPrefixChanging(System.Nullable<System.DateTime> value);
    partial void OnNumberPrefixChanged();
    partial void OnDocNumberChanging(string value);
    partial void OnDocNumberChanged();
    partial void OnWarehouseIDChanging(System.Nullable<long> value);
    partial void OnWarehouseIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<long> value);
    partial void OnDepartmentIDChanged();
    partial void OnDocDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDocDateChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnConsignNumberChanging(string value);
    partial void OnConsignNumberChanged();
    partial void OnTechOperationIDChanging(System.Nullable<long> value);
    partial void OnTechOperationIDChanged();
    partial void OnPostedChanging(System.Data.Linq.Binary value);
    partial void OnPostedChanged();
    partial void OnPriceTypeIDChanging(System.Nullable<long> value);
    partial void OnPriceTypeIDChanged();
    partial void OnUserIDChanging(System.Nullable<long> value);
    partial void OnUserIDChanged();
    partial void OnCurrencyIDChanging(System.Nullable<long> value);
    partial void OnCurrencyIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DocProduction()
		{
			this._DocProductionLines = new EntitySet<DocProductionLines>(new Action<DocProductionLines>(this.attach_DocProductionLines), new Action<DocProductionLines>(this.detach_DocProductionLines));
			this._FactProductionTrees = new EntitySet<FactProductionTree>(new Action<FactProductionTree>(this.attach_FactProductionTrees), new Action<FactProductionTree>(this.detach_FactProductionTrees));
			this._DimCurrencies = default(EntityRef<DimCurrencies>);
			this._DimDates = default(EntityRef<DimDates>);
			this._DimDepartments = default(EntityRef<DimDepartments>);
			this._DimPeople = default(EntityRef<DimPeople>);
			this._DimPriceTypes = default(EntityRef<DimPriceTypes>);
			this._DimTechOperation = default(EntityRef<DimTechOperation>);
			this._DimWarehouses = default(EntityRef<DimWarehouses>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberPrefix", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> NumberPrefix
		{
			get
			{
				return this._NumberPrefix;
			}
			set
			{
				if ((this._NumberPrefix != value))
				{
					this.OnNumberPrefixChanging(value);
					this.SendPropertyChanging();
					this._NumberPrefix = value;
					this.SendPropertyChanged("NumberPrefix");
					this.OnNumberPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocNumber", DbType="NVarChar(11)", UpdateCheck=UpdateCheck.Never)]
		public string DocNumber
		{
			get
			{
				return this._DocNumber;
			}
			set
			{
				if ((this._DocNumber != value))
				{
					this.OnDocNumberChanging(value);
					this.SendPropertyChanging();
					this._DocNumber = value;
					this.SendPropertyChanged("DocNumber");
					this.OnDocNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._DimWarehouses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._DimDepartments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					if (this._DimDates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsignNumber", DbType="NVarChar(4)", UpdateCheck=UpdateCheck.Never)]
		public string ConsignNumber
		{
			get
			{
				return this._ConsignNumber;
			}
			set
			{
				if ((this._ConsignNumber != value))
				{
					this.OnConsignNumberChanging(value);
					this.SendPropertyChanging();
					this._ConsignNumber = value;
					this.SendPropertyChanged("ConsignNumber");
					this.OnConsignNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechOperationID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> TechOperationID
		{
			get
			{
				return this._TechOperationID;
			}
			set
			{
				if ((this._TechOperationID != value))
				{
					if (this._DimTechOperation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechOperationIDChanging(value);
					this.SendPropertyChanging();
					this._TechOperationID = value;
					this.SendPropertyChanged("TechOperationID");
					this.OnTechOperationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Posted", DbType="Binary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Posted
		{
			get
			{
				return this._Posted;
			}
			set
			{
				if ((this._Posted != value))
				{
					this.OnPostedChanging(value);
					this.SendPropertyChanging();
					this._Posted = value;
					this.SendPropertyChanged("Posted");
					this.OnPostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceTypeID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> PriceTypeID
		{
			get
			{
				return this._PriceTypeID;
			}
			set
			{
				if ((this._PriceTypeID != value))
				{
					if (this._DimPriceTypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PriceTypeID = value;
					this.SendPropertyChanged("PriceTypeID");
					this.OnPriceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._DimPeople.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._DimCurrencies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProduction_DocProductionLines", Storage="_DocProductionLines", ThisKey="ID", OtherKey="DocID")]
		public EntitySet<DocProductionLines> DocProductionLines
		{
			get
			{
				return this._DocProductionLines;
			}
			set
			{
				this._DocProductionLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocProduction_FactProductionTree", Storage="_FactProductionTrees", ThisKey="ID", OtherKey="ProductionDocID")]
		public EntitySet<FactProductionTree> FactProductionTrees
		{
			get
			{
				return this._FactProductionTrees;
			}
			set
			{
				this._FactProductionTrees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimCurrencies_DocProduction", Storage="_DimCurrencies", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
		public DimCurrencies DimCurrencies
		{
			get
			{
				return this._DimCurrencies.Entity;
			}
			set
			{
				DimCurrencies previousValue = this._DimCurrencies.Entity;
				if (((previousValue != value) 
							|| (this._DimCurrencies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimCurrencies.Entity = null;
						previousValue.DocProductions.Remove(this);
					}
					this._DimCurrencies.Entity = value;
					if ((value != null))
					{
						value.DocProductions.Add(this);
						this._CurrencyID = value.ID;
					}
					else
					{
						this._CurrencyID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimCurrencies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_DocProduction", Storage="_DimDates", ThisKey="DateKey", OtherKey="DateKey", IsForeignKey=true)]
		public DimDates DimDates
		{
			get
			{
				return this._DimDates.Entity;
			}
			set
			{
				DimDates previousValue = this._DimDates.Entity;
				if (((previousValue != value) 
							|| (this._DimDates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDates.Entity = null;
						previousValue.DocProductions.Remove(this);
					}
					this._DimDates.Entity = value;
					if ((value != null))
					{
						value.DocProductions.Add(this);
						this._DateKey = value.DateKey;
					}
					else
					{
						this._DateKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimDates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DocProduction", Storage="_DimDepartments", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments
		{
			get
			{
				return this._DimDepartments.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments.Entity = null;
						previousValue.DocProductions.Remove(this);
					}
					this._DimDepartments.Entity = value;
					if ((value != null))
					{
						value.DocProductions.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPeople_DocProduction", Storage="_DimPeople", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public DimPeople DimPeople
		{
			get
			{
				return this._DimPeople.Entity;
			}
			set
			{
				DimPeople previousValue = this._DimPeople.Entity;
				if (((previousValue != value) 
							|| (this._DimPeople.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimPeople.Entity = null;
						previousValue.DocProductions.Remove(this);
					}
					this._DimPeople.Entity = value;
					if ((value != null))
					{
						value.DocProductions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimPeople");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPriceTypes_DocProduction", Storage="_DimPriceTypes", ThisKey="PriceTypeID", OtherKey="ID", IsForeignKey=true)]
		public DimPriceTypes DimPriceTypes
		{
			get
			{
				return this._DimPriceTypes.Entity;
			}
			set
			{
				DimPriceTypes previousValue = this._DimPriceTypes.Entity;
				if (((previousValue != value) 
							|| (this._DimPriceTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimPriceTypes.Entity = null;
						previousValue.DocProductions.Remove(this);
					}
					this._DimPriceTypes.Entity = value;
					if ((value != null))
					{
						value.DocProductions.Add(this);
						this._PriceTypeID = value.ID;
					}
					else
					{
						this._PriceTypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimPriceTypes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTechOperation_DocProduction", Storage="_DimTechOperation", ThisKey="TechOperationID", OtherKey="ID", IsForeignKey=true)]
		public DimTechOperation DimTechOperation
		{
			get
			{
				return this._DimTechOperation.Entity;
			}
			set
			{
				DimTechOperation previousValue = this._DimTechOperation.Entity;
				if (((previousValue != value) 
							|| (this._DimTechOperation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTechOperation.Entity = null;
						previousValue.DocProductions.Remove(this);
					}
					this._DimTechOperation.Entity = value;
					if ((value != null))
					{
						value.DocProductions.Add(this);
						this._TechOperationID = value.ID;
					}
					else
					{
						this._TechOperationID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimTechOperation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_DocProduction", Storage="_DimWarehouses", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses
		{
			get
			{
				return this._DimWarehouses.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses.Entity = null;
						previousValue.DocProductions.Remove(this);
					}
					this._DimWarehouses.Entity = value;
					if ((value != null))
					{
						value.DocProductions.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocProductionLines(DocProductionLines entity)
		{
			this.SendPropertyChanging();
			entity.DocProduction = this;
		}
		
		private void detach_DocProductionLines(DocProductionLines entity)
		{
			this.SendPropertyChanging();
			entity.DocProduction = null;
		}
		
		private void attach_FactProductionTrees(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DocProduction = this;
		}
		
		private void detach_FactProductionTrees(FactProductionTree entity)
		{
			this.SendPropertyChanging();
			entity.DocProduction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DimPartners")]
	public partial class DimPartner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Code;
		
		private string _Name;
		
		private string _FullName;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<DocSale> _DocSales;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DimPartner()
		{
			this._DocSales = new EntitySet<DocSale>(new Action<DocSale>(this.attach_DocSales), new Action<DocSale>(this.detach_DocSales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(11)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(250)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPartner_DocSale", Storage="_DocSales", ThisKey="ID", OtherKey="PartnerID")]
		public EntitySet<DocSale> DocSales
		{
			get
			{
				return this._DocSales;
			}
			set
			{
				this._DocSales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocSales(DocSale entity)
		{
			this.SendPropertyChanging();
			entity.DimPartner = this;
		}
		
		private void detach_DocSales(DocSale entity)
		{
			this.SendPropertyChanging();
			entity.DimPartner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocSales")]
	public partial class DocSale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<System.DateTime> _NumberPrefix;
		
		private string _DocNumber;
		
		private System.Nullable<long> _WarehouseID;
		
		private System.Nullable<System.DateTime> _DocDate;
		
		private System.Nullable<int> _DateKey;
		
		private System.Data.Linq.Binary _Posted;
		
		private System.Nullable<long> _PartnerID;
		
		private System.Nullable<decimal> _DocAmount;
		
		private System.Nullable<long> _CurrencyID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<DocSalesLine> _DocSalesLines;
		
		private EntityRef<DimCurrencies> _DimCurrencies;
		
		private EntityRef<DimPartner> _DimPartner;
		
		private EntityRef<DimWarehouses> _DimWarehouses;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNumberPrefixChanging(System.Nullable<System.DateTime> value);
    partial void OnNumberPrefixChanged();
    partial void OnDocNumberChanging(string value);
    partial void OnDocNumberChanged();
    partial void OnWarehouseIDChanging(System.Nullable<long> value);
    partial void OnWarehouseIDChanged();
    partial void OnDocDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDocDateChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnPostedChanging(System.Data.Linq.Binary value);
    partial void OnPostedChanged();
    partial void OnPartnerIDChanging(System.Nullable<long> value);
    partial void OnPartnerIDChanged();
    partial void OnDocAmountChanging(System.Nullable<decimal> value);
    partial void OnDocAmountChanged();
    partial void OnCurrencyIDChanging(System.Nullable<long> value);
    partial void OnCurrencyIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DocSale()
		{
			this._DocSalesLines = new EntitySet<DocSalesLine>(new Action<DocSalesLine>(this.attach_DocSalesLines), new Action<DocSalesLine>(this.detach_DocSalesLines));
			this._DimCurrencies = default(EntityRef<DimCurrencies>);
			this._DimPartner = default(EntityRef<DimPartner>);
			this._DimWarehouses = default(EntityRef<DimWarehouses>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberPrefix", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> NumberPrefix
		{
			get
			{
				return this._NumberPrefix;
			}
			set
			{
				if ((this._NumberPrefix != value))
				{
					this.OnNumberPrefixChanging(value);
					this.SendPropertyChanging();
					this._NumberPrefix = value;
					this.SendPropertyChanged("NumberPrefix");
					this.OnNumberPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocNumber", DbType="NVarChar(11)", UpdateCheck=UpdateCheck.Never)]
		public string DocNumber
		{
			get
			{
				return this._DocNumber;
			}
			set
			{
				if ((this._DocNumber != value))
				{
					this.OnDocNumberChanging(value);
					this.SendPropertyChanging();
					this._DocNumber = value;
					this.SendPropertyChanged("DocNumber");
					this.OnDocNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._DimWarehouses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Posted", DbType="Binary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Posted
		{
			get
			{
				return this._Posted;
			}
			set
			{
				if ((this._Posted != value))
				{
					this.OnPostedChanging(value);
					this.SendPropertyChanging();
					this._Posted = value;
					this.SendPropertyChanged("Posted");
					this.OnPostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._DimPartner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocAmount", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> DocAmount
		{
			get
			{
				return this._DocAmount;
			}
			set
			{
				if ((this._DocAmount != value))
				{
					this.OnDocAmountChanging(value);
					this.SendPropertyChanging();
					this._DocAmount = value;
					this.SendPropertyChanged("DocAmount");
					this.OnDocAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._DimCurrencies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocSale_DocSalesLine", Storage="_DocSalesLines", ThisKey="ID", OtherKey="DocID")]
		public EntitySet<DocSalesLine> DocSalesLines
		{
			get
			{
				return this._DocSalesLines;
			}
			set
			{
				this._DocSalesLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimCurrencies_DocSale", Storage="_DimCurrencies", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
		public DimCurrencies DimCurrencies
		{
			get
			{
				return this._DimCurrencies.Entity;
			}
			set
			{
				DimCurrencies previousValue = this._DimCurrencies.Entity;
				if (((previousValue != value) 
							|| (this._DimCurrencies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimCurrencies.Entity = null;
						previousValue.DocSales.Remove(this);
					}
					this._DimCurrencies.Entity = value;
					if ((value != null))
					{
						value.DocSales.Add(this);
						this._CurrencyID = value.ID;
					}
					else
					{
						this._CurrencyID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimCurrencies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimPartner_DocSale", Storage="_DimPartner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public DimPartner DimPartner
		{
			get
			{
				return this._DimPartner.Entity;
			}
			set
			{
				DimPartner previousValue = this._DimPartner.Entity;
				if (((previousValue != value) 
							|| (this._DimPartner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimPartner.Entity = null;
						previousValue.DocSales.Remove(this);
					}
					this._DimPartner.Entity = value;
					if ((value != null))
					{
						value.DocSales.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimPartner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_DocSale", Storage="_DimWarehouses", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses
		{
			get
			{
				return this._DimWarehouses.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses.Entity = null;
						previousValue.DocSales.Remove(this);
					}
					this._DimWarehouses.Entity = value;
					if ((value != null))
					{
						value.DocSales.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocSalesLines(DocSalesLine entity)
		{
			this.SendPropertyChanging();
			entity.DocSale = this;
		}
		
		private void detach_DocSalesLines(DocSalesLine entity)
		{
			this.SendPropertyChanging();
			entity.DocSale = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocSalesLines")]
	public partial class DocSalesLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _DocID;
		
		private System.Nullable<long> _GoodID;
		
		private System.Nullable<long> _WarehouseID;
		
		private System.Nullable<decimal> _BaseQty;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<long> _UnitID;
		
		private System.Nullable<decimal> _QtyPcs;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<decimal> _AmountTax;
		
		private System.Nullable<decimal> _AmountWithTax;
		
		private System.Nullable<decimal> _DiscountAutoPercent;
		
		private System.Nullable<decimal> _DiscountAutoAmount;
		
		private System.Nullable<decimal> _DiscountManualPercent;
		
		private System.Nullable<decimal> _DiscountManualAmount;
		
		private System.Data.Linq.Binary _Document822_IDRRef;
		
		private System.Data.Linq.Binary _KeyField;
		
		private System.Nullable<decimal> _LineNum;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimUnits> _DimUnits1;
		
		private EntityRef<DimWarehouses> _DimWarehouses;
		
		private EntityRef<DocSale> _DocSale;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDocIDChanging(System.Nullable<long> value);
    partial void OnDocIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnWarehouseIDChanging(System.Nullable<long> value);
    partial void OnWarehouseIDChanged();
    partial void OnBaseQtyChanging(System.Nullable<decimal> value);
    partial void OnBaseQtyChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnUnitIDChanging(System.Nullable<long> value);
    partial void OnUnitIDChanged();
    partial void OnQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnQtyPcsChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnAmountTaxChanging(System.Nullable<decimal> value);
    partial void OnAmountTaxChanged();
    partial void OnAmountWithTaxChanging(System.Nullable<decimal> value);
    partial void OnAmountWithTaxChanged();
    partial void OnDiscountAutoPercentChanging(System.Nullable<decimal> value);
    partial void OnDiscountAutoPercentChanged();
    partial void OnDiscountAutoAmountChanging(System.Nullable<decimal> value);
    partial void OnDiscountAutoAmountChanged();
    partial void OnDiscountManualPercentChanging(System.Nullable<decimal> value);
    partial void OnDiscountManualPercentChanged();
    partial void OnDiscountManualAmountChanging(System.Nullable<decimal> value);
    partial void OnDiscountManualAmountChanged();
    partial void OnDocument822_IDRRefChanging(System.Data.Linq.Binary value);
    partial void OnDocument822_IDRRefChanged();
    partial void OnKeyFieldChanging(System.Data.Linq.Binary value);
    partial void OnKeyFieldChanged();
    partial void OnLineNumChanging(System.Nullable<decimal> value);
    partial void OnLineNumChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public DocSalesLine()
		{
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimUnits1 = default(EntityRef<DimUnits>);
			this._DimWarehouses = default(EntityRef<DimWarehouses>);
			this._DocSale = default(EntityRef<DocSale>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					if (this._DocSale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._DimWarehouses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BaseQty
		{
			get
			{
				return this._BaseQty;
			}
			set
			{
				if ((this._BaseQty != value))
				{
					this.OnBaseQtyChanging(value);
					this.SendPropertyChanging();
					this._BaseQty = value;
					this.SendPropertyChanged("BaseQty");
					this.OnBaseQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if ((this._DimUnits.HasLoadedOrAssignedValue || this._DimUnits1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPcs
		{
			get
			{
				return this._QtyPcs;
			}
			set
			{
				if ((this._QtyPcs != value))
				{
					this.OnQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._QtyPcs = value;
					this.SendPropertyChanged("QtyPcs");
					this.OnQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountTax", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> AmountTax
		{
			get
			{
				return this._AmountTax;
			}
			set
			{
				if ((this._AmountTax != value))
				{
					this.OnAmountTaxChanging(value);
					this.SendPropertyChanging();
					this._AmountTax = value;
					this.SendPropertyChanged("AmountTax");
					this.OnAmountTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountWithTax", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> AmountWithTax
		{
			get
			{
				return this._AmountWithTax;
			}
			set
			{
				if ((this._AmountWithTax != value))
				{
					this.OnAmountWithTaxChanging(value);
					this.SendPropertyChanging();
					this._AmountWithTax = value;
					this.SendPropertyChanged("AmountWithTax");
					this.OnAmountWithTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountAutoPercent", DbType="Decimal(5,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> DiscountAutoPercent
		{
			get
			{
				return this._DiscountAutoPercent;
			}
			set
			{
				if ((this._DiscountAutoPercent != value))
				{
					this.OnDiscountAutoPercentChanging(value);
					this.SendPropertyChanging();
					this._DiscountAutoPercent = value;
					this.SendPropertyChanged("DiscountAutoPercent");
					this.OnDiscountAutoPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountAutoAmount", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> DiscountAutoAmount
		{
			get
			{
				return this._DiscountAutoAmount;
			}
			set
			{
				if ((this._DiscountAutoAmount != value))
				{
					this.OnDiscountAutoAmountChanging(value);
					this.SendPropertyChanging();
					this._DiscountAutoAmount = value;
					this.SendPropertyChanged("DiscountAutoAmount");
					this.OnDiscountAutoAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountManualPercent", DbType="Decimal(5,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> DiscountManualPercent
		{
			get
			{
				return this._DiscountManualPercent;
			}
			set
			{
				if ((this._DiscountManualPercent != value))
				{
					this.OnDiscountManualPercentChanging(value);
					this.SendPropertyChanging();
					this._DiscountManualPercent = value;
					this.SendPropertyChanged("DiscountManualPercent");
					this.OnDiscountManualPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountManualAmount", DbType="Decimal(15,2)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> DiscountManualAmount
		{
			get
			{
				return this._DiscountManualAmount;
			}
			set
			{
				if ((this._DiscountManualAmount != value))
				{
					this.OnDiscountManualAmountChanging(value);
					this.SendPropertyChanging();
					this._DiscountManualAmount = value;
					this.SendPropertyChanged("DiscountManualAmount");
					this.OnDiscountManualAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Document822_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Document822_IDRRef
		{
			get
			{
				return this._Document822_IDRRef;
			}
			set
			{
				if ((this._Document822_IDRRef != value))
				{
					this.OnDocument822_IDRRefChanging(value);
					this.SendPropertyChanging();
					this._Document822_IDRRef = value;
					this.SendPropertyChanged("Document822_IDRRef");
					this.OnDocument822_IDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyField", DbType="Binary(4)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary KeyField
		{
			get
			{
				return this._KeyField;
			}
			set
			{
				if ((this._KeyField != value))
				{
					this.OnKeyFieldChanging(value);
					this.SendPropertyChanging();
					this._KeyField = value;
					this.SendPropertyChanged("KeyField");
					this.OnKeyFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNum", DbType="Decimal(5,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> LineNum
		{
			get
			{
				return this._LineNum;
			}
			set
			{
				if ((this._LineNum != value))
				{
					this.OnLineNumChanging(value);
					this.SendPropertyChanging();
					this._LineNum = value;
					this.SendPropertyChanged("LineNum");
					this.OnLineNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocSalesLine", Storage="_DimUnits", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.DocSalesLines.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.DocSalesLines.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DocSalesLine", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.DocSalesLines.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.DocSalesLines.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocSalesLine1", Storage="_DimUnits1", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits1
		{
			get
			{
				return this._DimUnits1.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits1.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits1.Entity = null;
						previousValue.DocSalesLines1.Remove(this);
					}
					this._DimUnits1.Entity = value;
					if ((value != null))
					{
						value.DocSalesLines1.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_DocSalesLine", Storage="_DimWarehouses", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses
		{
			get
			{
				return this._DimWarehouses.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses.Entity = null;
						previousValue.DocSalesLines.Remove(this);
					}
					this._DimWarehouses.Entity = value;
					if ((value != null))
					{
						value.DocSalesLines.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocSale_DocSalesLine", Storage="_DocSale", ThisKey="DocID", OtherKey="ID", IsForeignKey=true)]
		public DocSale DocSale
		{
			get
			{
				return this._DocSale.Entity;
			}
			set
			{
				DocSale previousValue = this._DocSale.Entity;
				if (((previousValue != value) 
							|| (this._DocSale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocSale.Entity = null;
						previousValue.DocSalesLines.Remove(this);
					}
					this._DocSale.Entity = value;
					if ((value != null))
					{
						value.DocSalesLines.Add(this);
						this._DocID = value.ID;
					}
					else
					{
						this._DocID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DocSale");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactCurrencyRates")]
	public partial class FactCurrencyRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _CurrencyID;
		
		private System.Nullable<System.DateTime> _Period;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<decimal> _Rate;
		
		private System.Nullable<decimal> _Fold;
		
		private System.Data.Linq.Binary _CurrencyRRef;
		
		private EntityRef<DimCurrencies> _DimCurrencies;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCurrencyIDChanging(System.Nullable<long> value);
    partial void OnCurrencyIDChanged();
    partial void OnPeriodChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnRateChanging(System.Nullable<decimal> value);
    partial void OnRateChanged();
    partial void OnFoldChanging(System.Nullable<decimal> value);
    partial void OnFoldChanged();
    partial void OnCurrencyRRefChanging(System.Data.Linq.Binary value);
    partial void OnCurrencyRRefChanged();
    #endregion
		
		public FactCurrencyRate()
		{
			this._DimCurrencies = default(EntityRef<DimCurrencies>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="BigInt")]
		public System.Nullable<long> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._DimCurrencies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period", DbType="DateTime")]
		public System.Nullable<System.DateTime> Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Decimal(10,4)")]
		public System.Nullable<decimal> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fold", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> Fold
		{
			get
			{
				return this._Fold;
			}
			set
			{
				if ((this._Fold != value))
				{
					this.OnFoldChanging(value);
					this.SendPropertyChanging();
					this._Fold = value;
					this.SendPropertyChanged("Fold");
					this.OnFoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary CurrencyRRef
		{
			get
			{
				return this._CurrencyRRef;
			}
			set
			{
				if ((this._CurrencyRRef != value))
				{
					this.OnCurrencyRRefChanging(value);
					this.SendPropertyChanging();
					this._CurrencyRRef = value;
					this.SendPropertyChanged("CurrencyRRef");
					this.OnCurrencyRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimCurrencies_FactCurrencyRate", Storage="_DimCurrencies", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
		public DimCurrencies DimCurrencies
		{
			get
			{
				return this._DimCurrencies.Entity;
			}
			set
			{
				DimCurrencies previousValue = this._DimCurrencies.Entity;
				if (((previousValue != value) 
							|| (this._DimCurrencies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimCurrencies.Entity = null;
						previousValue.FactCurrencyRates.Remove(this);
					}
					this._DimCurrencies.Entity = value;
					if ((value != null))
					{
						value.FactCurrencyRates.Add(this);
						this._CurrencyID = value.ID;
					}
					else
					{
						this._CurrencyID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimCurrencies");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocTransferProduction")]
	public partial class DocTransferProduction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<bool> _TransferType;
		
		private System.Nullable<System.DateTime> _NumberPrefix;
		
		private string _DocNumber;
		
		private System.Nullable<System.DateTime> _DocDate;
		
		private System.Nullable<int> _DateKey;
		
		private System.Data.Linq.Binary _Posted;
		
		private System.Nullable<long> _WarehouseID;
		
		private System.Nullable<long> _DepartmentID;
		
		private string _ConsignNumber;
		
		private System.Nullable<long> _TechOperationID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private System.Data.Linq.Binary _IDRRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<DocTransferProductionLine> _DocTransferProductionLines;
		
		private EntityRef<DimDates> _DimDates;
		
		private EntityRef<DimDepartments> _DimDepartments;
		
		private EntityRef<DimTechOperation> _DimTechOperation;
		
		private EntityRef<DimWarehouses> _DimWarehouses;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTransferTypeChanging(System.Nullable<bool> value);
    partial void OnTransferTypeChanged();
    partial void OnNumberPrefixChanging(System.Nullable<System.DateTime> value);
    partial void OnNumberPrefixChanged();
    partial void OnDocNumberChanging(string value);
    partial void OnDocNumberChanged();
    partial void OnDocDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDocDateChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnPostedChanging(System.Data.Linq.Binary value);
    partial void OnPostedChanged();
    partial void OnWarehouseIDChanging(System.Nullable<long> value);
    partial void OnWarehouseIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<long> value);
    partial void OnDepartmentIDChanged();
    partial void OnConsignNumberChanging(string value);
    partial void OnConsignNumberChanged();
    partial void OnTechOperationIDChanging(System.Nullable<long> value);
    partial void OnTechOperationIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIDRRefChanging(System.Data.Linq.Binary value);
    partial void OnIDRRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public DocTransferProduction()
		{
			this._DocTransferProductionLines = new EntitySet<DocTransferProductionLine>(new Action<DocTransferProductionLine>(this.attach_DocTransferProductionLines), new Action<DocTransferProductionLine>(this.detach_DocTransferProductionLines));
			this._DimDates = default(EntityRef<DimDates>);
			this._DimDepartments = default(EntityRef<DimDepartments>);
			this._DimTechOperation = default(EntityRef<DimTechOperation>);
			this._DimWarehouses = default(EntityRef<DimWarehouses>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferType", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> TransferType
		{
			get
			{
				return this._TransferType;
			}
			set
			{
				if ((this._TransferType != value))
				{
					this.OnTransferTypeChanging(value);
					this.SendPropertyChanging();
					this._TransferType = value;
					this.SendPropertyChanged("TransferType");
					this.OnTransferTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberPrefix", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> NumberPrefix
		{
			get
			{
				return this._NumberPrefix;
			}
			set
			{
				if ((this._NumberPrefix != value))
				{
					this.OnNumberPrefixChanging(value);
					this.SendPropertyChanging();
					this._NumberPrefix = value;
					this.SendPropertyChanged("NumberPrefix");
					this.OnNumberPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocNumber", DbType="NVarChar(11)", UpdateCheck=UpdateCheck.Never)]
		public string DocNumber
		{
			get
			{
				return this._DocNumber;
			}
			set
			{
				if ((this._DocNumber != value))
				{
					this.OnDocNumberChanging(value);
					this.SendPropertyChanging();
					this._DocNumber = value;
					this.SendPropertyChanged("DocNumber");
					this.OnDocNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					if (this._DimDates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Posted", DbType="Binary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Posted
		{
			get
			{
				return this._Posted;
			}
			set
			{
				if ((this._Posted != value))
				{
					this.OnPostedChanging(value);
					this.SendPropertyChanging();
					this._Posted = value;
					this.SendPropertyChanged("Posted");
					this.OnPostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._DimWarehouses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._DimDepartments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsignNumber", DbType="NVarChar(4)", UpdateCheck=UpdateCheck.Never)]
		public string ConsignNumber
		{
			get
			{
				return this._ConsignNumber;
			}
			set
			{
				if ((this._ConsignNumber != value))
				{
					this.OnConsignNumberChanging(value);
					this.SendPropertyChanging();
					this._ConsignNumber = value;
					this.SendPropertyChanged("ConsignNumber");
					this.OnConsignNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechOperationID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> TechOperationID
		{
			get
			{
				return this._TechOperationID;
			}
			set
			{
				if ((this._TechOperationID != value))
				{
					if (this._DimTechOperation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechOperationIDChanging(value);
					this.SendPropertyChanging();
					this._TechOperationID = value;
					this.SendPropertyChanged("TechOperationID");
					this.OnTechOperationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary IDRRef
		{
			get
			{
				return this._IDRRef;
			}
			set
			{
				if ((this._IDRRef != value))
				{
					this.OnIDRRefChanging(value);
					this.SendPropertyChanging();
					this._IDRRef = value;
					this.SendPropertyChanged("IDRRef");
					this.OnIDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarBinary(8)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocTransferProduction_DocTransferProductionLine", Storage="_DocTransferProductionLines", ThisKey="ID", OtherKey="DocID")]
		public EntitySet<DocTransferProductionLine> DocTransferProductionLines
		{
			get
			{
				return this._DocTransferProductionLines;
			}
			set
			{
				this._DocTransferProductionLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_DocTransferProduction", Storage="_DimDates", ThisKey="DateKey", OtherKey="DateKey", IsForeignKey=true)]
		public DimDates DimDates
		{
			get
			{
				return this._DimDates.Entity;
			}
			set
			{
				DimDates previousValue = this._DimDates.Entity;
				if (((previousValue != value) 
							|| (this._DimDates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDates.Entity = null;
						previousValue.DocTransferProductions.Remove(this);
					}
					this._DimDates.Entity = value;
					if ((value != null))
					{
						value.DocTransferProductions.Add(this);
						this._DateKey = value.DateKey;
					}
					else
					{
						this._DateKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimDates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_DocTransferProduction", Storage="_DimDepartments", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments
		{
			get
			{
				return this._DimDepartments.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments.Entity = null;
						previousValue.DocTransferProductions.Remove(this);
					}
					this._DimDepartments.Entity = value;
					if ((value != null))
					{
						value.DocTransferProductions.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimTechOperation_DocTransferProduction", Storage="_DimTechOperation", ThisKey="TechOperationID", OtherKey="ID", IsForeignKey=true)]
		public DimTechOperation DimTechOperation
		{
			get
			{
				return this._DimTechOperation.Entity;
			}
			set
			{
				DimTechOperation previousValue = this._DimTechOperation.Entity;
				if (((previousValue != value) 
							|| (this._DimTechOperation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimTechOperation.Entity = null;
						previousValue.DocTransferProductions.Remove(this);
					}
					this._DimTechOperation.Entity = value;
					if ((value != null))
					{
						value.DocTransferProductions.Add(this);
						this._TechOperationID = value.ID;
					}
					else
					{
						this._TechOperationID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimTechOperation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_DocTransferProduction", Storage="_DimWarehouses", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses
		{
			get
			{
				return this._DimWarehouses.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses.Entity = null;
						previousValue.DocTransferProductions.Remove(this);
					}
					this._DimWarehouses.Entity = value;
					if ((value != null))
					{
						value.DocTransferProductions.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocTransferProductionLines(DocTransferProductionLine entity)
		{
			this.SendPropertyChanging();
			entity.DocTransferProduction = this;
		}
		
		private void detach_DocTransferProductionLines(DocTransferProductionLine entity)
		{
			this.SendPropertyChanging();
			entity.DocTransferProduction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocTransferProductionLines")]
	public partial class DocTransferProductionLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<bool> _TransferType;
		
		private System.Nullable<long> _DocID;
		
		private System.Nullable<long> _GoodID;
		
		private System.Nullable<decimal> _BaseQty;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<long> _UnitID;
		
		private System.Nullable<decimal> _QtyPcs;
		
		private System.Data.Linq.Binary _Document741_IDRRef;
		
		private System.Data.Linq.Binary _KeyField;
		
		private System.Nullable<decimal> _LineNum;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimUnits> _DimUnits1;
		
		private EntityRef<DocTransferProduction> _DocTransferProduction;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTransferTypeChanging(System.Nullable<bool> value);
    partial void OnTransferTypeChanged();
    partial void OnDocIDChanging(System.Nullable<long> value);
    partial void OnDocIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnBaseQtyChanging(System.Nullable<decimal> value);
    partial void OnBaseQtyChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnUnitIDChanging(System.Nullable<long> value);
    partial void OnUnitIDChanged();
    partial void OnQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnQtyPcsChanged();
    partial void OnDocument741_IDRRefChanging(System.Data.Linq.Binary value);
    partial void OnDocument741_IDRRefChanged();
    partial void OnKeyFieldChanging(System.Data.Linq.Binary value);
    partial void OnKeyFieldChanged();
    partial void OnLineNumChanging(System.Nullable<decimal> value);
    partial void OnLineNumChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public DocTransferProductionLine()
		{
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimUnits1 = default(EntityRef<DimUnits>);
			this._DocTransferProduction = default(EntityRef<DocTransferProduction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferType", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> TransferType
		{
			get
			{
				return this._TransferType;
			}
			set
			{
				if ((this._TransferType != value))
				{
					this.OnTransferTypeChanging(value);
					this.SendPropertyChanging();
					this._TransferType = value;
					this.SendPropertyChanged("TransferType");
					this.OnTransferTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					if (this._DocTransferProduction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BaseQty
		{
			get
			{
				return this._BaseQty;
			}
			set
			{
				if ((this._BaseQty != value))
				{
					this.OnBaseQtyChanging(value);
					this.SendPropertyChanging();
					this._BaseQty = value;
					this.SendPropertyChanged("BaseQty");
					this.OnBaseQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._DimUnits1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPcs
		{
			get
			{
				return this._QtyPcs;
			}
			set
			{
				if ((this._QtyPcs != value))
				{
					this.OnQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._QtyPcs = value;
					this.SendPropertyChanged("QtyPcs");
					this.OnQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Document741_IDRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Document741_IDRRef
		{
			get
			{
				return this._Document741_IDRRef;
			}
			set
			{
				if ((this._Document741_IDRRef != value))
				{
					this.OnDocument741_IDRRefChanging(value);
					this.SendPropertyChanging();
					this._Document741_IDRRef = value;
					this.SendPropertyChanged("Document741_IDRRef");
					this.OnDocument741_IDRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyField", DbType="Binary(4)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary KeyField
		{
			get
			{
				return this._KeyField;
			}
			set
			{
				if ((this._KeyField != value))
				{
					this.OnKeyFieldChanging(value);
					this.SendPropertyChanging();
					this._KeyField = value;
					this.SendPropertyChanged("KeyField");
					this.OnKeyFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNum", DbType="Decimal(5,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> LineNum
		{
			get
			{
				return this._LineNum;
			}
			set
			{
				if ((this._LineNum != value))
				{
					this.OnLineNumChanging(value);
					this.SendPropertyChanging();
					this._LineNum = value;
					this.SendPropertyChanged("LineNum");
					this.OnLineNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_DocTransferProductionLine", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.DocTransferProductionLines.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.DocTransferProductionLines.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocTransferProductionLine", Storage="_DimUnits", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.DocTransferProductionLines.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.DocTransferProductionLines.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_DocTransferProductionLine1", Storage="_DimUnits1", ThisKey="UnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits1
		{
			get
			{
				return this._DimUnits1.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits1.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits1.Entity = null;
						previousValue.DocTransferProductionLines1.Remove(this);
					}
					this._DimUnits1.Entity = value;
					if ((value != null))
					{
						value.DocTransferProductionLines1.Add(this);
						this._UnitID = value.ID;
					}
					else
					{
						this._UnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocTransferProduction_DocTransferProductionLine", Storage="_DocTransferProduction", ThisKey="DocID", OtherKey="ID", IsForeignKey=true)]
		public DocTransferProduction DocTransferProduction
		{
			get
			{
				return this._DocTransferProduction.Entity;
			}
			set
			{
				DocTransferProduction previousValue = this._DocTransferProduction.Entity;
				if (((previousValue != value) 
							|| (this._DocTransferProduction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocTransferProduction.Entity = null;
						previousValue.DocTransferProductionLines.Remove(this);
					}
					this._DocTransferProduction.Entity = value;
					if ((value != null))
					{
						value.DocTransferProductionLines.Add(this);
						this._DocID = value.ID;
					}
					else
					{
						this._DocID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DocTransferProduction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactMaterialsInProduction")]
	public partial class FactMaterialsInProduction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _DepartmentID;
		
		private System.Nullable<long> _GoodID;
		
		private string _ConsignNumber;
		
		private System.Nullable<int> _DateKey;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<decimal> _BaseQty;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<long> _UnitID;
		
		private System.Nullable<decimal> _QtyPcs;
		
		private System.Nullable<System.DateTime> _Period;
		
		private System.Data.Linq.Binary _RecorderTRef;
		
		private System.Data.Linq.Binary _RecorderRRef;
		
		private decimal _LineNum;
		
		private System.Nullable<decimal> _RecordKind;
		
		private System.Data.Linq.Binary _GoodRef;
		
		private System.Data.Linq.Binary _Department_TYPE;
		
		private System.Data.Linq.Binary _Department_RTRef;
		
		private System.Data.Linq.Binary _Department_RRRef;
		
		private System.Nullable<long> _SpecID;
		
		private System.Nullable<long> _ToDepartmentID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimDates> _DimDates;
		
		private EntityRef<DimDepartments> _DimDepartments;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimSpecifications> _DimSpecifications;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimUnits> _DimUnits1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<long> value);
    partial void OnDepartmentIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnConsignNumberChanging(string value);
    partial void OnConsignNumberChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnBaseQtyChanging(System.Nullable<decimal> value);
    partial void OnBaseQtyChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnUnitIDChanging(System.Nullable<long> value);
    partial void OnUnitIDChanged();
    partial void OnQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnQtyPcsChanged();
    partial void OnPeriodChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodChanged();
    partial void OnRecorderTRefChanging(System.Data.Linq.Binary value);
    partial void OnRecorderTRefChanged();
    partial void OnRecorderRRefChanging(System.Data.Linq.Binary value);
    partial void OnRecorderRRefChanged();
    partial void OnLineNumChanging(decimal value);
    partial void OnLineNumChanged();
    partial void OnRecordKindChanging(System.Nullable<decimal> value);
    partial void OnRecordKindChanged();
    partial void OnGoodRefChanging(System.Data.Linq.Binary value);
    partial void OnGoodRefChanged();
    partial void OnDepartment_TYPEChanging(System.Data.Linq.Binary value);
    partial void OnDepartment_TYPEChanged();
    partial void OnDepartment_RTRefChanging(System.Data.Linq.Binary value);
    partial void OnDepartment_RTRefChanged();
    partial void OnDepartment_RRRefChanging(System.Data.Linq.Binary value);
    partial void OnDepartment_RRRefChanged();
    partial void OnSpecIDChanging(System.Nullable<long> value);
    partial void OnSpecIDChanged();
    partial void OnToDepartmentIDChanging(System.Nullable<long> value);
    partial void OnToDepartmentIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public FactMaterialsInProduction()
		{
			this._DimDates = default(EntityRef<DimDates>);
			this._DimDepartments = default(EntityRef<DimDepartments>);
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimSpecifications = default(EntityRef<DimSpecifications>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimUnits1 = default(EntityRef<DimUnits>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._DimDepartments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsignNumber", DbType="NVarChar(4)", UpdateCheck=UpdateCheck.Never)]
		public string ConsignNumber
		{
			get
			{
				return this._ConsignNumber;
			}
			set
			{
				if ((this._ConsignNumber != value))
				{
					this.OnConsignNumberChanging(value);
					this.SendPropertyChanging();
					this._ConsignNumber = value;
					this.SendPropertyChanged("ConsignNumber");
					this.OnConsignNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					if (this._DimDates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BaseQty
		{
			get
			{
				return this._BaseQty;
			}
			set
			{
				if ((this._BaseQty != value))
				{
					this.OnBaseQtyChanging(value);
					this.SendPropertyChanging();
					this._BaseQty = value;
					this.SendPropertyChanged("BaseQty");
					this.OnBaseQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._DimUnits1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPcs
		{
			get
			{
				return this._QtyPcs;
			}
			set
			{
				if ((this._QtyPcs != value))
				{
					this.OnQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._QtyPcs = value;
					this.SendPropertyChanged("QtyPcs");
					this.OnQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderTRef", DbType="Binary(4) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RecorderTRef
		{
			get
			{
				return this._RecorderTRef;
			}
			set
			{
				if ((this._RecorderTRef != value))
				{
					this.OnRecorderTRefChanging(value);
					this.SendPropertyChanging();
					this._RecorderTRef = value;
					this.SendPropertyChanged("RecorderTRef");
					this.OnRecorderTRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderRRef", DbType="Binary(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RecorderRRef
		{
			get
			{
				return this._RecorderRRef;
			}
			set
			{
				if ((this._RecorderRRef != value))
				{
					this.OnRecorderRRefChanging(value);
					this.SendPropertyChanging();
					this._RecorderRRef = value;
					this.SendPropertyChanged("RecorderRRef");
					this.OnRecorderRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNum", DbType="Decimal(9,0) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal LineNum
		{
			get
			{
				return this._LineNum;
			}
			set
			{
				if ((this._LineNum != value))
				{
					this.OnLineNumChanging(value);
					this.SendPropertyChanging();
					this._LineNum = value;
					this.SendPropertyChanged("LineNum");
					this.OnLineNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordKind", DbType="Decimal(1,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RecordKind
		{
			get
			{
				return this._RecordKind;
			}
			set
			{
				if ((this._RecordKind != value))
				{
					this.OnRecordKindChanging(value);
					this.SendPropertyChanging();
					this._RecordKind = value;
					this.SendPropertyChanged("RecordKind");
					this.OnRecordKindChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary GoodRef
		{
			get
			{
				return this._GoodRef;
			}
			set
			{
				if ((this._GoodRef != value))
				{
					this.OnGoodRefChanging(value);
					this.SendPropertyChanging();
					this._GoodRef = value;
					this.SendPropertyChanged("GoodRef");
					this.OnGoodRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department_TYPE", DbType="Binary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Department_TYPE
		{
			get
			{
				return this._Department_TYPE;
			}
			set
			{
				if ((this._Department_TYPE != value))
				{
					this.OnDepartment_TYPEChanging(value);
					this.SendPropertyChanging();
					this._Department_TYPE = value;
					this.SendPropertyChanged("Department_TYPE");
					this.OnDepartment_TYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department_RTRef", DbType="Binary(4)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Department_RTRef
		{
			get
			{
				return this._Department_RTRef;
			}
			set
			{
				if ((this._Department_RTRef != value))
				{
					this.OnDepartment_RTRefChanging(value);
					this.SendPropertyChanging();
					this._Department_RTRef = value;
					this.SendPropertyChanged("Department_RTRef");
					this.OnDepartment_RTRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department_RRRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Department_RRRef
		{
			get
			{
				return this._Department_RRRef;
			}
			set
			{
				if ((this._Department_RRRef != value))
				{
					this.OnDepartment_RRRefChanging(value);
					this.SendPropertyChanging();
					this._Department_RRRef = value;
					this.SendPropertyChanged("Department_RRRef");
					this.OnDepartment_RRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> SpecID
		{
			get
			{
				return this._SpecID;
			}
			set
			{
				if ((this._SpecID != value))
				{
					if (this._DimSpecifications.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecIDChanging(value);
					this.SendPropertyChanging();
					this._SpecID = value;
					this.SendPropertyChanged("SpecID");
					this.OnSpecIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> ToDepartmentID
		{
			get
			{
				return this._ToDepartmentID;
			}
			set
			{
				if ((this._ToDepartmentID != value))
				{
					this.OnToDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._ToDepartmentID = value;
					this.SendPropertyChanged("ToDepartmentID");
					this.OnToDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactMaterialsInProduction", Storage="_DimDates", ThisKey="DateKey", OtherKey="DateKey", IsForeignKey=true)]
		public DimDates DimDates
		{
			get
			{
				return this._DimDates.Entity;
			}
			set
			{
				DimDates previousValue = this._DimDates.Entity;
				if (((previousValue != value) 
							|| (this._DimDates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDates.Entity = null;
						previousValue.FactMaterialsInProductions.Remove(this);
					}
					this._DimDates.Entity = value;
					if ((value != null))
					{
						value.FactMaterialsInProductions.Add(this);
						this._DateKey = value.DateKey;
					}
					else
					{
						this._DateKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimDates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_FactMaterialsInProduction", Storage="_DimDepartments", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments
		{
			get
			{
				return this._DimDepartments.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments.Entity = null;
						previousValue.FactMaterialsInProductions.Remove(this);
					}
					this._DimDepartments.Entity = value;
					if ((value != null))
					{
						value.FactMaterialsInProductions.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactMaterialsInProduction", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.FactMaterialsInProductions.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.FactMaterialsInProductions.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimSpecifications_FactMaterialsInProduction", Storage="_DimSpecifications", ThisKey="SpecID", OtherKey="ID", IsForeignKey=true)]
		public DimSpecifications DimSpecifications
		{
			get
			{
				return this._DimSpecifications.Entity;
			}
			set
			{
				DimSpecifications previousValue = this._DimSpecifications.Entity;
				if (((previousValue != value) 
							|| (this._DimSpecifications.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimSpecifications.Entity = null;
						previousValue.FactMaterialsInProductions.Remove(this);
					}
					this._DimSpecifications.Entity = value;
					if ((value != null))
					{
						value.FactMaterialsInProductions.Add(this);
						this._SpecID = value.ID;
					}
					else
					{
						this._SpecID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimSpecifications");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactMaterialsInProduction", Storage="_DimUnits", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.FactMaterialsInProductions.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.FactMaterialsInProductions.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactMaterialsInProduction1", Storage="_DimUnits1", ThisKey="UnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits1
		{
			get
			{
				return this._DimUnits1.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits1.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits1.Entity = null;
						previousValue.FactMaterialsInProductions1.Remove(this);
					}
					this._DimUnits1.Entity = value;
					if ((value != null))
					{
						value.FactMaterialsInProductions1.Add(this);
						this._UnitID = value.ID;
					}
					else
					{
						this._UnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactProduction")]
	public partial class FactProduction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _ToWarehouseID;
		
		private System.Nullable<long> _FromDepartmentID;
		
		private System.Nullable<long> _GoodID;
		
		private System.Nullable<int> _DateKey;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _ConsignNumber;
		
		private System.Nullable<decimal> _BaseQty;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<long> _UnitID;
		
		private System.Nullable<decimal> _QtyPcs;
		
		private System.Nullable<long> _SpecificationID;
		
		private System.Nullable<System.DateTime> _Period;
		
		private System.Data.Linq.Binary _RecorderTRef;
		
		private System.Data.Linq.Binary _RecorderRRef;
		
		private decimal _LineNum;
		
		private System.Data.Linq.Binary _SpecificationRef;
		
		private System.Data.Linq.Binary _DepartmentRef;
		
		private System.Data.Linq.Binary _GoodAnalyticalKeyRef;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimDates> _DimDates;
		
		private EntityRef<DimDepartments> _DimDepartments;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimSpecifications> _DimSpecifications;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimUnits> _DimUnits1;
		
		private EntityRef<DimWarehouses> _DimWarehouses;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnToWarehouseIDChanging(System.Nullable<long> value);
    partial void OnToWarehouseIDChanged();
    partial void OnFromDepartmentIDChanging(System.Nullable<long> value);
    partial void OnFromDepartmentIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnConsignNumberChanging(string value);
    partial void OnConsignNumberChanged();
    partial void OnBaseQtyChanging(System.Nullable<decimal> value);
    partial void OnBaseQtyChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnUnitIDChanging(System.Nullable<long> value);
    partial void OnUnitIDChanged();
    partial void OnQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnQtyPcsChanged();
    partial void OnSpecificationIDChanging(System.Nullable<long> value);
    partial void OnSpecificationIDChanged();
    partial void OnPeriodChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodChanged();
    partial void OnRecorderTRefChanging(System.Data.Linq.Binary value);
    partial void OnRecorderTRefChanged();
    partial void OnRecorderRRefChanging(System.Data.Linq.Binary value);
    partial void OnRecorderRRefChanged();
    partial void OnLineNumChanging(decimal value);
    partial void OnLineNumChanged();
    partial void OnSpecificationRefChanging(System.Data.Linq.Binary value);
    partial void OnSpecificationRefChanged();
    partial void OnDepartmentRefChanging(System.Data.Linq.Binary value);
    partial void OnDepartmentRefChanged();
    partial void OnGoodAnalyticalKeyRefChanging(System.Data.Linq.Binary value);
    partial void OnGoodAnalyticalKeyRefChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public FactProduction()
		{
			this._DimDates = default(EntityRef<DimDates>);
			this._DimDepartments = default(EntityRef<DimDepartments>);
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimSpecifications = default(EntityRef<DimSpecifications>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimUnits1 = default(EntityRef<DimUnits>);
			this._DimWarehouses = default(EntityRef<DimWarehouses>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToWarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> ToWarehouseID
		{
			get
			{
				return this._ToWarehouseID;
			}
			set
			{
				if ((this._ToWarehouseID != value))
				{
					if (this._DimWarehouses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._ToWarehouseID = value;
					this.SendPropertyChanged("ToWarehouseID");
					this.OnToWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> FromDepartmentID
		{
			get
			{
				return this._FromDepartmentID;
			}
			set
			{
				if ((this._FromDepartmentID != value))
				{
					if (this._DimDepartments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._FromDepartmentID = value;
					this.SendPropertyChanged("FromDepartmentID");
					this.OnFromDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					if (this._DimDates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsignNumber", DbType="NVarChar(4)", UpdateCheck=UpdateCheck.Never)]
		public string ConsignNumber
		{
			get
			{
				return this._ConsignNumber;
			}
			set
			{
				if ((this._ConsignNumber != value))
				{
					this.OnConsignNumberChanging(value);
					this.SendPropertyChanging();
					this._ConsignNumber = value;
					this.SendPropertyChanged("ConsignNumber");
					this.OnConsignNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> BaseQty
		{
			get
			{
				return this._BaseQty;
			}
			set
			{
				if ((this._BaseQty != value))
				{
					this.OnBaseQtyChanging(value);
					this.SendPropertyChanging();
					this._BaseQty = value;
					this.SendPropertyChanged("BaseQty");
					this.OnBaseQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._DimUnits1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPcs
		{
			get
			{
				return this._QtyPcs;
			}
			set
			{
				if ((this._QtyPcs != value))
				{
					this.OnQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._QtyPcs = value;
					this.SendPropertyChanged("QtyPcs");
					this.OnQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecificationID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> SpecificationID
		{
			get
			{
				return this._SpecificationID;
			}
			set
			{
				if ((this._SpecificationID != value))
				{
					if (this._DimSpecifications.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecificationIDChanging(value);
					this.SendPropertyChanging();
					this._SpecificationID = value;
					this.SendPropertyChanged("SpecificationID");
					this.OnSpecificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderTRef", DbType="Binary(4) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RecorderTRef
		{
			get
			{
				return this._RecorderTRef;
			}
			set
			{
				if ((this._RecorderTRef != value))
				{
					this.OnRecorderTRefChanging(value);
					this.SendPropertyChanging();
					this._RecorderTRef = value;
					this.SendPropertyChanged("RecorderTRef");
					this.OnRecorderTRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderRRef", DbType="Binary(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RecorderRRef
		{
			get
			{
				return this._RecorderRRef;
			}
			set
			{
				if ((this._RecorderRRef != value))
				{
					this.OnRecorderRRefChanging(value);
					this.SendPropertyChanging();
					this._RecorderRRef = value;
					this.SendPropertyChanged("RecorderRRef");
					this.OnRecorderRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNum", DbType="Decimal(9,0) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal LineNum
		{
			get
			{
				return this._LineNum;
			}
			set
			{
				if ((this._LineNum != value))
				{
					this.OnLineNumChanging(value);
					this.SendPropertyChanging();
					this._LineNum = value;
					this.SendPropertyChanged("LineNum");
					this.OnLineNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecificationRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SpecificationRef
		{
			get
			{
				return this._SpecificationRef;
			}
			set
			{
				if ((this._SpecificationRef != value))
				{
					this.OnSpecificationRefChanging(value);
					this.SendPropertyChanging();
					this._SpecificationRef = value;
					this.SendPropertyChanged("SpecificationRef");
					this.OnSpecificationRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary DepartmentRef
		{
			get
			{
				return this._DepartmentRef;
			}
			set
			{
				if ((this._DepartmentRef != value))
				{
					this.OnDepartmentRefChanging(value);
					this.SendPropertyChanging();
					this._DepartmentRef = value;
					this.SendPropertyChanged("DepartmentRef");
					this.OnDepartmentRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodAnalyticalKeyRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary GoodAnalyticalKeyRef
		{
			get
			{
				return this._GoodAnalyticalKeyRef;
			}
			set
			{
				if ((this._GoodAnalyticalKeyRef != value))
				{
					this.OnGoodAnalyticalKeyRefChanging(value);
					this.SendPropertyChanging();
					this._GoodAnalyticalKeyRef = value;
					this.SendPropertyChanged("GoodAnalyticalKeyRef");
					this.OnGoodAnalyticalKeyRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactProduction", Storage="_DimDates", ThisKey="DateKey", OtherKey="DateKey", IsForeignKey=true)]
		public DimDates DimDates
		{
			get
			{
				return this._DimDates.Entity;
			}
			set
			{
				DimDates previousValue = this._DimDates.Entity;
				if (((previousValue != value) 
							|| (this._DimDates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDates.Entity = null;
						previousValue.FactProductions.Remove(this);
					}
					this._DimDates.Entity = value;
					if ((value != null))
					{
						value.FactProductions.Add(this);
						this._DateKey = value.DateKey;
					}
					else
					{
						this._DateKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimDates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_FactProduction", Storage="_DimDepartments", ThisKey="FromDepartmentID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments
		{
			get
			{
				return this._DimDepartments.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments.Entity = null;
						previousValue.FactProductions.Remove(this);
					}
					this._DimDepartments.Entity = value;
					if ((value != null))
					{
						value.FactProductions.Add(this);
						this._FromDepartmentID = value.ID;
					}
					else
					{
						this._FromDepartmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactProduction", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.FactProductions.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.FactProductions.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimSpecifications_FactProduction", Storage="_DimSpecifications", ThisKey="SpecificationID", OtherKey="ID", IsForeignKey=true)]
		public DimSpecifications DimSpecifications
		{
			get
			{
				return this._DimSpecifications.Entity;
			}
			set
			{
				DimSpecifications previousValue = this._DimSpecifications.Entity;
				if (((previousValue != value) 
							|| (this._DimSpecifications.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimSpecifications.Entity = null;
						previousValue.FactProductions.Remove(this);
					}
					this._DimSpecifications.Entity = value;
					if ((value != null))
					{
						value.FactProductions.Add(this);
						this._SpecificationID = value.ID;
					}
					else
					{
						this._SpecificationID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimSpecifications");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactProduction", Storage="_DimUnits", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.FactProductions.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.FactProductions.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactProduction1", Storage="_DimUnits1", ThisKey="UnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits1
		{
			get
			{
				return this._DimUnits1.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits1.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits1.Entity = null;
						previousValue.FactProductions1.Remove(this);
					}
					this._DimUnits1.Entity = value;
					if ((value != null))
					{
						value.FactProductions1.Add(this);
						this._UnitID = value.ID;
					}
					else
					{
						this._UnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactProduction", Storage="_DimWarehouses", ThisKey="ToWarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses
		{
			get
			{
				return this._DimWarehouses.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses.Entity = null;
						previousValue.FactProductions.Remove(this);
					}
					this._DimWarehouses.Entity = value;
					if ((value != null))
					{
						value.FactProductions.Add(this);
						this._ToWarehouseID = value.ID;
					}
					else
					{
						this._ToWarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactProductionRemains")]
	public partial class FactProductionRemain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _DepartmentID;
		
		private System.Nullable<long> _GoodID;
		
		private string _ConsignNumber;
		
		private System.Nullable<System.DateTime> _RemainsDate;
		
		private System.Nullable<int> _DateKey;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<long> _UnitID;
		
		private System.Nullable<decimal> _QtyPcs;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimDates> _DimDates;
		
		private EntityRef<DimDepartments> _DimDepartments;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimUnits> _DimUnits;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<long> value);
    partial void OnDepartmentIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnConsignNumberChanging(string value);
    partial void OnConsignNumberChanged();
    partial void OnRemainsDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRemainsDateChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnUnitIDChanging(System.Nullable<long> value);
    partial void OnUnitIDChanged();
    partial void OnQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnQtyPcsChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public FactProductionRemain()
		{
			this._DimDates = default(EntityRef<DimDates>);
			this._DimDepartments = default(EntityRef<DimDepartments>);
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimUnits = default(EntityRef<DimUnits>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._DimDepartments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsignNumber", DbType="NVarChar(4)", UpdateCheck=UpdateCheck.Never)]
		public string ConsignNumber
		{
			get
			{
				return this._ConsignNumber;
			}
			set
			{
				if ((this._ConsignNumber != value))
				{
					this.OnConsignNumberChanging(value);
					this.SendPropertyChanging();
					this._ConsignNumber = value;
					this.SendPropertyChanged("ConsignNumber");
					this.OnConsignNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemainsDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> RemainsDate
		{
			get
			{
				return this._RemainsDate;
			}
			set
			{
				if ((this._RemainsDate != value))
				{
					this.OnRemainsDateChanging(value);
					this.SendPropertyChanging();
					this._RemainsDate = value;
					this.SendPropertyChanged("RemainsDate");
					this.OnRemainsDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					if (this._DimDates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPcs
		{
			get
			{
				return this._QtyPcs;
			}
			set
			{
				if ((this._QtyPcs != value))
				{
					this.OnQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._QtyPcs = value;
					this.SendPropertyChanged("QtyPcs");
					this.OnQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactProductionRemain", Storage="_DimDates", ThisKey="DateKey", OtherKey="DateKey", IsForeignKey=true)]
		public DimDates DimDates
		{
			get
			{
				return this._DimDates.Entity;
			}
			set
			{
				DimDates previousValue = this._DimDates.Entity;
				if (((previousValue != value) 
							|| (this._DimDates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDates.Entity = null;
						previousValue.FactProductionRemains.Remove(this);
					}
					this._DimDates.Entity = value;
					if ((value != null))
					{
						value.FactProductionRemains.Add(this);
						this._DateKey = value.DateKey;
					}
					else
					{
						this._DateKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimDates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_FactProductionRemain", Storage="_DimDepartments", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments
		{
			get
			{
				return this._DimDepartments.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments.Entity = null;
						previousValue.FactProductionRemains.Remove(this);
					}
					this._DimDepartments.Entity = value;
					if ((value != null))
					{
						value.FactProductionRemains.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactProductionRemain", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.FactProductionRemains.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.FactProductionRemains.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactProductionRemain", Storage="_DimUnits", ThisKey="UnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.FactProductionRemains.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.FactProductionRemains.Add(this);
						this._UnitID = value.ID;
					}
					else
					{
						this._UnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactMovements")]
	public partial class FactMovement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _WarehouseID;
		
		private System.Nullable<long> _DepartmentID;
		
		private System.Nullable<long> _GoodID;
		
		private string _ConsignNumber;
		
		private System.Nullable<int> _DateKey;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<System.DateTime> _Period;
		
		private System.Data.Linq.Binary _RecorderTRef;
		
		private System.Data.Linq.Binary _RecorderRRef;
		
		private decimal _LineNum;
		
		private System.Nullable<decimal> _RecordKind;
		
		private System.Data.Linq.Binary _GoodRef;
		
		private System.Data.Linq.Binary _WarehouseRef;
		
		private System.Nullable<decimal> _OnStockQty;
		
		private System.Nullable<long> _BaseUnitID;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<long> _UnitID;
		
		private System.Nullable<decimal> _InOrdersQty;
		
		private System.Nullable<decimal> _QtyPcs;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<DimDepartments> _DimDepartments;
		
		private EntityRef<DimDates> _DimDates;
		
		private EntityRef<DimUnits> _DimUnits;
		
		private EntityRef<DimUnits> _DimUnits1;
		
		private EntityRef<DimGoods> _DimGoods;
		
		private EntityRef<DimWarehouses> _DimWarehouses;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnWarehouseIDChanging(System.Nullable<long> value);
    partial void OnWarehouseIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<long> value);
    partial void OnDepartmentIDChanged();
    partial void OnGoodIDChanging(System.Nullable<long> value);
    partial void OnGoodIDChanged();
    partial void OnConsignNumberChanging(string value);
    partial void OnConsignNumberChanged();
    partial void OnDateKeyChanging(System.Nullable<int> value);
    partial void OnDateKeyChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnPeriodChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodChanged();
    partial void OnRecorderTRefChanging(System.Data.Linq.Binary value);
    partial void OnRecorderTRefChanged();
    partial void OnRecorderRRefChanging(System.Data.Linq.Binary value);
    partial void OnRecorderRRefChanged();
    partial void OnLineNumChanging(decimal value);
    partial void OnLineNumChanged();
    partial void OnRecordKindChanging(System.Nullable<decimal> value);
    partial void OnRecordKindChanged();
    partial void OnGoodRefChanging(System.Data.Linq.Binary value);
    partial void OnGoodRefChanged();
    partial void OnWarehouseRefChanging(System.Data.Linq.Binary value);
    partial void OnWarehouseRefChanged();
    partial void OnOnStockQtyChanging(System.Nullable<decimal> value);
    partial void OnOnStockQtyChanged();
    partial void OnBaseUnitIDChanging(System.Nullable<long> value);
    partial void OnBaseUnitIDChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnUnitIDChanging(System.Nullable<long> value);
    partial void OnUnitIDChanged();
    partial void OnInOrdersQtyChanging(System.Nullable<decimal> value);
    partial void OnInOrdersQtyChanged();
    partial void OnQtyPcsChanging(System.Nullable<decimal> value);
    partial void OnQtyPcsChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public FactMovement()
		{
			this._DimDepartments = default(EntityRef<DimDepartments>);
			this._DimDates = default(EntityRef<DimDates>);
			this._DimUnits = default(EntityRef<DimUnits>);
			this._DimUnits1 = default(EntityRef<DimUnits>);
			this._DimGoods = default(EntityRef<DimGoods>);
			this._DimWarehouses = default(EntityRef<DimWarehouses>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._DimWarehouses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._DimDepartments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> GoodID
		{
			get
			{
				return this._GoodID;
			}
			set
			{
				if ((this._GoodID != value))
				{
					if (this._DimGoods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIDChanging(value);
					this.SendPropertyChanging();
					this._GoodID = value;
					this.SendPropertyChanged("GoodID");
					this.OnGoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsignNumber", DbType="NVarChar(4)", UpdateCheck=UpdateCheck.Never)]
		public string ConsignNumber
		{
			get
			{
				return this._ConsignNumber;
			}
			set
			{
				if ((this._ConsignNumber != value))
				{
					this.OnConsignNumberChanging(value);
					this.SendPropertyChanging();
					this._ConsignNumber = value;
					this.SendPropertyChanged("ConsignNumber");
					this.OnConsignNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateKey", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DateKey
		{
			get
			{
				return this._DateKey;
			}
			set
			{
				if ((this._DateKey != value))
				{
					if (this._DimDates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDateKeyChanging(value);
					this.SendPropertyChanging();
					this._DateKey = value;
					this.SendPropertyChanged("DateKey");
					this.OnDateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderTRef", DbType="Binary(4) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RecorderTRef
		{
			get
			{
				return this._RecorderTRef;
			}
			set
			{
				if ((this._RecorderTRef != value))
				{
					this.OnRecorderTRefChanging(value);
					this.SendPropertyChanging();
					this._RecorderTRef = value;
					this.SendPropertyChanged("RecorderTRef");
					this.OnRecorderTRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderRRef", DbType="Binary(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RecorderRRef
		{
			get
			{
				return this._RecorderRRef;
			}
			set
			{
				if ((this._RecorderRRef != value))
				{
					this.OnRecorderRRefChanging(value);
					this.SendPropertyChanging();
					this._RecorderRRef = value;
					this.SendPropertyChanged("RecorderRRef");
					this.OnRecorderRRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineNum", DbType="Decimal(9,0) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal LineNum
		{
			get
			{
				return this._LineNum;
			}
			set
			{
				if ((this._LineNum != value))
				{
					this.OnLineNumChanging(value);
					this.SendPropertyChanging();
					this._LineNum = value;
					this.SendPropertyChanged("LineNum");
					this.OnLineNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordKind", DbType="Decimal(1,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RecordKind
		{
			get
			{
				return this._RecordKind;
			}
			set
			{
				if ((this._RecordKind != value))
				{
					this.OnRecordKindChanging(value);
					this.SendPropertyChanging();
					this._RecordKind = value;
					this.SendPropertyChanged("RecordKind");
					this.OnRecordKindChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary GoodRef
		{
			get
			{
				return this._GoodRef;
			}
			set
			{
				if ((this._GoodRef != value))
				{
					this.OnGoodRefChanging(value);
					this.SendPropertyChanging();
					this._GoodRef = value;
					this.SendPropertyChanged("GoodRef");
					this.OnGoodRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseRef", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary WarehouseRef
		{
			get
			{
				return this._WarehouseRef;
			}
			set
			{
				if ((this._WarehouseRef != value))
				{
					this.OnWarehouseRefChanging(value);
					this.SendPropertyChanging();
					this._WarehouseRef = value;
					this.SendPropertyChanged("WarehouseRef");
					this.OnWarehouseRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnStockQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> OnStockQty
		{
			get
			{
				return this._OnStockQty;
			}
			set
			{
				if ((this._OnStockQty != value))
				{
					this.OnOnStockQtyChanging(value);
					this.SendPropertyChanging();
					this._OnStockQty = value;
					this.SendPropertyChanged("OnStockQty");
					this.OnOnStockQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BaseUnitID
		{
			get
			{
				return this._BaseUnitID;
			}
			set
			{
				if ((this._BaseUnitID != value))
				{
					if (this._DimUnits.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitID = value;
					this.SendPropertyChanged("BaseUnitID");
					this.OnBaseUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._DimUnits1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InOrdersQty", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> InOrdersQty
		{
			get
			{
				return this._InOrdersQty;
			}
			set
			{
				if ((this._InOrdersQty != value))
				{
					this.OnInOrdersQtyChanging(value);
					this.SendPropertyChanging();
					this._InOrdersQty = value;
					this.SendPropertyChanged("InOrdersQty");
					this.OnInOrdersQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPcs", DbType="Decimal(15,0)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPcs
		{
			get
			{
				return this._QtyPcs;
			}
			set
			{
				if ((this._QtyPcs != value))
				{
					this.OnQtyPcsChanging(value);
					this.SendPropertyChanging();
					this._QtyPcs = value;
					this.SendPropertyChanged("QtyPcs");
					this.OnQtyPcsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDepartments_FactMovement", Storage="_DimDepartments", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public DimDepartments DimDepartments
		{
			get
			{
				return this._DimDepartments.Entity;
			}
			set
			{
				DimDepartments previousValue = this._DimDepartments.Entity;
				if (((previousValue != value) 
							|| (this._DimDepartments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDepartments.Entity = null;
						previousValue.FactMovements.Remove(this);
					}
					this._DimDepartments.Entity = value;
					if ((value != null))
					{
						value.FactMovements.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimDepartments");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimDates_FactMovement", Storage="_DimDates", ThisKey="DateKey", OtherKey="DateKey", IsForeignKey=true)]
		public DimDates DimDates
		{
			get
			{
				return this._DimDates.Entity;
			}
			set
			{
				DimDates previousValue = this._DimDates.Entity;
				if (((previousValue != value) 
							|| (this._DimDates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimDates.Entity = null;
						previousValue.FactMovements.Remove(this);
					}
					this._DimDates.Entity = value;
					if ((value != null))
					{
						value.FactMovements.Add(this);
						this._DateKey = value.DateKey;
					}
					else
					{
						this._DateKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("DimDates");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactMovement", Storage="_DimUnits", ThisKey="BaseUnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits
		{
			get
			{
				return this._DimUnits.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits.Entity = null;
						previousValue.FactMovements.Remove(this);
					}
					this._DimUnits.Entity = value;
					if ((value != null))
					{
						value.FactMovements.Add(this);
						this._BaseUnitID = value.ID;
					}
					else
					{
						this._BaseUnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimUnits_FactMovement1", Storage="_DimUnits1", ThisKey="UnitID", OtherKey="ID", IsForeignKey=true)]
		public DimUnits DimUnits1
		{
			get
			{
				return this._DimUnits1.Entity;
			}
			set
			{
				DimUnits previousValue = this._DimUnits1.Entity;
				if (((previousValue != value) 
							|| (this._DimUnits1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimUnits1.Entity = null;
						previousValue.FactMovements1.Remove(this);
					}
					this._DimUnits1.Entity = value;
					if ((value != null))
					{
						value.FactMovements1.Add(this);
						this._UnitID = value.ID;
					}
					else
					{
						this._UnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimUnits1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimGoods_FactMovement", Storage="_DimGoods", ThisKey="GoodID", OtherKey="ID", IsForeignKey=true)]
		public DimGoods DimGoods
		{
			get
			{
				return this._DimGoods.Entity;
			}
			set
			{
				DimGoods previousValue = this._DimGoods.Entity;
				if (((previousValue != value) 
							|| (this._DimGoods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimGoods.Entity = null;
						previousValue.FactMovements.Remove(this);
					}
					this._DimGoods.Entity = value;
					if ((value != null))
					{
						value.FactMovements.Add(this);
						this._GoodID = value.ID;
					}
					else
					{
						this._GoodID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimGoods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DimWarehouses_FactMovement", Storage="_DimWarehouses", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public DimWarehouses DimWarehouses
		{
			get
			{
				return this._DimWarehouses.Entity;
			}
			set
			{
				DimWarehouses previousValue = this._DimWarehouses.Entity;
				if (((previousValue != value) 
							|| (this._DimWarehouses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DimWarehouses.Entity = null;
						previousValue.FactMovements.Remove(this);
					}
					this._DimWarehouses.Entity = value;
					if ((value != null))
					{
						value.FactMovements.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<long>);
					}
					this.SendPropertyChanged("DimWarehouses");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
